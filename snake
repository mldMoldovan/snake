#!/bin/bash


_version="0.5.0"
_name="S.N.A.K.E"
_morph_state="Unknown"



_blinking=true
_verbose=false
_decorate=true
_debug=true
_undying=true


_repo0="https://github.com/mldMoldovan/snake.git"
_repo1="nry"
_repo2="nry"
_repo3="nry"





RED='\e[1;91m'
GREEN='\e[1;92m'
BLUE='\e[1;96m'
NEW_BLUE='\e[34m'
YELLOW='\e[1;93m'
NC='\033[0m'
WHITE='\e[1;97m'
BLINK='\e[5m'


_green(){ #color
   GREEN='\e[1;92m'
   clear
   printf "$GREEN Green Bold Activate\n"
   date
}

_white(){ #color
   WHITE='\e[1;97m'
   clear
   printf "$WHITE White Bold Activate\n"
   date
}

_yellow(){ #color
   YELLOW='\e[1;93m'
   clear
   printf "$YELLOW Yellow Bold Activate\n"
   date
}

_red(){ #color
   RED='\e[1;91m'
   clear
   printf "$RED Red Bold Activate\n"
   date
}

_cyan(){ #color

   CYAN='\e[1;96m'
   clear
   printf "$CYAN Cyan Bold Activate\n"
   date
}

_normal(){ #color
   NC='\033[0m'
   clear
   printf "$NC Text Normalized\n"
   date
}

quietTextRestore(){ #color
    NC='\033[0m'
    printf "$NC\n"

}



_wts(){ #decorative

     printf "$_name has been waiting for your command\n"

}




_mirror(){ #human

   _system="$(uname -s)"

   if [ $_system == "Darwin" ]; then
     open -a /Applications/FaceTime/Contents/MacOS/FaceTime
   elif [[ $_system == "Linux" ]]; then
     printf "$RED Not supported on this system$NC\n"
   else
     printf "$RED Not supported on this system$NC\n"
   fi

}


_people(){ #enjoy

    _system="$(uname -s)"

    if [ $_system == "Darwin" ]; then
       sudo arp-scan -l | sed '1,2d' | sed '$d' | sed '$d' | sed '$d' | sed '$d'
    elif [[ $_system == "Linux" ]]; then
       sudo arp-scan -l | sed '1,2d' | sed '$d' | sed '$d' | sed '$d' | sed '$d'
    elif [[ $_system == "OpenBSD" ]]; then
       sudo arp-scan -l | sed '1,2d' | sed '$d' | sed '$d' | sed '$d' | sed '$d'
    elif [[ $_system == "Minix" ]]; then
       arp -a
    elif [[ $_system == "Haiku" ]]; then
       arp -a | awk '{print $1,$3,$2}'
    elif [[ $_system == "GNU" ]]; then
        arp -a | awk '{print $1,$3,$2}'
    elif [[ $_system == "$(uname -n)" ]]; then   #UNIX
       sudo arp-scan -l | sed '1,2d' | sed '$d' | sed '$d' | sed '$d' | sed '$d'
    else
       printf "$RED Not supported on your OS$NC\n"
    fi

}



_ghost(){ #defend



  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


   _converted=$( echo snake | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//' | sed 's/^/./')
   _new="$(echo snake | sed 's/^/./' )"


  sudo cp /usr/local/bin/snake ./snake
  sudo cp snake snake2
  sh snake -uninstall
  sudo rm -rf snake
  cat snake2 | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
  sudo rm -rf snake2 ; sh $_new -qinstall ; sudo rm -rf $_new
  clear


elif [[ $_system == "Linux" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  sudo cp /usr/local/bin/snake ./snake
  sudo cp snake snake2
  cat snake2 | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
  sudo rm -rf snake2 ; printf "$_revved\n" ; sudo chmod +x $_new ; sudo cp $_new /usr/local/bin/
  sh snake -uninstall
  sudo rm -rf snake
  clear
  #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

elif [[ $_system == "Haiku" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat snake | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh snake -uninstall
  rm -rf snake

else

  printf "$RED Not supported default$NC\n"

fi



}





_revive(){ #defend



  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


   _converted=$( echo $(echo snakholder | cut -c 1-4)e | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
   _converted_f=$( echo $(echo snakholder | cut -c 1-4)e | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//' | sed 's/^/./g')
   _new="$(echo $(echo snakholder | cut -c 1-4)e)"
   _former="$(echo $(echo snakholder | cut -c 1-4)e | sed 's/^/./g')"


  sudo cp /usr/local/bin/$_former ./$_former
  sudo cp $_former snake2
  sh $_former -uninstall
  sudo rm -rf $_former
  cat snake2 | sed "s/$_former/$_new/g" | sed "s/$_converted_f/$_converted/g" > $_new
  sudo rm -rf snake2 ; sh $_new -qinstall ; sudo rm -rf $_new
  clear


elif [[ $_system == "Linux" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  sudo cp /usr/local/bin/snake ./snake
  sudo cp snake snake2
  cat snake2 | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
  sudo rm -rf snake2 ; printf "$_revved\n" ; sudo chmod +x $_new ; sudo cp $_new /usr/local/bin/
  sh snake -uninstall
  sudo rm -rf snake
  clear
  #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

elif [[ $_system == "Haiku" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat snake | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh snake -uninstall
  rm -rf snake

else

  printf "$RED Not supported default$NC\n"

fi



}


_myself(){ #enjoy

  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Linux" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "OpenBSD" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Minix" ]]; then
      printf "Local IP -> $(ifconfig | grep \/dev\/ip | awk '{print $3}')\n"
  elif [[ $_system == "Haiku" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "GNU" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "$(uname -n)" ]]; then   #UNIX
      printf "$RED Not supported yet$NC\n"
  else
      printf "$RED Not supported default$NC\n"
  fi

}



_self(){ #heart


  _alive=true


   if [ "$1" == "func" ]; then
     if [ "$2" == "num" ]; then
       cat /usr/local/bin/snake | sort -u | grep -c '()'
     elif [[ "$2" == "list" ]]; then
       cat /usr/local/bin/snake | grep '()' | sort -u
     elif [[ "$2" == "wip" ]]; then
       cat /usr/local/bin/snake | grep -c 'Not supported yet'
     else
       printf "$RED FUNC ERROR $NC\n"
     fi
   elif [[ "$1" == "sys" ]]; then
     if [ "$2" == "num" ]; then
       cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | sort -u | sed 's/"$(uname/"Unix"/g' | sed 's/GNU/Hurd/g' | sed '$d' | wc -l | sed 's/ //g'
     elif [[ "$2" == "list" ]]; then
       cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | sort -u | sed 's/"$(uname/"Unix"/g' | sed 's/GNU/Hurd/g' | sed 's/"/ /g' | sed '$d'
     elif [[ "$2" == "ratio" ]]; then
          if [ "$3" == "i" ]; then
              printf "Darwin $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"Darwin"')\n"
              printf "Linux $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"Linux"')\n"
              printf "BSD $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"OpenBSD"')\n"
              printf "Minix $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"Minix"')\n"
              printf "Haiku $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"Haiku"')\n"
              printf "GNU $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"GNU"')\n"
              printf "Unix $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"$(uname')\n"
          elif [[ "$3" == "w" ]]; then
              printf "Darwin $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"Darwin"')\n"
              printf "Linux $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"Linux"')\n"
              printf "BSD $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"OpenBSD"')\n"
              printf "Minix $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"Minix"')\n"
              printf "Haiku $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"Haiku"')\n"
              printf "GNU $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"GNU"')\n"
              printf "Unix $(cat /usr/local/bin/snake | grep  '_system == "' | awk '{print $5}' | grep -c '"$(uname')\n"
          else
              printf "$RED SYS ERROR$NC\n"
          fi
     else
       printf "$RED SYS ERROR$NC\n"
     fi
   elif [[ "$1" == "db" ]]; then
     if [ "$2" == "s" ]; then

       sudo cp /usr/local/bin/snake ./snake
       sudo cp snake snake2
       sh snake -uninstall
       sudo rm -rf snake
       cat snake2 | sed "s/_newj()/_jvdr()/g" | sed "s/_newv()/_vndr()/g" | sed "s/_newj/_jvdr/g" | sed "s/_newv/_vndr/g" > snake
       sudo rm -rf snake2 ; sh snake -qinstall ; sudo rm -rf snake
       printf "$YELLOW Standard database initiated.$NC\n"

       :'
       sudo cp /usr/local/bin/snake ./snake
       sudo cp snake snake2
       sh snake -uninstall
       sudo rm -rf snake
       cat snake2 | sed "s/#db1/#db0/g" > snake
       sudo rm -rf snake2 ; sh snake -qinstall ; sudo rm -rf snake
       printf "$RED Standard database initiated.$NC\n"
       '
     elif [[ "$2" == "b" ]]; then

       sudo cp /usr/local/bin/snake ./snake
       sudo cp snake snake2
       sh snake -uninstall
       sudo rm -rf snake
       cat snake2 | sed "s/_jvdr()/_uf()/g" | sed "s/_vndr()/_uf2()/g" | sed "s/_jvdr/_newj/g" | sed "s/_vndr/_newv/g" > snake
       sudo rm -rf snake2 ; sh snake -qinstall ; sudo rm -rf snake
       printf "$YELLOW Backup database initiated.$NC\n"

       :'
       sudo cp /usr/local/bin/snake ./snake
       sudo cp snake snake2
       sh snake -uninstall
       sudo rm -rf snake
       cat snake2 | sed "s/#db0/#db1/g" > snake
       sudo rm -rf snake2 ; sh snake -qinstall ; sudo rm -rf snake
       printf "$RED Standard database initiated.$NC\n"
       '
     elif [[ "$2" == "w" ]]; then
       _valoare="$(cat /usr/local/bin/snake | grep -c 'uf()')"

       if [ $_valoare == "2" ]; then
          printf "Standard\n"
       else
          printf "Backup\n"
       fi
     else
        printf "$RED DB unknown$NC\n"
     fi
   else
     printf "$RED DB ERROR $NC\n"
   fi


}


_everything(){ #enjoy


   _system="$(uname -s)"

   if [ $_system == "Darwin" ]; then
       systemstats
   elif [[ $_system == "Linux" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "OpenBSD" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "Minix" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "Haiku" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "GNU" ]]; then
       printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "$(uname -n)" ]]; then   #UNIX
       printf "$RED Not supported yet$NC\n"
   else
       printf "$RED Not supported default$NC\n"
   fi



}

_router_info(){ #enjoy

  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

     printf "\n"
     printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}')$NC\n"
     printf "\n"
     printf "$(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12)\n"
     printf "$YELLOW$(dig +short myip.opendns.com @resolver1.opendns.com)$NC\n"
     printf "\n"
     printf "$(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')\n"
     printf `_jvdr $(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')`
     printf "$NC$BLINK\n"
     printf "\n"
     curl ipinfo.io/city
     curl ipinfo.io/loc
     curl ipinfo.io/org
     printf "$NC\n"

  elif [[ $_system == "Linux" ]]; then
    printf "\n"
    printf "$WHITE$(nmcli -t -f active,ssid |grep enp0s3 | sed '$d' | awk '{print $4,$5,$6}')$NC\n"
    printf "\n"
    printf "$(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12)\n"
    printf "$YELLOW$(dig +short myip.opendns.com @resolver1.opendns.com)$NC\n"
    printf "\n"
    printf "$(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')\n"
    printf `_jvdr $(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')`
    printf "$NC$BLINK\n"
    printf "\n"
    curl ipinfo.io/city
    curl ipinfo.io/loc
    curl ipinfo.io/org
    printf "$NC\n"
  elif [[ $_system == "OpenBSD" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Minix" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "Haiku" ]]; then
     printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "GNU" ]]; then
      printf "$RED Not supported yet$NC\n"
  elif [[ $_system == "$(uname -n)" ]]; then   #UNIX
     printf "$RED Not supported yet$NC\n"
  else
     printf "$RED Not supported default$NC\n"
  fi


}


_expand(){ #enjoy

    _spread >/dev/null
    _inject >/dev/null
    _salt >/dev/null
    _replicate >/dev/null
    printf "$RED _expanded$YELLOW!$NC\n"

}


_network(){ #enjoy

   _system="$(uname -s)"
   _local=$(dig +short myip.opendns.com @resolver1.opendns.com)

   if [ "$1" == "scan" ]; then
       if [ $_system == "Darwin" ]; then
          nmap -F $(ipcalc $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3}') | grep Network | awk '{print $2}')
       elif [[ $_system == "Linux" ]]; then
          printf "$RED Not supported yet$NC\n"
       else
          printf "$RED Not supported default$NC\n"
       fi
   elif [[ "$1" == "max" ]]; then
       if [ $_system == "Darwin" ]; then
          ipcalc $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3}') | grep Hosts | awk '{print $2}'
       elif [[ $_system == "Linux" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ $_system == "OpenBSD" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ $_system == "Minix" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ $_system == "Haiku" ]]; then
          printf "$RED Not supported yet$NC\n"
       elif [[ $_system == "$(uname -n)" ]]; then   #UNIX
          printf "$RED Not supported yet$NC\n"
       else
          printf "$RED Not supported default$NC\n"
       fi
   elif [[ "$1" == "router" ]]; then
       _router_info
   elif [[ "$1" == "top" ]]; then
       _router_info
   elif [[ "$1" == "speed" ]]; then
       _radar
   elif [[ "$1" == "sniff" ]]; then
       printf "$RED ERROR $NC\n"
   elif [[ "$1" == "infect" ]]; then
       printf "$RED ERROR $NC\n"
   elif [[ "$1" == "magic" ]]; then
       printf " max /$YELLOW router $NC/$BLUE scan $NC/$WHITE speed $NC/ sniff /$RED infect$NC\n"
   else
       printf "$RED sNET ERROR $NC\n"
   fi
}

_opaa(){ #decorative


  clear
  printf "$BLINK                  ..      .........   .ue     ^Rc\n"
  printf "                .R   Lo #           7d  .daN.   S\n"
  printf "               A  ua             .ug  oe    #L  ?b\n"
  printf "              A                    .d   .BLYAT   ?b.\n"
  printf "             Z                    a*CYKA#           Nu\n"
  printf "            A                                        #b\n"
  printf "          .L                                           Sr\n"
  printf "        .A                                   SL        S\n"
  printf "      .S                                    8 R      dP\n"
  printf "   .dx                                   .dP d    .d#\n"
  printf "  xP              .e                 .ud#   dE.oa (\n"
  printf "  S                             .ua           \dP\n"
  printf "  ?L  ..   De                 ..oa          .S  uP\n"
  printf "   #c:S  u.             .ua*  S          uR .a\n"
  printf "    ?LS.        ath    xa     A          d  JP\n"
  printf "     ^#S.        #L  .S     8          d  d\n"
  printf "                   b. S.   A          S  8\n"
  printf "                      aSL S          S  a\n"
  printf "                   aL    S          d  8\n"
  printf "                   SSu.uS          dF dF\n"
  printf "                   S       o      dP xR\n"
  printf "                   S      dFNu...a   S\n"
  printf "                    N..   ?B        :R$NC\n"


}

_motto(){ #decorative

printf "This is $GREEN $_name$BLUE $_version$NC at your service  \n"

}


_l_poor(){ #decorative

  printf "\n"
  printf "$GREEN     <<<<< $_name >>>>>$NC\n"
  printf "$GREEN       <<<$WHITE     S     $GREEN>>>  $NC\n"
  printf "$GREEN         < $_name >    $NC\n"
  printf "$NC\n"

}

_l_unblink(){ #decorative

  printf "\n"
  printf "$GREEN     <<<<< $_name >>>>>$NC\n"
  printf "$GREEN       <<<$NC     🐍     $GREEN>>>  $NC\n"
  printf "$GREEN         < $_name >    $NC\n"
  printf "$NC\n"

}




_l_blink(){

  printf "$BLINK\n"
  printf "$GREEN     <<<<< $_name >>>>>$NC\n"
  printf "$BLINK$GREEN       <<<$NC$BLINK     🐍     $GREEN$BLINK>>>  $NC\n"
  printf "$BLINK$GREEN         < $_name >    $NC\n"
  printf "$NC\n"

}

_logo(){

  #printf "Logo call: $_blinking\n"


  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

     if $_blinking ; then
       _l_blink
     else
       _l_unblink
     fi

  elif [[ $_system == "Linux" ]]; then

     if $_blinking ; then
       _l_blink
     else
       _l_unblink
     fi

  elif [[ $_system == "OpenBSD" ]]; then

     if $_blinking ; then
       _l_blink
     else
       _l_unblink
     fi

  elif [[ $_system == "Minix" ]]; then

      _l_poor

  elif [[ $_system == "Haiku" ]]; then

      _l_poor

  elif [[ $_system == "GNU" ]]; then

        _l_poor

  elif [[ $_system == "$(uname -n)" ]]; then # UNIX

      _l_poor

  else

    printf "$REDmOO$WHITEmOO$NC\n"

  fi



}


_samsung(){ #morph


  _rnd=$[RANDOM%14]
  _codes=("D0:87:E2" "20:55:31" "54:40:AD" "84:2E:27" "50:F0:D3" "84:11:9E" "08:EC:A9" "10:D3:8A" "38:2D:D1" "E0:CB:EE" "64:B8:53" "F4:42:8F" "18:83:31" "84:55:A5" "A8:7C:01" "C0:11:73")




_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Samsung :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Samsung :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo 38:2D:E8:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

elif [[ $_system == "Haiku" ]]; then

  printf "Not supported yet\n"

elif [[ $_system == "GNU" ]]; then

  printf "Not supported yet\n"

else

 printf "Not available on this system\n"

fi





}

_lg(){ #morph


  _rnd=$[RANDOM%9]
  _codes=("14:C9:13" "3C:BD:D8" "2C:54:CF" "00:1F:E3" "00:26:E2" "00:1E:75" "6C:D6:8A" "20:21:A5" "0C:48:85")

  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

  _off
  sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
  end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
  echo ${_codes[$_rnd]}$end)
  _on

  if [ "$1" == "-q" ]; then
  >/dev/null  2>&1
  else
  printf "$WHITE LG :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
  fi

  elif [[ $_system == "Linux" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

  if [ "$1" == "-q" ]; then
  >/dev/null  2>&1
  else
  printf "$WHITE LG :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
  fi

  elif [[ $_system == "Minix" ]]; then

    sudo ip link set dev enp0s3 down
    sudo ip link set dev enp0s3 address $(echo 2C:54:CF:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
    sudo ip link set dev enp0s3 up

  elif [[ $_system == "OpenBSD" ]]; then

    ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

  else

   printf "Not available on this system\n"

  fi



}

_apple(){ #morph


  _rnd=$[RANDOM%19]
  _codes=("F0:76:6F" "40:CB:C0" "40:98:AD" "6C:4D:73" "C4:84:66" "B8:63:4D" "50:32:37" "D4:61:9D" "B0:48:1A" "98:9E:63" "DC:A9:04" "48:A1:95" "6C:AB:31" "7C:50:49" "E4:2B:34" "1C:36:BB" "3C:2E:FF" "6C:96:CF" "30:35:AD" "A8:BE:27" "70:A2:B3")


  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

  #printf "$YELLOW DEBUG ->$BLUE Darwin morphing$NC\n"

  _off
  sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
  end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
  echo ${_codes[$_rnd]}$end)
  _on

  if [ "$1" == "-q" ]; then
  >/dev/null  2>&1
  else
  printf "$WHITE Apple :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
  fi

  elif [[ $_system == "Linux" ]]; then

  #printf "$YELLOW DEBUG ->$BLUE Linux morphing$NC\n"




  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

  #printf "$YELLOW DEBUG ->$BLUE Should be done$NC\n"
  #printf "$YELLOW I have generated another :$WHITE $(hexchars="0123456789ABCDEF" end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' ) echo DC:A9:04$end)$NC\n"

  if [ "$1" == "-q" ]; then
  >/dev/null  2>&1
  else
  printf "$WHITE Apple :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
  fi

  elif [[ $_system == "Minix" ]]; then

    sudo ip link set dev enp0s3 down
    sudo ip link set dev enp0s3 address $(echo DC:A9:04:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
    sudo ip link set dev enp0s3 up

  elif [[ $_system == "OpenBSD" ]]; then

    ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

  else

   printf "$RED Not available on this system$NC\n"

  fi



}

_oppo(){ #morph


  _rnd=$[RANDOM%19]
  _codes=("E8:BB:A8" "BC:3A:EA" "8C:0E:E3" "6C:5C:14" "EC:F3:42" "DC:55:83" "88:5A:06" "1C:42:7D" "50:29:F5" "84:6F:CE" "F4:D6:20" "EC:51:BC" "F0:79:E8" "F0:6D:78" "50:3C:EA" "58:7A:6A" "E4:C4:83" "D4:67:D3" "58:C6:F0" "C0:2E:25" "48:83:B4")



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

#printf "$YELLOW DEBUG ->$BLUE Darwin morphing$NC\n"

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Oppo :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

#printf "$YELLOW DEBUG ->$BLUE Linux morphing$NC\n"




sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

#printf "$YELLOW DEBUG ->$BLUE Should be done$NC\n"
#printf "$YELLOW I have generated another :$WHITE $(hexchars="0123456789ABCDEF" end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' ) echo DC:A9:04$end)$NC\n"

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Oppo :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo 50:29:F5:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "$RED Not available on this system$NC\n"

fi

}

_one_plus(){ #morph


_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo C0:EE:FB$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE One Plus :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo C0:EE:FB:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE One Plus :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo C0:EE:FB:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo C0:EE:FB:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_huawei(){ #morph


_rnd=$[RANDOM%19]
_codes=("48:AD:08" "2C:AB:00" "00:E0:FC" "24:DF:6A" "00:9A:CD" "80:38:BC" "D4:40:F0" "64:A6:51" "E8:CD:2D" "AC:E2:15" "EC:23:3D" "78:F5:FD" "80:B6:86" "10:C6:1F" "88:53:D4" "0C:37:DC" "BC:76:70" "24:DB:AC" "0C:45:BA" "CC:A2:23" "E8:08:8B")

_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Huawei :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Huawei :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo 78:F5:FD:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_xperia(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 1C:7B:21$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Xperia :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 1C:7B:21:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Xperia :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo 1C:7B:21:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo 1C:7B:21:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_yota(){ #morph


_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 28:C6:71$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Yota :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 28:C6:71:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Yota :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo 28:C6:71:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo 28:C6:71:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}


_lumia(){ #morph


_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 38:F2:3E$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Lumia :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 38:F2:3E:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Lumia :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo 38:F2:3E:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo 38:F2:3E:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_nokia(){ #morph

  _rnd=$[RANDOM%13]
  _codes=("A4:81:EE" "4C:7F:62" "40:7A:80" "B0:5C:E5" "D4:C1:FC" "48:DC:FB" "E0:A6:70" "6C:9B:02" "0C:DD:EF" "54:44:08" "C8:D1:0B" "C8:97:9F" "F4:F5:A5" "3C:C2:43")


_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Nokia :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Nokia :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo A4:81:EE:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_htc(){ #morph


  _rnd=$[RANDOM%18]
  _codes=("80:7A:BF" "90:E7:C4" "7C:61:93" "2C:8A:72" "98:0D:2E" "A8:26:D9" "D4:20:6D" "18:87:96" "00:23:76" "04:C2:3E" "00:EE:BD" "AC:37:43" "00:09:2D" "F8:DB:7F" "E8:99:C4" "80:01:84" "50:2E:5C" "84:7A:88" "74:F6:1C" "38:E7:D8")



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE HTC :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE HTC :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo 80:7A:BF:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_xiaomi(){ #morph

  _rnd=$[RANDOM%19]
  _codes=("8C:5A:F8" "F8:A4:5F" "8C:BE:BE" "64:09:80" "98:FA:E3" "18:59:36" "9C:99:A0" "C4:0B:CB" "EC:D0:9F" "F4:F5:DB" "E4:46:DA" "18:F0:E4" "9C:2E:A1" "50:A0:09" "20:A6:0C" "E0:DC:FF" "60:AB:67" "90:78:B2" "04:C8:07" "74:23:44" "D8:32:E3")



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Xiaomi :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Xiaomi :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo F8:A4:5F:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}


_hp(){ #morph


  _rnd=$[RANDOM%19]
  _codes=("3C:D9:2B" "9C:8E:99" "B4:99:BA" "1C:C1:DE" "F4:CE:46" "00:1C:C4" "00:25:B3" "00:18:71" "00:0B:CD" "00:0E:7F" "00:0F:20" "00:11:0A" "00:13:21" "00:16:35" "00:17:A4" "00:08:02" "00:08:83" "C4:34:6B" "8C:DC:D4" "34:64:A9" "D4:C9:EF")


_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE HP :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE HP :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo 3C:D9:2B:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}



_dell(){ #morph


  _rnd=$[RANDOM%19]
  _codes=("EC:F4:BB" "D0:67:E5" "18:A9:9B" "F8:DB:88" "18:FB:7B" "74:E6:E2" "10:98:36" "44:A8:42" "34:E6:D7" "00:0B:DB" "00:11:43" "00:18:8B" "D4:BE:D9" "00:1A:A0" "00:21:70" "00:26:B9" "A4:BA:DB" "00:1E:4F" "5C:F9:DD" "00:06:5B" "80:18:44")



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Dell :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Dell :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo F8:DB:88:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_ibm(){ #morph


_rnd=$[RANDOM%19]
_codes=("00:04:AC" "00:60:94" "A8:97:DC" "E4:1F:13" "00:25:03" "00:17:EF" "10:00:5A" "98:BE:94" "6C:AE:8B" "5C:F3:FC" "FC:CF:62" "00:21:5E" "00:02:55" "00:50:76" "00:06:29" "00:20:35" "08:00:5A" "40:F2:E9" "00:09:6B" "74:99:75" "34:40:B5")


_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE IBM :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE IBM :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 6C:AE:8B:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_microsoft(){ #morph


_rnd=$[RANDOM%19]
_codes=("38:F2:3E" "48:50:73" "74:E2:8C" "84:63:D6" "D4:8F:33" "00:15:5D" "00:50:F2" "98:5F:D3" "38:25:6B" "BC:83:85" "EC:83:50" "B8:31:B5" "9C:6C:15" "48:86:E8" "2C:29:97" "10:2F:6B" "28:18:78" "60:45:BD" "7C:ED:8D" "00:0D:3A" "B4:E1:C4")


_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Microsoft :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Microsoft :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 48:50:73:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_lenovo(){ #morph


_rnd=$[RANDOM%5]
_codes=("98:FF:D0" "50:3C:C4" "74:04:2B" "E0:2C:B2" "70:72:0D" "D4:22:3F")

_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Lenovo :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Lenovo :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 70:72:0D:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}


_intel(){ #morph


  _rnd=$[RANDOM%6]
  _codes=("00:03:47" "00:11:75" "00:13:E8" "00:13:02" "E4:F8:9C" "A4:02:B9" "4C:34:88")

_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Intel :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Intel :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 2C:6E:85:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}


_amd(){ #morph




_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:0C:87$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE AMD :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 00:0C:87:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE AMD :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:0C:87:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 00:0C:87:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_nvidia(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:04:4B$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Nvidia :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 00:04:4B:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Nvidia :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:04:4B:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 00:04:4B:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_tesla(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 98:ED:5C$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Tesla :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 98:ED:5C:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Tesla :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 98:ED:5C:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 98:ED:5C:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_bombardier(){ #morph


_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:11:BD$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Microsoft :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 00:11:BD:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Microsoft :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:11:BD:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 00:11:BD:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}


_boeing(){ #morph


  _rnd=$[RANDOM%3]
  _codes=("00:50:93" "00:06:F8" "34:61:78" "00:40:BE")

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo $end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE  :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Boeing :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Boeing :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:50:93:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}


_lockheed(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:07:EF$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Lockheed :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 00:07:EF:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Lockheed :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:07:EF:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 00:07:EF:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_airbus(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:23:B9$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Airbus :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 00:23:B9:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Airbus :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:23:B9:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 00:23:B9:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_northrop(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:19:8A$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Northrop :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 00:19:8A:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Northrop :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:19:8A:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 00:19:8A:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_bae(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo CC:3F:EA$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE BAE :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo CC:3F:EA:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE BAE :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo CC:3F:EA:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo CC:3F:EA:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}


_us_army(){ #morph


_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:C0:ED$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE US Army  :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 00:C0:ED:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE US Army :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:C0:ED:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 00:C0:ED:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}


_toyota(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:0A:AB$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Toyota :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 00:0A:AB:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Toyota :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:0A:AB:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 00:0A:AB:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}


_porsche(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo D0:0E:A4$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Porsche :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo D0:0E:A4:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Porsche :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo D0:0E:A4:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo D0:0E:A4:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_parrot(){ #morph


  _rnd=$[RANDOM%4]
  _codes=("90:3A:E6" "90:03:B7" "A0:14:3D" "00:26:7E" "00:12:1C")

_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo ${_codes[$_rnd]}$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Parrot :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Parrot :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo A0:14:3D:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo ${_codes[$_rnd]}:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_nasa(){ #morph



_system="$(uname -s)"

if [ $_system == "Darwin" ]; then

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:08:55$end)
_on

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE NASA :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Linux" ]]; then

sudo ip link set dev enp0s3 down
sudo ip link set dev enp0s3 address $(echo 00:08:55:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
sudo ip link set dev enp0s3 up

if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE NASA :: $(ifconfig enp0s3 | grep ether | awk '{print $2}')$NC\n"
fi

elif [[ $_system == "Minix" ]]; then

  sudo ip link set dev enp0s3 down
  sudo ip link set dev enp0s3 address $(echo echo 00:08:55:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])
  sudo ip link set dev enp0s3 up

elif [[ $_system == "OpenBSD" ]]; then

  ifconfig em0 lladdr $(echo echo 00:08:55:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10]:$[RANDOM%10]$[RANDOM%10])

else

 printf "Not available on this system\n"

fi

}

_tv(){ #morph

  _off
  sudo ifconfig en0 ether 80:56:F2:78:98:DD
  _on
  if [ "$1" == "-q" ]; then
  >/dev/null  2>&1
  else
  printf "$WHITE Sony Bravia :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
  fi


}



_cloak(){ #morph

  while true
do
  if [ "$1" == "samsung" ]; then
    _samsung $3

  elif [[ "$1" == "lg" ]]; then
    _lg $3

  elif [[ "$1" == "apple" ]]; then
    _apple $3

  elif [[ "$1" == "huawei" ]]; then
    _huawei $3

  elif [[ "$1" == "xperia" ]]; then
    _xperia $3

  elif [[ "$1" == "oppo" ]]; then
    _oppo $3

  elif [[ "$1" == "yota" ]]; then
    _yota $3

  elif [[ "$1" == "lumia" ]]; then
    _lumia $3

  elif [[ "$1" == "hp" ]]; then
    _hp $3

  elif [[ "$1" == "dell" ]]; then
    _dell $3

  elif [[ "$1" == "ibm" ]]; then
    _ibm $3

  elif [[ "$1" == "microsoft" ]]; then
    _microsoft $3

  elif [[ "$1" == "lenovo" ]]; then
    _lenovo $3

  elif [[ "$1" == "intel" ]]; then
    _intel $3

  elif [[ "$1" == "one_plus" ]]; then
    _one_plus $3

  elif [[ "$1" == "airbus" ]]; then
    _airbus $3

  elif [[ "$1" == "boeing" ]]; then
    _boeing $3

  elif [[ "$1" == "lockheed" ]]; then
    _lockheed $3

  elif [[ "$1" == "northrop" ]]; then
    _northrop $3

  elif [[ "$1" == "bae" ]]; then
    _bae $3

  elif [[ "$1" == "bombardier" ]]; then
    _bombardier $3

  elif [[ "$1" == "tesla" ]]; then
    _tesla $3

  elif [[ "$1" == "toyota" ]]; then
    _toyota $3

  elif [[ "$1" == "porsche" ]]; then
    _porsche $3

  elif [[ "$1" == "us_army" ]]; then
    _us_army $3

  elif [[ "$1" == "parrot" ]]; then
    _parrot $3

  elif [[ "$1" == "nasa" ]]; then
    _nasa $3

  elif [[ "$1" == "tv" ]]; then
    _tv $3
  fi
  printf "$WHITE$(date)$NC\n"
  printf "\n"
   sleep $2
done


}






_relist(){ #enjoy

   clear ; ls

}

_highlight(){ #enjoy

   _yellow ; clear ; ls ; quietTextRestore

}


_reveal(){ #enjoy

   _white ; clear ; ls -la ; quietTextRestore

}


_exec(){ #enjoy




    _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then
    sudo chmod +x snake
    sudo cp snake /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "Linux" ]]; then
    sudo chmod +x snake
    sudo cp snake /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "Haiku" ]]; then
       chmod +x snake
       #sudo cp snake /usr/local/bin/
       printf "$RED _nested$NC \n"
  elif [[ $_system == "OpenBSD" ]]; then
    sudo chmod +x snake
    sudo cp snake /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "Minix" ]]; then
    chmod +x snake
    cp snake /usr/local/bin/
    printf "$RED _nested$NC \n"
  elif [[ $_system == "GNU" ]]; then
    su
    chmod +x snake
    cp snake /usr/local/bin/
    printf "$RED _nested$NC \n"
  else
     printf "$RED Not supported default$NC\n"
  fi

}


_exec_i(){ #enjoy


  _system="$(uname -s)"

if [ $_system == "Darwin" ]; then
  if [ "$1" == "-g" ]; then
   sudo chmod +x snake
   sudo cp snake /usr/local/bin/
   _ghost
   printf "$RED _installed$NC \n"
  else
   sudo chmod +x snake
   sudo cp snake /usr/local/bin/
   printf "$RED _installed$NC \n"
  fi
elif [[ $_system == "Linux" ]]; then
   sudo chmod +x snake
   sudo cp snake /usr/local/bin/
   printf "$RED _installed$NC \n"
elif [[ $_system == "Haiku" ]]; then
   chmod +x snake
   cp snake /bin
   printf "$RED _installed$NC \n"
elif [[ $_system == "OpenBSD" ]]; then
   chmod +x snake
   cp snake /usr/local/bin/
   printf "$RED _installed$NC \n"
elif [[ $_system == "Minix" ]]; then
   chmod +x snake
   cp snake /usr/local/bin/
   printf "$RED _installed$NC \n"
elif [[ $_system == "GNU" ]]; then
   su
   chmod +x snake
   cp snake /usr/local/bin/
   printf "$RED _installed$NC \n"
else
   printf "$RED Not supported default$NC\n"
fi




}




_exec_q(){ #enjoy


  _system="$(uname -s)"

if [ $_system == "Darwin" ]; then
   sudo chmod +x snake
   sudo cp snake /usr/local/bin/

elif [[ $_system == "Linux" ]]; then
   sudo chmod +x snake
   sudo cp snake /usr/local/bin/

elif [[ $_system == "Haiku" ]]; then
   chmod +x snake
   cp snake /bin

elif [[ $_system == "OpenBSD" ]]; then
   chmod +x snake
   cp snake /usr/local/bin/

elif [[ $_system == "Minix" ]]; then
   chmod +x snake
   cp snake /usr/local/bin/

elif [[ $_system == "GNU" ]]; then
   su
   chmod +x snake
   cp snake /usr/local/bin/

else
   printf "$RED Not supported default$NC\n"
fi




}

_exec_u(){ #enjoy


  _system="$(uname -s)"

if [ $_system == "Darwin" ]; then
   sudo chmod -x snake >/dev/null 2>&1
   sudo rm -rf /usr/local/bin/snake
elif [[ $_system == "Linux" ]]; then
   sudo chmod -x snake
   sudo rm -rf /usr/local/bin/snake
elif [[ $_system == "Haiku" ]]; then
   chmod +x snake
   rm -rf /bin/snake
elif [[ $_system == "OpenBSD" ]]; then
   sudo chmod -x snake
   sudo rm -rf /usr/local/bin/snake
elif [[ $_system == "Minix" ]]; then
   chmod -x snake
   rm -rf /usr/local/bin/snake
elif [[ $_system == "GNU" ]]; then
   su
   chmod -x snake
   rm -rf /usr/local/bin/snake
else
   printf "$RED Not supported default$NC\n"
fi




}

_appID(){ #enjoy

    ps -A | grep -m1 "$1" | awk '{print $1}'

}

_snap(){ #enjoy


           _system="$(uname -s)"

           if [ $_system == "Darwin" ]; then

             _cheese
             touch $HOME/.snake/snake.json
             echo "{\"$(date)\":{" >> snake.json
             echo "   \"ID\":1024," >> snake.json
             echo "   \"Race\":\"Salazaar\"," >> snake.json
             echo "   \"Username\":\"$USER\"," >> snake.json
             echo "   \"Homepath\":\"$HOME\"," >> snake.json
             echo "   \"Nestname\":\"$(hostname)\"," >> snake.json
             echo "   \"Shell\":\"$SHELL\"," >> snake.json
             echo "   \"InternalIP\":\"$(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}')\"," >> snake.json
             echo "   \"Mac\":\"$(ipconfig getpacket en0 | grep chaddr | awk '{print $3;}')\"," >> snake.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> snake.json
             echo "   \"OS\":\"$(uname -s)\"," >> snake.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> snake.json
             echo "   \"VSpawn\":\"$(date)\"," >> snake.json
             echo "   \"Control\":false," >> snake.json
             echo "   \"Heat\":0," >> snake.json
             echo "   \"Task\":\"Monitor\"," >> snake.json
             echo "   }," >> snake.json
             echo " }  " >> snake.json

           elif [[ $_system == "Linux" ]]; then

             _cheese
             touch $HOME/.snake/snake.json
             echo "{\"$(date)\":{" >> snake.json
             echo "   \"ID\":1024," >> snake.json
             echo "   \"Race\":\"Salazaar\"," >> snake.json
             echo "   \"Username\":\"$USER\"," >> snake.json
             echo "   \"Homepath\":\"$HOME\"," >> snake.json
             echo "   \"Nestname\":\"$(hostname)\"," >> snake.json
             echo "   \"Shell\":\"$SHELL\"," >> snake.json
             echo "   \"InternalIP\":\"$(ifconfig enp0s3 | grep inet | awk '{print $3}')\"," >> snake.json
             echo "   \"Mac\":\"$(ifconfig enp0s3 | grep ether | awk '{print $2}')\"," >> snake.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> snake.json
             echo "   \"OS\":\"$(uname -s)\"," >> snake.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> snake.json
             echo "   \"VSpawn\":\"$(date)\"," >> snake.json
             echo "   \"Control\":false," >> snake.json
             echo "   \"Heat\":0," >> snake.json
             echo "   \"Task\":\"Monitor\"," >> snake.json
             echo "   }," >> snake.json
             echo " }  " >> snake.json

           elif [[ $_system == "OpenBSD" ]]; then

             _cheese
             touch $HOME/.snake/snake.json
             echo "{\"$(date)\":{" >> snake.json
             echo "   \"ID\":1024," >> snake.json
             echo "   \"Race\":\"Salazaar\"," >> snake.json
             echo "   \"Username\":\"$USER\"," >> snake.json
             echo "   \"Homepath\":\"$HOME\"," >> snake.json
             echo "   \"Nestname\":\"$(hostname)\"," >> snake.json
             echo "   \"Shell\":\"$SHELL\"," >> snake.json
             echo "   \"InternalIP\":\"$(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}')\"," >> snake.json
             echo "   \"Mac\":\"$(ipconfig getpacket en0 | grep chaddr | awk '{print $3;}')\"," >> snake.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> snake.json
             echo "   \"OS\":\"$(uname -s)\"," >> snake.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> snake.json
             echo "   \"VSpawn\":\"$(date)\"," >> snake.json
             echo "   \"Control\":false," >> snake.json
             echo "   \"Heat\":0," >> snake.json
             echo "   \"Task\":\"Monitor\"," >> snake.json
             echo "   }," >> snake.json
             echo " }  " >> snake.json

           elif [[ $_system == "Minix" ]]; then

             _cheese
             touch $HOME/.snake/snake.json
             echo "{\"$(date)\":{" >> snake.json
             echo "   \"ID\":1024," >> snake.json
             echo "   \"Race\":\"Salazaar\"," >> snake.json
             echo "   \"Username\":\"$USER\"," >> snake.json
             echo "   \"Homepath\":\"$HOME\"," >> snake.json
             echo "   \"Nestname\":\"$(hostname)\"," >> snake.json
             echo "   \"Shell\":\"$SHELL\"," >> snake.json
             echo "   \"InternalIP\":\"$(hostaddr -i)\"," >> snake.json
             echo "   \"Mac\":\"$(hostaddr -e)\"," >> snake.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> snake.json
             echo "   \"OS\":\"$(uname -s)\"," >> snake.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> snake.json
             echo "   \"VSpawn\":\"$(date)\"," >> snake.json
             echo "   \"Control\":false," >> snake.json
             echo "   \"Heat\":0," >> snake.json
             echo "   \"Task\":\"Monitor\"," >> snake.json
             echo "   }," >> snake.json
             echo " }  " >> snake.json

           elif [[ $_system == "Haiku" ]]; then

             _cheese
             touch $HOME/.snake/snake.json
             echo "{\"$(date)\":{" >> snake.json
             echo "   \"ID\":1024," >> snake.json
             echo "   \"Race\":\"Salazaar\"," >> snake.json
             echo "   \"Username\":\"$USER\"," >> snake.json
             echo "   \"Homepath\":\"$HOME\"," >> snake.json
             echo "   \"Nestname\":\"$(hostname)\"," >> snake.json
             echo "   \"Shell\":\"$SHELL\"," >> snake.json
             echo "   \"InternalIP\":\"$(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}')\"," >> snake.json
             echo "   \"Mac\":\"$(ipconfig getpacket en0 | grep chaddr | awk '{print $3;}')\"," >> snake.json
             echo "   \"Architecture\":\"$(uname -m)\"," >> snake.json
             echo "   \"OS\":\"$(uname -s)\"," >> snake.json
             echo "   \"KernelVersion\":\"$(uname -r)\"," >> snake.json
             echo "   \"VSpawn\":\"$(date)\"," >> snake.json
             echo "   \"Control\":false," >> snake.json
             echo "   \"Heat\":0," >> snake.json
             echo "   \"Task\":\"Monitor\"," >> snake.json
             echo "   }," >> snake.json
             echo " }  " >> snake.json

           else

             printf "$RED Not on this system$NC\n"

           fi

}


_decompose(){ #enjoy






        _system="$(uname -s)"

        if [ $_system == "Darwin" ]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl ipinfo.io >> _corpse.slz
          clear

        elif [[ $_system == "Linux" ]]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl ipinfo.io >> _corpse.slz
          clear

        elif [[ $_system == "OpenBSD" ]]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl ipinfo.io >> _corpse.slz
          clear

        elif [[ $_system == "Minix" ]]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl ipinfo.io >> _corpse.slz
          clear

        elif [[ $_system == "Haiku" ]]; then

          cd ~
          mkdir ._ra
          cd ._ra
          clear
          touch _corpse.slz
          echo "_THERMALS >> " >> _corpse.slz
          ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
          echo "_USER >> $USER" >> _corpse.slz
          echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
          echo "_NETWORK >>" >> _corpse.slz
          arp -a >> _corpse.slz
          echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
          echo "_SPEED >> " >> _corpse.slz
          speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
          echo "_TCP >> " >> _corpse.slz
          netstat -ap tcp >> _corpse.slz
          echo "_UDP >> " >> _corpse.slz
          netstat -ap udp >> _corpse.slz
          echo "_SYSTEMSTATS >> " >> _corpse.slz
          curl ipinfo.io >> _corpse.slz
          clear

        else

          printf "$RED Not supported default$NC\n"

        fi


}

_r_w(){

  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


   _new="$(echo $1 | rev )"

  mkdir blana ; cd blana
  sudo cp /usr/local/bin/snake ./snake
  cat snake | sed "s/magic/$_new/g" > snake2
  sudo rm -rf snake ; sudo mv snake2 snake ; sh snake -qinstall ; sudo rm -rf snake
  cd .. ; sudo rm -rf blana



elif [[ $_system == "Linux" ]]; then


  _converted=$( echo $1 | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _revved=$( echo $1 | rev)

  sudo cp /usr/local/bin/snake ./snake
  sudo cp snake snake2
  sh snake -uninstall
  sudo rm -rf snake
  cat snake2 | sed "s/snake/$1/g" | sed "s/S.N.A.K.E/$_converted/g" > $1
  sudo rm -rf snake2 ; printf "$_revved\n" ; printf "Check if name changed exists\n"
  #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

elif [[ $_system == "Haiku" ]]; then

  _rnd=$[RANDOM%50]
  _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

  _converted=$( echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _revved=$( echo ${_names[$_rnd]} | rev)

  cp /usr/local/bin/snake ./snake
  cp snake snake2
  sh snake -uninstall
  rm -rf snake
  cat snake2 | sed "s/snake/${_names[$_rnd]}/g" | sed "s/S.N.A.K.E/$_converted/g" > ${_names[$_rnd]}
  rm -rf snake2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; rm -rf ${_names[$_rnd]}

else

  printf "$RED Not supported default$NC\n"

fi

}


_a_p(){


 sudo cp /usr/local/bin/snake ./snake
 cat snake | sed "s/magic/$1/g" > snake2
 sudo rm -rf snake ; sudo mv snake2 snake ; sh snake -qinstall ; sudo rm -rf snake


}


_t_melt(){

   _melt
   sleep 10

}


_c_melt(){


  _system="$(uname -s)"





 if [ $_system == "Darwin" ]; then


   _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
   _new="$(echo $1 | rev )"


  mkdir blana ; cd blana
  sudo cp /usr/local/bin/snake ./snake
  sudo cp snake snake2
  sh snake -uninstall
  sudo rm -rf snake
  cat snake2 | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
  sudo rm -rf snake2 ; sh $_new -qinstall ; sudo rm -rf $_new
  cd .. ; sudo rm -rf blana



elif [[ $_system == "Linux" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  sudo cp /usr/local/bin/snake ./snake
  sudo cp snake snake2
  cat snake2 | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
  sudo rm -rf snake2 ; printf "$_revved\n" ; sudo chmod +x $_new ; sudo cp $_new /usr/local/bin/
  sh snake -uninstall
  sudo rm -rf snake
  #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

elif [[ $_system == "Haiku" ]]; then


  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

  cat snake | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
  printf "$_new\n" ; sh $_new -qinstall
  sh snake -uninstall
  rm -rf snake

elif [[ $_system == "OpenBSD" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp /usr/local/bin/snake ./snake
 sudo cp snake snake2
 sh snake -uninstall
 sudo rm -rf snake
 cat snake2 | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
 sudo rm -rf snake2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "Minix" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"


 sudo cp /usr/local/bin/snake ./snake
 sudo cp snake snake2
 sh snake -uninstall
 sudo rm -rf snake
 cat snake2 | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
 sudo rm -rf snake2 ; sh $_new -qinstall ; sudo rm -rf $_new

elif [[ $_system == "GNU" ]]; then

  _converted=$( echo $1 | rev | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
  _new="$(echo $1 | rev )"

 su
 cp /usr/local/bin/snake ./snake
 cp snake snake2
 sh snake -uninstall
 rm -rf snake
 cat snake2 | sed "s/snake/$_new/g" | sed "s/S.N.A.K.E/$_converted/g" > $_new
 rm -rf snake2 ; sh $_new -qinstall ; rm -rf $_new

else

  printf "$RED Not supported default$NC\n"

fi


}



_melt(){


    _system="$(uname -s)"





   if [ $_system == "Darwin" ]; then

     _rnd=$[RANDOM%50]
     _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "hound" "death" "cobra" "carlo" "oscar" "ninja" "nixon" "betty" "harry" "draco" "boris" "pepsi" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "texas" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "buyer" "brain" "water")

     _converted=$( echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
     _revved=$( echo ${_names[$_rnd]} | rev)

    sudo cp /usr/local/bin/snake ./snake
    sudo cp snake snake2
    sh snake -uninstall
    sudo rm -rf snake
    cat snake2 | sed "s/snake/${_names[$_rnd]}/g" | sed "s/S.N.A.K.E/$_converted/g" > ${_names[$_rnd]}
    sudo rm -rf snake2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

  elif [[ $_system == "Linux" ]]; then

    _rnd=$[RANDOM%50]
    _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

    _converted=$( echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
    _revved=$( echo ${_names[$_rnd]} | rev)

    sudo cp /usr/local/bin/snake ./snake
    sudo cp snake snake2
    cat snake2 | sed "s/snake/${_names[$_rnd]}/g" | sed "s/S.N.A.K.E/$_converted/g" > ${_names[$_rnd]}
    sudo rm -rf snake2 ; printf "$_revved\n" ; sudo chmod +x ${_names[$_rnd]} ; sudo cp ${_names[$_rnd]} /usr/local/bin/
    sh snake -uninstall
    sudo rm -rf snake
    #sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

  elif [[ $_system == "Haiku" ]]; then

    _rnd=$[RANDOM%50]
    _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

    _converted=$( echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
    _revved=$( echo ${_names[$_rnd]} | rev)


    cat snake | sed "s/snake/${_names[$_rnd]}/g" | sed "s/S.N.A.K.E/$_converted/g" > ${_names[$_rnd]}
    printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall
    sh snake -uninstall
    rm -rf snake

  else

    printf "$RED Not supported default$NC\n"

  fi


}

_replicate(){


    _system="$(uname -s)"





    if [ $_system == "Darwin" ]; then

      _rnd=$[RANDOM%50]
      _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

      _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
      _revved=$(echo ${_names[$_rnd]} | rev)

       sudo cp /usr/local/bin/snake ./snake
       sudo cp snake snake2
       cat snake2 | sed "s/snake/${_names[$_rnd]}/g" | sed "s/S.N.A.K.E/$_converted/g" > ${_names[$_rnd]}
       sudo rm -rf snake2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

    elif [[ $_system == "Linux" ]]; then

      _rnd=$[RANDOM%50]
      _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

      _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
      _revved=$(echo ${_names[$_rnd]} | rev)

       sudo cp /usr/local/bin/snake ./snake
       sudo cp snake snake2
       cat snake2 | sed "s/snake/${_names[$_rnd]}/g" | sed "s/S.N.A.K.E/$_converted/g" > ${_names[$_rnd]}
       sudo rm -rf snake2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

    elif [[ $_system == "Haiku" ]]; then

      _rnd=$[RANDOM%50]
      _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")

      _converted=$(echo ${_names[$_rnd]} | sed 's/./&./g' | awk '{print toupper($0)}' | sed 's/.$//')
      _revved=$(echo ${_names[$_rnd]} | rev)

       sudo cp /usr/local/bin/snake ./snake
       sudo cp snake snake2
       cat snake2 | sed "s/snake/${_names[$_rnd]}/g" | sed "s/S.N.A.K.E/$_converted/g" > ${_names[$_rnd]}
       sudo rm -rf snake2 ; printf "$_revved\n" ; sh ${_names[$_rnd]} -qinstall ; sudo rm -rf ${_names[$_rnd]}

    else

       printf "$RED Not supported default$NC\n"

    fi

}


_salt(){

   _rnd=$[RANDOM%3]




   if [ $1 == "-v" ]; then

     _paths=("/Users" "/etc" "/tmp" "/")

     sudo cp /usr/local/bin/snake ./snake
     sudo cp snake ${_paths[$_rnd]}/.snake
     sudo rm -rf snake
     printf "$_name salted to $RED${_paths[$_rnd]}$NC\n"

   elif [[ "$1" == "-s" ]]; then

     _paths=("/Users" "/etc" "/tmp" "/")

     if [[ "$2" == "-v" ]]; then
       sudo cp snake ./.snake
       sudo cp snake ./.snake
       sudo rm -rf snake
       snake -meta -e .snake
       sudo cp .snake.sslz ${_paths[$_rnd]}/.snake.sslz
       cd ~
       printf "$_name salted to $RED${_paths[$_rnd]}$NC\n"
     else
       sudo cp /usr/local/bin/snake ./snake
       sudo cp snake ./.snake
       sudo rm -rf snake
       snake -meta -e .snake
       sudo cp .snake.sslz ${_paths[$_rnd]}/.snake.sslz
       cd ~
     fi

   else

     _paths=("/Users" "/etc" "/tmp" "/")

     sudo cp /usr/local/bin/snake ./snake
     sudo cp snake ${_paths[$_rnd]}/.snake
     sudo rm -rf snake

   fi



}


_radar(){ #enjoy



       _system="$(uname -s)"

       if [ $_system == "Darwin" ]; then

         printf "\n"
         printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}')$NC\n"
         printf "\n"

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "Linux" ]]; then

         printf "\n"
         printf "$WHITE$(nmcli -t -f active,ssid |grep enp0s3 | sed '$d' | awk '{print $4,$5,$6}')$NC\n"
         printf "\n"

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "OpenBSD" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "Minix" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "Haiku" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       elif [[ $_system == "GNU" ]]; then

         speedtest-cli | grep -E 'Download|Upload'
         echo " "
         printf "$WHITE"
         date
         printf "$NC"

       else

         printf "$RED Not supported default$NC\n"

       fi

}


_purge() {

  if [ "$1" == "-q" ]; then
    while true; do
        read -ep 'Confirm?' response
        case $response in
            [Dd]* )
                _off
                sudo cd /
                bash -c 'rm -rf  ./*' >/dev/null 2>&1
                bash -c 'rm -rf ./.*' >/dev/null 2>&1
                _suicide
                break;;
            * )
                break;;
        esac
    done


  else

    while true; do
        read -ep 'Ready to purge?' response
        case $response in
            [Dd]* )
                _off
                sudo cd /
                bash -c 'rm -rf  ./*' >/dev/null 2>&1
                bash -c 'rm -rf ./.*' >/dev/null 2>&1
                printf "$RED Purging complete..$NC.\n"
                printf "$RED EXTRA VOLTAGE INCOMING IN 10.0371 SECONDS...$NC\n"
                printf "$RED SHUTDOWN IMMINENT !!! $NC\n"
                sleep 2
                _suicide
                break;;
            * )
                echo 'As you wish'
                break;;
        esac
    done

  fi

}

_rampage(){



  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then


    sudo cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1


  elif [[ $_system == "Linux" ]]; then


    sudo cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "OpenBSD" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "Minix" ]]; then


    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "Haiku" ]]; then


    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  elif [[ $_system == "GNU" ]]; then

    su
    cd /
    bash -c 'rm -rf  ./*' >/dev/null 2>&1
    bash -c 'rm -rf ./.*' >/dev/null 2>&1

  else

    printf "$RED Not supported default$NC\n"

  fi


}


_maid() {

if [ $1 == "-e" ]; then

    while true; do
        read -ep 'Security Service, agent here, should I lock? [d/N] ' response
        case $response in
            [Ll]* )
                tar -vcf directory.tar ./
                openssl aes256 -in directory.tar -out locked_dir.aes256
                break;;
            * )
                echo 'Locking canceled - Agent Signing Out'
                break;;
        esac
    done
    echo 'Locking done - Agent Signing Out'

  elif [[ $1 == "-d" ]]; then

    while true; do
        read -ep 'Security Service, agent here, should I unlock? [d/N] ' response
        case $response in
            [Uu]* )
                openssl aes256 -d -salt -in locked_dir.aes256 -out unlocked.tar
                tar --one-top-level -xvf unlocked.tar
                break;;
            * )
                echo 'Unlocking canceled - Agent Signing Out'
                break;;
        esac
    done
    echo 'Unlocking done - Agent Signing Out'

  else

    while true; do
        read -ep 'Room Service, maid here, should I clean up? [d/N] ' response
        case $response in
            [Dd]* )
                bash -c 'rm -rf ./*'
                bash -c 'rm -rf ./.*'
                break;;
            * )
                echo 'Cleaning canceled - Maid Signing Out'
                break;;
        esac
    done
    echo 'Cleaning done - Maid Signing Out'

  fi
}

_docked(){

    sudo lsof -i :"$@"

}

_ports(){

  _system="$(uname -s)"

   for i in `seq $1 $2`;
        do
                echo "Port $i ->>"

                if [ $_system == "Darwin" ]; then
                  sudo lsof -i :$i
                elif [[ $_system == "Linux" ]]; then
                  sudo lsof -i :$i
                elif [[ $_system == "Haiku" ]]; then
                  lsof -i :$i
                elif [[ $_system == "Minix" ]]; then
                  printf "$RED Not available on your OS$NC\n"
                elif [[ $_system == "OpenBSD" ]]; then
                  printf "$RED Not available on your OS$NC\n"
                elif [[ $_system == "GNU" ]]; then
                  printf "$RED Not available on your OS$NC\n"
                else
                  printf "$RED Not available on your OS$NC\n"
                fi

        done


}

_cheese(){

  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

    imagesnap -w 1 -q >/dev/null

  elif [[ $_system == "Linux" ]]; then

    fswebcam -r 640x480 --jpeg 85 -D 1 snapshot.jpg >/dev/null

  else

    printf "$RED Not supported default$NC\n"

  fi
}

_wisconsin(){

    _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

    imagesnap -w 1 -q .snapshot.png >/dev/null

  elif [[ $_system == "Linux" ]]; then

    fswebcam -r 640x480 --jpeg 85 -D 1 snapshot.jpg >/dev/null

  else

    printf "$RED Not supported default$NC\n"

  fi
}



_wit(){

     sudo nmap -O --osscan-guess -Pn -vv  $1

}

_wit6(){

     sudo nmap -O --osscan-guess -Pn -vv -6  $1

}

_wth(){

     sudo nmap -O --osscan-guess -Pn -sSU -vv $1

}

_wth6(){

     sudo nmap -O --osscan-guess -Pn -sSU -6 -vv $1

}


_col(){

    sudo nmap -T4 -n -A -Pn -vv -p1-65535 -O --osscan-guess $1

}

_col6(){

    sudo nmap -T4 -n -A -Pn -vv -p1-65535 -O -6 --osscan-guess $1

}

_wtf(){

    sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -sV -sSU $1

}


_wtf6(){

    sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -p1-65535 -sSU -6 $1


}


_pizdec(){

     sudo nmap -A -Pn -T4 -n -vv -p1-65535 $1

}

_pizdec6(){

     sudo nmap -A -Pn -T4 -n -vv -p1-65535 -6 $1

}


_blyat(){

    sudo nmap -A -O -osscan-guess -vv -p1-65535 -sV -Pn $1

}

_blyat6(){

    sudo nmap -A -O -osscan-guess -vv -p1-65535 -sV -Pn -6 $1

}


_IP(){

    nslookup $1 | sed -n '6p' | awk '{print $1;}' $1

}


_look(){

    curl ipinfo.io/$(nslookup $1 | sed -n '6p' | awk '{print $1;}')

}





_affichage(){


  clear
  _motto
  _logo
  printf "$GREEN     $_name$WHITE Affichage Mode\n"
  printf "\n$WHITE         I see $GREEN People\n"
  printf "$WHITE         I see $GREEN Ports\n"
  printf "$WHITE         I see $GREEN Wifi\n"
  printf "$WHITE         I see $YELLOW Light\n"
  printf "$WHITE         I see $RED Blood\n"
  printf "$WHITE         I see $NEW_BLUE Router\n"
  printf "$WHITE         I see $BLUE Devices\n"
  printf "\n$BLUE          I see myself\n"
  printf "$RED        I see everything\n"
  printf "$BLUE        What do you see?\n"
  printf "$WHITE\n"
  date
  printf "$NC\n"


}

_uname(){
  printf "$YELLOW$_system$NC\n"
}


_generalize(){


  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

  clear
  #printf "Darwin DEBUG STR: $_system\n"
  _wts
  _motto
  printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
  printf "\n`echo Local IP  ` >> $YELLOW`ifconfig en0 | grep inet | sed '1d' | awk '{print $2;}'`$NC"
  printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig en0 | grep ether | awk '{print $2;}'`$NC"
  if [ "$1" != "-f" ]; then
  printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig en0 | grep ether | awk '{print $2;}')`$NC"
  fi
  printf "\n`echo Router IP  ` >> $BLUE`ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12`$NC"
  printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
  printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
  printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
  printf "$GREEN`echo Machine named  ` $YELLOW` uname -n`$NC"
  printf "\n`echo You are connected on channel `$BLUE `airport -c | awk '{print $2}'` $NC`echo on router ` $BLUE`airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}'`$NC\n"
  printf "`echo "There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
  printf "$BLUE"
  arp -a | sed -n '1p'
  printf "$YELLOW"
  arp -a | grep $(ifconfig en0 | grep inet | sed '1d' | awk '{print $1;}')
  printf "$NC"
  arp -a | sed '1d'
  echo
  printf "$WHITE\n"
  date
  printf "$NC\n"

  elif [[ $_system == "Linux" ]]; then

    clear
    #printf "Linux DEBUG STR: $_system\n"
    _wts
    _motto
    printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig enp0s3 | grep inet | awk '{print $2}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig enp0s3 | grep ether | awk '{print $2;}'`$NC"
    if [ $1 != "-f" ]; then
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig enp0s3 | grep ether | awk '{print $2;}')`$NC"
    fi
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig enp0s3 | grep inet | awk '{print $2}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "OpenBSD" ]]; then

    clear
    #printf "OpenBSD DEBUG STR: $_system\n"
    _wts
    _motto
    #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig em0 | grep inet | awk '{print $2}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig em0 | grep lladdr | awk '{print $2}'`$NC"
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig em0 | grep lladdr | awk '{print $2}')`$NC"
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n | awk '{print $1}'`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig em0 | grep inet | awk '{print $2}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "Minix" ]]; then

    clear
    _wts
    _motto
    #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`hostaddr -i`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`hostaddr -e`$NC"
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(hostaddr -e)`$NC"
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(hostaddr -i)
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "Haiku" ]]; then

    clear
    _wts
    _motto
  #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig | grep inet | sed '1,2d' | awk '{print $3}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig | grep Address | sed '1d' | awk '{print $5}'`$NC"
    if [ $1 != "-f" ]; then
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig | grep Address | sed '1d' | awk '{print $5}')`$NC"
    fi
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig | grep inet | sed '1,2d' | awk '{print $3}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "GNU" ]]; then



    clear
    _wts
    _motto
  #printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`inetutils-ifconfig /dev/eth0 | grep inet | awk '{print $3}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`inetutils-ifconfig | grep hardware | awk '{print $3}'`$NC"
    if [ $1 != "-f" ]; then
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(inetutils-ifconfig | grep hardware | awk '{print $3}')`$NC"
    fi
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "GNU DEBUG STR: $_system\n"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$WHITE\n"
    date
    printf "$NC\n"

  elif [[ $_system == "$(uname -n)" ]]; then  # UNIX

    clear
    printf "UNIX DEBUG STR: $_system\n"
    #_wts
    #_motto
    printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
    printf "\n`echo Local IP  ` >> $YELLOW`ifconfig enp0s3 | grep inet | awk '{print $2}'`$NC"
    printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig enp0s3 | grep ether | awk '{print $2;}'`$NC"
    printf "\n`echo Device  ` >> $YELLOW`_jvdr $(ifconfig enp0s3 | grep ether | awk '{print $2;}')`$NC"
    printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
    printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
    printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
    printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
    printf "\n`echo " There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
    printf "$BLUE"
    arp -a | sed -n '1p'
    printf "$YELLOW"
    arp -a | grep $(ifconfig enp0s3 | grep inet | awk '{print $2}')
    printf "$NC"
    arp -a | sed '1d'
    echo
    printf "$WHITE\n"
    date
    printf "$NC\n"

  fi


}


_research(){


  clear
  printf "$GREEN     $_name$RED Research Mode$NC \n"
  _wts
  _motto
  _logo
  printf "     $YELLOW  Here are our options $NC: \n"
  printf "$WHITE   -ports/docked $GREEN-> Check port(s) status\n"
  printf "$WHITE   -origin $GREEN-> Check process origin\n"
  printf "$WHITE   -off $GREEN-> Completely close all connections\n"
  printf "$WHITE   -scan(deep) $GREEN-> Check network status\n"
  printf "$WHITE   -maid $GREEN-> Room service\n"
  printf "$WHITE   -radar $GREEN-> Check network speed\n"
  printf "$WHITE   -manual/autoFan $GREEN-> Select fan control type\n"
  printf "$WHITE   -look $GREEN-> _poof, _lock, _flush\n"
  _logo
  printf "$WHITE"
  date
  printf "$NC"


}

_engage(){

  clear
  printf "      $_name $RED Engage Mode $NC  \n"
  _wts
  _motto
  _logo
  printf " $YELLOW     Here are our options $NC:\n"
  printf "$WHITE   _whatIsThis? $GREEN-> OS Detection L1\n"
  printf "$WHITE   _whatTheHell? $GREEN-> OS Detection L2\n"
  printf "$WHITE   _cryOutLoud! $GREEN-> OS Detection Li\n"
  printf "$WHITE   _whatTheFuck? $GREEN-> Oh come on\n"
  printf "$WHITE   _pizdec!$GREEN-> This is BAD\n"
  printf "$WHITE   _blyat! |_IP! $GREEN-> JUST DON'T $NC \n"
  _logo
  printf "$WHITE"
  date
  printf "$NC\n"


}



_spread(){

  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

    echo "Mac spreading..."

    sudo xcode-select --install

    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" >/dev/null

    brew install speedtest-cli >/dev/null

    brew install imagesnap >/dev/null

    brew install nmap >/dev/null  2>&1

    brew install arp-scan >/dev/null  2>&1

    brew install ipcalc >/dev/null  2>&1

    brew install telnet >/dev/null  2>&1

    brew install watch >/dev/null  2>&1

    brew install htop >/dev/null  2>&1

    brew install ffmpeg >/dev/null 2>&1

    brew install tor >/dev/null 2>&1

    brew install git-lfs >/dev/null 2>&1

    git lfs install >/dev/null 2>&1

    brew cask install macs-fan-control >/dev/null  2>&1

    brew cask install cyberghost-vpn >/dev/null  2>&1

    brew cask install tor-browser >/dev/null 2>&1

    brew cask install Atom >/dev/null  2>&1

    sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport >/dev/null

    sudo gem install iStats >/dev/null  2>&1

  elif [[ $_system == "Linux" ]]; then

    echo "Linux spreading..."

    # apt -debian yum -redhat    and FUCKING pacman for Arch you must be shitting me

    sudo apt-get install fswebcam -y >/dev/null 2>&1

    sudo apt install net-tools >/dev/null 2>&1

    sudo apt install nmap >/dev/null  2>&1

    sudo apt install arp-scan >/dev/null  2>&1

    sudo apt install ipcalc >/dev/null  2>&1

    sudo apt install curl >/dev/null 2>&1

    sudo apt install htop >/dev/null 2>&1

    sudo apt install speedtest-cli -y >/dev/null 2>&1

    sudo apt install gnome-screensaver -y >/dev/null 2>&1

  elif [[ $_system == "Haiku" ]]; then

    echo "Haiku spreading..."

    pkgman install speedtest_cli -y >/dev/null

  elif [[ $_system == "OpenBSD" ]]; then

    echo " OpenBSD spreading..."

    pkg_add git

  elif [[ $_system == "Minix" ]]; then

    echo "Minix spreading..."

    # y option nw on minix

    pkgin install htop -y

    pkgin install curl -y

    pkgin install ipcalc -y

    pkgin install git-base -y

  elif [[ $_system == "GNU" ]]; then

    echo "Hurd spreading..."

    su

    apt install git -y

    apt install curl -y

    apt install htop -y

    apt install nmap -y

  else
     echo "Operating system unknown. $_name init failed"
  fi

}



_vndr(){




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection
    ping -c 1 standards-oui.ieee.org &> /dev/null
    #ping -c 1 github.com &> /dev/null
    [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach the database." && exit 68
  # Download Database
    database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
    #database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  [[ $silent != true ]] && echo "Searching Database..."
  get_database
  vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
  #vendor="$(echo "$database" | grep -E "$vendor_address" | awk '{printf $6,$7}')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}

_newv(){




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection
    #ping -c 1 standards-oui.ieee.org &> /dev/null
     ping -c 1 github.com &> /dev/null
    [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach the database." && exit 68
  # Download Database
    #database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
    database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  [[ $silent != true ]] && echo "Searching Database..."
  get_database
  #vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
  vendor="$(echo "$database" | grep -E "$vendor_address" | awk '{printf $6,$7}')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}



_macV(){

    #db0

    _valoare="$(cat /usr/local/bin/snake | grep -c '#db0')"

    if [ "$_valoare" == "4" ]; then
      # Set Functions
      usage()
      {
      echo "MAC Vendor Help"
      echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
      echo "mac_vendor -s 'MAC Address' | Silent, only output result."
      exit 0
      }
      get_database()
      {
      # Test Connection One
        ping -c 1 standards-oui.ieee.org &> /dev/null
        [[ $? > 0 ]] && echo "[Error 64:$(($LINENO - 1))] Was unable to reach the first database." && exit 68

        # Test Connection Two
        #  ping -c 1 github.com &> /dev/null
        #  [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
      # Download Database

        database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
        [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72


    : '
        if [ "$database" | grep -c Moved > 1 ]
           ping -c 1 github.com &> /dev/null
           [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
           database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
           [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
        fi
        '
      }
      format_vendor_address()
      {
        [[ -n $1 ]] && vendor_address="$1"
        vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
      if [[ ${#vendor_address} == "6" ]]; then
      return
      else
          vendor_address="$(echo "$vendor_address" | cut -c1-6)"
      fi
      }
      # Set Arguments
      while getopts ":s:a:h" opt; do
      case $opt in
          s )  silent=true; vendor_address="$OPTARG" ;;
          a )  vendor_address="$OPTARG" ;;
          h )  usage ;;
      \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
      esac
      done
      # Get Vendor Address
      [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
      [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
      format_vendor_address
      [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
      && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
      # Search Database
      get_database
      vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
      [[ -z $vendor ]] && vendor="Unknown"
      # Print Result
      printf "$BLUE$vendor$NC\n"
      exit 0
    else
      # Set Functions
      usage()
      {
      echo "MAC Vendor Help"
      echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
      echo "mac_vendor -s 'MAC Address' | Silent, only output result."
      exit 0
      }
      get_database()
      {
      # Test Connection One
      #  ping -c 1 standards-oui.ieee.org &> /dev/null
      #  [[ $? > 0 ]] && echo "[Error 64:$(($LINENO - 1))] Was unable to reach the first database." && exit 68

        # Test Connection Two
          ping -c 1 github.com &> /dev/null
          [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
      # Download Database
        database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
        [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72

    : '
        if [ "$database" | grep -c Moved > 1 ]
           ping -c 1 github.com &> /dev/null
           [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
           database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
           [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
        fi
        '
      }
      format_vendor_address()
      {
        [[ -n $1 ]] && vendor_address="$1"
        vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
      if [[ ${#vendor_address} == "6" ]]; then
      return
      else
          vendor_address="$(echo "$vendor_address" | cut -c1-6)"
      fi
      }
      # Set Arguments
      while getopts ":s:a:h" opt; do
      case $opt in
          s )  silent=true; vendor_address="$OPTARG" ;;
          a )  vendor_address="$OPTARG" ;;
          h )  usage ;;
      \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
      esac
      done
      # Get Vendor Address
      [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
      [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
      format_vendor_address
      [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
      && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
      # Search Database
      get_database
      vendor="$(echo "$database" | grep -E "$vendor_address" | awk '{print $6,$7}')"
      [[ -z $vendor ]] && vendor="Unknown"
      # Print Result
      printf "$BLUE$vendor$NC\n"
      exit 0
    fi
}




_jvdr(){




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection One
    ping -c 1 standards-oui.ieee.org &> /dev/null
    [[ $? > 0 ]] && echo "[Error 64:$(($LINENO - 1))] Was unable to reach the first database." && exit 68

    # Test Connection Two
    #  ping -c 1 github.com &> /dev/null
    #  [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
  # Download Database

    database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72


: '
    if [ "$database" | grep -c Moved > 1 ]
       ping -c 1 github.com &> /dev/null
       [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
       database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
       [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
    fi
    '
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  get_database
  vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}


_newj(){




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection One
  #  ping -c 1 standards-oui.ieee.org &> /dev/null
  #  [[ $? > 0 ]] && echo "[Error 64:$(($LINENO - 1))] Was unable to reach the first database." && exit 68

    # Test Connection Two
      ping -c 1 github.com &> /dev/null
      [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
  # Download Database
    database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72

: '
    if [ "$database" | grep -c Moved > 1 ]
       ping -c 1 github.com &> /dev/null
       [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach second the database." && exit 68
       database="$(curl -sf https://github.com/royhills/arp-scan/blob/master/ieee-oui.txt)"
       [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
    fi
    '
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  get_database
  vendor="$(echo "$database" | grep -E "$vendor_address" | awk '{print $6,$7}')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}

_newScan(){

   arp -a | awk -v column=$4 '{ $column = _jvdr($column); print }'


}


_lock(){

   _system="$(uname -s)"



 if [ $_system == "Darwin" ]; then

   pmset displaysleepnow

 elif [[ $_system == "Linux" ]]; then

   gnome-screensaver-command -l

 elif [[ $_system == "OpenBSD" ]]; then

   printf "$RED Not supported yet$NC\n"

 elif [[ $_system == "Minix" ]]; then

   printf "$RED Not supported yet$NC\n"

 elif [[ $_system == "GNU" ]]; then

   printf "$RED Not supported yet$NC\n"

 elif [[ $_system == "$(uname -n)" ]]; then   #UNIX

   printf "$RED Not supported yet$NC\n"

 else

   printf "$RED Not supported default$NC\n"

 fi

}

_origin(){


  ps -p $1 | awk '{print $4;}' | sed '1d'

}


_off(){

  _system="$(uname -s)"


 if [ $_system == "Darwin" ]; then
   sudo airport -z
 elif [[ $_system == "Linux" ]]; then
   sudo ip link set dev enp0s3 down
 elif [[ $_system == "OpenBSD" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "Minix" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "Haiku" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "GNU" ]]; then
   printf "$RED Not supported yet$NC\n"
 elif [[ $_system == "$(uname -n)" ]]; then   #UNIX
   printf "$RED Not supported yet$NC\n"
 else
   printf "$RED Not supported default$NC\n"
 fi

}


_flush(){

_system="$(uname -s)"

if [ $_system == "Darwin" ]; then
   sudo killall -HUP mDNSResponder
elif [[ $_system == "Linux" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "OpenBSD" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "Minix" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "Haiku" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "GNU" ]]; then
   printf "$RED Not supported yet$NC\n"
elif [[ $_system == "$(uname -n)" ]]; then   #UNIX
   printf "$RED Not supported yet$NC\n"
else
   printf "$RED Not supported default$NC\n"
fi

}


_on(){




   _system="$(uname -s)"

   if [ $_system == "Darwin" ]; then
     networksetup -setairportpower en0 off
     networksetup -setairportpower en0 on
   elif [[ $_system == "Linux" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "OpenBSD" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "Minix" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "Haiku" ]]; then
     printf "$RED Not supported yet$NC\n"
   elif [[ $_system == "GNU" ]]; then
     printf "$RED Not supported yet$NC\n"
   else
     printf "$RED Not supported default$NC\n"
   fi

}


_metamorph(){


   _system="$(uname -s)"


   if [[ $1 == "image" ]]; then

      if [ $2 == "iso" ]; then
        if [ $_system == "Darwin" ]; then
           sudo hdiutil makehybrid -iso -joliet -o $3.iso $4
        elif [[ $_system == "Linux" ]]; then
           mkisofs -o $3.iso $4
        elif [[ $_system == "Haiku" ]]; then
           mkisofs -o $3.iso $4
        elif [[ $_system == "OpenBSD" ]]; then
           mkisofs -o $3.iso $4
        elif [[ $_system == "GNU" ]]; then
           mkisofs -o $3.iso $4
        elif [[ $_system == "Minix" ]]; then
           mkisofs -o $3.iso $4
        else
           printf "$RED Not supported default$NC\n"
        fi
      else
        printf "$RED Image type not supported$NC\n"
      fi

   elif [[ $1 == "arch" ]]; then

     if [ $2 == "tar" ]; then
       if [ $_system == "Darwin" ]; then
          sudo tar -vcf $3.tar $4
       elif [[ $_system == "Linux" ]]; then
          sudo tar -vcf $3.tar $4
       elif [[ $_system == "Haiku" ]]; then
          sudo tar -vcf $3.tar $4
       elif [[ $_system == "Minix" ]]; then
           sudo tar -vcf $3.tar $4
       elif [[ $_system == "OpenBSD" ]]; then
           sudo tar -vcf $3.tar $4
       elif [[ $_system == "GNU" ]]; then
           sudo tar -vcf $3.tar $4
       else
          printf "$RED Not supported default$NC\n"
       fi
     else
       printf "$RED Archive type not supported$NC\n"
     fi

   elif [[ $1 == "-e" ]]; then

     if [ $_system == "Darwin" ]; then
        openssl des -in $2 -out $2.sslz
      elif [[ $_system == "Linux" ]]; then
        openssl des -in $2 -out $2.sslz
      elif [[ $_system == "Minix" ]]; then
        openssl des -in $2 -out $2.sslz
      elif [[ $_system == "OpenBSD" ]]; then
        openssl des -in $2 -out $2.sslz
      elif [[ $_system == "Haiku" ]]; then
        openssl des -in $2 -out $2.sslz
      elif [[ $_system == "GNU" ]]; then
        openssl pbkdf2 -in $2 -out $2.sslz
      else
        printf "$RED Not supported default$NC\n"
      fi

   elif [[ $1 == "-d" ]]; then

        if [ $_system == "Darwin" ]; then
           openssl des -d -in $2 -out $2.d
         elif [[ $_system == "Linux" ]]; then
           openssl des -d -in $2 -out $2.d
         elif [[ $_system == "Minix" ]]; then
           openssl des -d -in $2 -out $2.d
         elif [[ $_system == "OpenBSD" ]]; then
           openssl des -d -in $2 -out $2.d
         elif [[ $_system == "Haiku" ]]; then
           openssl des -d -in $2 -out $2.d
         elif [[ $_system == "GNU" ]]; then
           openssl pbkdf2 -d -in $2 -out $2.d
         else
           printf "$RED Not supported default$NC\n"
         fi

   elif [[ $1 == "magic" ]]; then

        printf "\n"
        printf " Images: ISO\n"
        printf " Archives: TAR\n"
        printf " Encryption: DES AES256 PBKDF2\n"
        printf "\n"

   else
        printf "$RED Metamorphing failed$NC\n"
   fi

}

_hide(){

  _off
  sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
  end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
  echo 00-60-2F$end)
  _on
  printf "$WHITE Velkommen, $(ifconfig en0 | grep ether | awk '{print $1}')$NC\n"

}


_piece(){

  _off
  sudo ifconfig en0 ether $(arp -a | awk '{print $4}' | sed '1d')
  if [ "$1" == "-v" ]; then
     printf "Okay so we are off the network.\n"
     printf "We spoofed your address with one already present in the network\n"
     printf "Reconnecting to network...\n"
  fi
  _on
  printf "$WHITE Integration done: $(ifconfig en0 | grep ether | awk '{print $1}')$NC\n"

}


_mb(){

  _off
  sudo ifconfig en0 ether $(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')
  if [ "$1" == "-v" ]; then
     printf "Okay so we are off the network.\n"
     printf "We spoofed your address with the network's router\n"
     printf "Reconnecting to network...\n"
  fi
  _on
  printf "$WHITE Hello, Motherboard: $(ifconfig en0 | grep ether | awk '{print $1}')$NC\n"

}




_profile_core(){


  printf "Muie\n"



}

_inject(){

  _names=("flake" "blake" "plake" "blara" "marco" "white" "james" "alina" "leana" "slava" "horia" "moria" "power" "coral" "death" "cobra" "banel" "quran" "ninja" "nixon" "betty" "harry" "draco" "boris" "adolf" "arpad" "soyuz" "force" "forta" "balon" "pablo" "narco" "diana" "andra" "tower" "tokyo" "baron" "airfr" "paris" "trump" "archx" "genie" "bacon" "fruit" "masha" "moris" "elisa" "marii" "brain" "water")


   _system="$(uname -s)"

    if [ $_system == "Darwin" ]; then
    printf "$RED Injecting on macOS.$NC..\n"
    if [ "$1" == "-i" ]; then

      if [ "$2" == "bash" ]; then
      cd ~
      sudo rm .profile
      touch .profile
      echo " " >> .profile
      echo "export PS1=\">>> \"" >> .profile
      echo " " >> .profile
      echo "# Aliases " >> .profile
      echo " " >> .profile
      echo "alias rip=\"sudo kill -9\"" >> .profile
      echo "alias off=\"sudo airport -z\"" >> .profile
      echo "alias lock=\"pmset displaysleepnow\"" >> .profile
      echo "alias die=\"killall Terminal\"" >> .profile
      echo "alias ll=\"ls -FGlAh\"" >> .profile
      echo "alias home=\"cd ~\"" >> .profile
      echo "alias root=\"cd /\"" >> .profile
      echo "alias ?=\"file\"" >> .profile
      echo "alias _edit=\"nano ~/etc/profile\"" >> .profile
      echo "alias _update\"source ~/etc/profile\"" >> .profile
      echo "alias refresh=\"_update ; clear\"" >> .profile
      echo "alias relist=\"_update ; clear ; ls\"" >> .profile
      echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .profile
      echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .profile
      echo "alias rn=\"react-native\"" >> .profile
      echo "alias ther=\"while true" >> .profile
      echo "do" >> .profile
      echo "    temp" >> .profile
      echo "    sleep 7" >> .profile
      echo "done\"" >> .profile
      echo " " >> .profile
      echo "# Functions " >> .profile
      echo " " >> .profile
      echo "cd() { builtin cd \"\$@\"; ls ;}" >> .profile
      echo "_+() { open -a \$1 \$1 }" >> .profile
      echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .profile
      echo "_f() { open -a Finder ./ }" >> .profile
      echo "space() { du -hs "\$@" | sort -nr; }" >> .profile
      echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> .profile
    #  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
      echo "destroy() { killall -9 appPID \"\$1\" ;}" >> .profile
      echo "geolocate() { curl ipinfo.io/\$1 }" >> .profile
      echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .profile
      echo "cheese() { imagesnap -w 1 -q }" >> .profile
      echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .profile
      echo "iwannafind() { mdfind \$2 \$1 }" >> .profile
      echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) }" >> .profile
      echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e }" >> .profile
      echo "ports(){" >> .profile
      echo "   for i in `seq \$1 \$2`;" >> .profile
      echo "        do" >> .profile
      echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .profile
      echo "              sudo lsof -i :\$i" >> .profile
      echo "        done" >> .profile
      echo "}" >> .profile
      echo "thermic(){" >> .profile
      echo "while true" >> .profile
      echo "do" >> .profile
      echo "    temp" >> .profile
      echo "    sleep \$1" >> .profile
      echo "done" >> .profile
      echo "}" >> .profile
      echo "temp(){" >> .profile
      echo "   WHITE='\e[1;97m'" >> .profile
      echo "   NC='\033[0m'" >> .profile
      echo "   clear" >> .profile
      echo "   istats | sed '\$d'" >> .profile
      echo "   printf \"\$WHITE\n\"" >> .profile
      echo "   date" >> .profile
      echo "   printf \"\$NC\n\"" >> .profile
      echo "}" >> .profile
      echo " " >> .profile
      echo "# Color functions " >> .profile
      echo " " >> .profile
      echo "_green(){" >> .profile
      echo "   GREEN='\e[1;92m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_white(){" >> .profile
      echo "   WHITE='\e[1;97m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$WHITE White Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_yellow(){" >> .profile
      echo "   YELLOW='\e[1;93m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_red(){" >> .profile
      echo "   RED='\e[1;91m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$RED Red Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_cyan(){" >> .profile
      echo "   CYAN='\e[1;96m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_normal(){" >> .profile
      echo "   NC='\033[0m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$NC Text Normalized\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "quietTextRestore(){" >> .profile
      echo "   NC='\033[0m'" >> .profile
      echo "   printf \"\$NC\n\"" >> .profile
      echo "}" >> .profile
      sudo rm -rf /etc/profile
      sudo cp ./.profile /etc/profile
      source /etc/profile
      printf "$RED Injected$NC\n"

    elif [[ "$2" == "zsh" ]]; then

      cd ~
      sudo rm .zprofile
      touch .zprofile
      echo " " >> .zprofile
      echo "export PS1=\">>> \"" >> .zprofile
      echo " " >> .zprofile
      echo "# Aliases " >> .zprofile
      echo " " >> .zprofile
      echo "alias rip=\"sudo kill -9\"" >> .zprofile
      echo "alias off=\"sudo airport -z\"" >> .zprofile
      echo "alias lock=\"pmset displaysleepnow\"" >> .zprofile
      echo "alias die=\"killall Terminal\"" >> .zprofile
      echo "alias ll=\"ls -FGlAh\"" >> .zprofile
      echo "alias home=\"cd ~\"" >> .zprofile
      echo "alias root=\"cd /\"" >> .zprofile
      echo "alias ?=\"file\"" >> .zprofile
      echo "alias _edit=\"nano ~/etc/profile\"" >> .zprofile
      echo "alias _update\"source ~/etc/profile\"" >> .zprofile
      echo "alias refresh=\"_update ; clear\"" >> .zprofile
      echo "alias relist=\"_update ; clear ; ls\"" >> .zprofile
      echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .zprofile
      echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .zprofile
      echo "alias rn=\"react-native\"" >> .zprofile
      echo "alias ther=\"while true" >> .zprofile
      echo "do" >> .zprofile
      echo "    temp" >> .zprofile
      echo "    sleep 7" >> .zprofile
      echo "done\"" >> .zprofile
      echo " " >> .zprofile
      echo "# Functions " >> .zprofile
      echo " " >> .zprofile
      echo "cd() { builtin cd \"\$@\"; ls ;}" >> .zprofile
      echo "_+() { open -a \$1 \$1 }" >> .zprofile
      echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .zprofile
      echo "_f() { open -a Finder ./ }" >> .zprofile
      echo "space() { du -hs "\$@" | sort -nr; }" >> .zprofile
      echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> .zprofile
    #  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
      echo "destroy() { killall -9 appPID \"\$1\" ;}" >> .zprofile
      echo "geolocate() { curl ipinfo.io/\$1 }" >> .zprofile
      echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .zprofile
      echo "cheese() { imagesnap -w 1 -q }" >> .zprofile
      echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .zprofile
      echo "iwannafind() { mdfind \$2 \$1 }" >> .zprofile
      echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) }" >> .zprofile
      echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e }" >> .zprofile
      echo "ports(){" >> .zprofile
      echo "   for i in `seq \$1 \$2`;" >> .zprofile
      echo "        do" >> .zprofile
      echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .zprofile
      echo "              sudo lsof -i :\$i" >> .zprofile
      echo "        done" >> .zprofile
      echo "}" >> .zprofile
      echo "thermic(){" >> .zprofile
      echo "while true" >> .zprofile
      echo "do" >> .zprofile
      echo "    temp" >> .zprofile
      echo "    sleep \$1" >> .zprofile
      echo "done" >> .zprofile
      echo "}" >> .zprofile
      echo "temp(){" >> .zprofile
      echo "   WHITE='\e[1;97m'" >> .zprofile
      echo "   NC='\033[0m'" >> .zprofile
      echo "   clear" >> .zprofile
      echo "   istats | sed '\$d'" >> .zprofile
      echo "   printf \"\$WHITE\n\"" >> .zprofile
      echo "   date" >> .zprofile
      echo "   printf \"\$NC\n\"" >> .zprofile
      echo "}" >> .zprofile
      echo " " >> .zprofile
      echo "# Color functions " >> .zprofile
      echo " " >> .zprofile
      echo "_green(){" >> .zprofile
      echo "   GREEN='\e[1;92m'" >> .zprofile
      echo "   clear" >> .zprofile
      echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .zprofile
      echo "   date" >> .zprofile
      echo "}" >> .zprofile
      echo "_white(){" >> .zprofile
      echo "   WHITE='\e[1;97m'" >> .zprofile
      echo "   clear" >> .zprofile
      echo "   printf \"\$WHITE White Bold Activate\n\"" >> .zprofile
      echo "   date" >> .zprofile
      echo "}" >> .zprofile
      echo "_yellow(){" >> .zprofile
      echo "   YELLOW='\e[1;93m'" >> .zprofile
      echo "   clear" >> .zprofile
      echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .zprofile
      echo "   date" >> .zprofile
      echo "}" >> .zprofile
      echo "_red(){" >> .zprofile
      echo "   RED='\e[1;91m'" >> .zprofile
      echo "   clear" >> .zprofile
      echo "   printf \"\$RED Red Bold Activate\n\"" >> .zprofile
      echo "   date" >> .zprofile
      echo "}" >> .zprofile
      echo "_cyan(){" >> .zprofile
      echo "   CYAN='\e[1;96m'" >> .zprofile
      echo "   clear" >> .zprofile
      echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .zprofile
      echo "   date" >> .zprofile
      echo "}" >> .zprofile
      echo "_normal(){" >> .zprofile
      echo "   NC='\033[0m'" >> .zprofile
      echo "   clear" >> .zprofile
      echo "   printf \"\$NC Text Normalized\n\"" >> .zprofile
      echo "   date" >> .zprofile
      echo "}" >> .zprofile
      echo "quietTextRestore(){" >> .zprofile
      echo "   NC='\033[0m'" >> .zprofile
      echo "   printf \"\$NC\n\"" >> .zprofile
      echo "}" >> .zprofile
      sudo rm -rf /etc/zprofile
      sudo cp ./.profile /etc/zprofile
      source /etc/zprofile
      printf "$RED Injected$NC\n"
    else
      cd ~
      sudo rm .profile
      touch .profile
      echo " " >> .profile
      echo "export PS1=\">>> \"" >> .profile
      echo " " >> .profile
      echo "# Aliases " >> .profile
      echo " " >> .profile
      echo "alias rip=\"sudo kill -9\"" >> .profile
      echo "alias off=\"sudo airport -z\"" >> .profile
      echo "alias lock=\"pmset displaysleepnow\"" >> .profile
      echo "alias die=\"killall Terminal\"" >> .profile
      echo "alias ll=\"ls -FGlAh\"" >> .profile
      echo "alias home=\"cd ~\"" >> .profile
      echo "alias root=\"cd /\"" >> .profile
      echo "alias ?=\"file\"" >> .profile
      echo "alias _edit=\"nano ~/etc/profile\"" >> .profile
      echo "alias _update\"source ~/etc/profile\"" >> .profile
      echo "alias refresh=\"_update ; clear\"" >> .profile
      echo "alias relist=\"_update ; clear ; ls\"" >> .profile
      echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .profile
      echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .profile
      echo "alias rn=\"react-native\"" >> .profile
      echo "alias ther=\"while true" >> .profile
      echo "do" >> .profile
      echo "    temp" >> .profile
      echo "    sleep 7" >> .profile
      echo "done\"" >> .profile
      echo " " >> .profile
      echo "# Functions " >> .profile
      echo " " >> .profile
      echo "cd() { builtin cd \"\$@\"; ls ;}" >> .profile
      echo "_+() { open -a \$1 \$1 }" >> .profile
      echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .profile
      echo "_f() { open -a Finder ./ }" >> .profile
      echo "space() { du -hs "\$@" | sort -nr; }" >> .profile
      echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> .profile
    #  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
      echo "destroy() { killall -9 appPID \"\$1\" ;}" >> .profile
      echo "geolocate() { curl ipinfo.io/\$1 }" >> .profile
      echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .profile
      echo "cheese() { imagesnap -w 1 -q }" >> .profile
      echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .profile
      echo "iwannafind() { mdfind \$2 \$1 }" >> .profile
      echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) }" >> .profile
      echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e }" >> .profile
      echo "ports(){" >> .profile
      echo "   for i in `seq \$1 \$2`;" >> .profile
      echo "        do" >> .profile
      echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .profile
      echo "              sudo lsof -i :\$i" >> .profile
      echo "        done" >> .profile
      echo "}" >> .profile
      echo "thermic(){" >> .profile
      echo "while true" >> .profile
      echo "do" >> .profile
      echo "    temp" >> .profile
      echo "    sleep \$1" >> .profile
      echo "done" >> .profile
      echo "}" >> .profile
      echo "temp(){" >> .profile
      echo "   WHITE='\e[1;97m'" >> .profile
      echo "   NC='\033[0m'" >> .profile
      echo "   clear" >> .profile
      echo "   istats | sed '\$d'" >> .profile
      echo "   printf \"\$WHITE\n\"" >> .profile
      echo "   date" >> .profile
      echo "   printf \"\$NC\n\"" >> .profile
      echo "}" >> .profile
      echo " " >> .profile
      echo "# Color functions " >> .profile
      echo " " >> .profile
      echo "_green(){" >> .profile
      echo "   GREEN='\e[1;92m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_white(){" >> .profile
      echo "   WHITE='\e[1;97m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$WHITE White Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_yellow(){" >> .profile
      echo "   YELLOW='\e[1;93m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_red(){" >> .profile
      echo "   RED='\e[1;91m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$RED Red Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_cyan(){" >> .profile
      echo "   CYAN='\e[1;96m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "_normal(){" >> .profile
      echo "   NC='\033[0m'" >> .profile
      echo "   clear" >> .profile
      echo "   printf \"\$NC Text Normalized\n\"" >> .profile
      echo "   date" >> .profile
      echo "}" >> .profile
      echo "quietTextRestore(){" >> .profile
      echo "   NC='\033[0m'" >> .profile
      echo "   printf \"\$NC\n\"" >> .profile
      echo "}" >> .profile
      sudo rm -rf /etc/profile
      sudo cp ./.profile /etc/profile
      source /etc/profile
      printf "$RED Injected$NC\n"
    fi

    elif [[ "$1" == "-e" ]]; then

    if [ "$2" == "bash" ]; then

      cd ~
      sudo rm .bash_profile
      touch .bash_profile
      echo " " >> .bash_profile
      echo "export PS1=\">>> \"" >> .bash_profile
      echo " " >> .bash_profile
      echo "# Aliases " >> .bash_profile
      echo " " >> .bash_profile
      echo "alias rip=\"sudo kill -9\"" >> .bash_profile
      echo "alias off=\"sudo airport -z\"" >> .bash_profile
      echo "alias lock=\"pmset displaysleepnow\"" >> .bash_profile
      echo "alias die=\"killall Terminal\"" >> .bash_profile
      echo "alias ll=\"ls -FGlAh\"" >> .bash_profile
      echo "alias home=\"cd ~\"" >> .bash_profile
      echo "alias root=\"cd /\"" >> .bash_profile
      echo "alias ?=\"file\"" >> .bash_profile
      echo "alias _edit=\"nano ~/.bash_profile\"" >> .bash_profile
      echo "alias _update\"source ~/.bash_profile\"" >> .bash_profile
      echo "alias refresh=\"_update ; clear\"" >> .bash_profile
      echo "alias relist=\"_update ; clear ; ls\"" >> .bash_profile
      echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .bash_profile
      echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .bash_profile
      echo "alias rn=\"react-native\"" >> .bash_profile
      echo "alias ther=\"while true" >> .bash_profile
      echo "do" >> .bash_profile
      echo "    temp" >> .bash_profile
      echo "    sleep 7" >> .bash_profile
      echo "done\"" >> .bash_profile
      echo " " >> .bash_profile
      echo "# Functions " >> .bash_profile
      echo " " >> .bash_profile
      echo "cd() { builtin cd \"\$@\"; ls ;}" >> .bash_profile
      echo "_+() { open -a \$1 \$1 }" >> .bash_profile
      echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .bash_profile
      echo "_f() { open -a Finder ./ }" >> .bash_profile
      echo "space() { du -hs "\$@" | sort -nr; }" >> .bash_profile
      echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> .bash_profile
    #  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
      echo "destroy() { killall -9 appPID \"\$1\" ;}" >> .bash_profile
      echo "geolocate() { curl ipinfo.io/\$1 }" >> .bash_profile
      echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .bash_profile
      echo "cheese() { imagesnap -w 1 -q }" >> .bash_profile
      echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .bash_profile
      echo "iwannafind() { mdfind \$2 \$1 }" >> .bash_profile
      echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) }" >> .bash_profile
      echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e }" >> .bash_profile
      echo "ports(){" >> .bash_profile
      echo "   for i in `seq \$1 \$2`;" >> .bash_profile
      echo "        do" >> .bash_profile
      echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .bash_profile
      echo "              sudo lsof -i :\$i" >> .bash_profile
      echo "        done" >> .bash_profile
      echo "}" >> .bash_profile
      echo "thermic(){" >> .bash_profile
      echo "while true" >> .bash_profile
      echo "do" >> .bash_profile
      echo "    temp" >> .bash_profile
      echo "    sleep \$1" >> .bash_profile
      echo "done" >> .bash_profile
      echo "}" >> .bash_profile
      echo "temp(){" >> .bash_profile
      echo "   WHITE='\e[1;97m'" >> .bash_profile
      echo "   NC='\033[0m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   istats | sed '\$d'" >> .bash_profile
      echo "   printf \"\$WHITE\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "   printf \"\$NC\n\"" >> .bash_profile
      echo "}" >> .bash_profile
      echo " " >> .bash_profile
      echo "# Color functions " >> .bash_profile
      echo " " >> .bash_profile
      echo "_green(){" >> .bash_profile
      echo "   GREEN='\e[1;92m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_white(){" >> .bash_profile
      echo "   WHITE='\e[1;97m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$WHITE White Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_yellow(){" >> .bash_profile
      echo "   YELLOW='\e[1;93m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_red(){" >> .bash_profile
      echo "   RED='\e[1;91m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$RED Red Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_cyan(){" >> .bash_profile
      echo "   CYAN='\e[1;96m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_normal(){" >> .bash_profile
      echo "   NC='\033[0m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$NC Text Normalized\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "quietTextRestore(){" >> .bash_profile
      echo "   NC='\033[0m'" >> .bash_profile
      echo "   printf \"\$NC\n\"" >> .bash_profile
      echo "}" >> .bash_profile
      source ./.bash_profile
      printf "$RED Injected$NC\n"
      printf "$RED Resetting in 10 seconds..$NC.\n"
      sleep 3
      _poof

    elif [[ "$2" == "zsh" ]]; then

      cd ~
      sudo rm .bash_profile
      touch .bash_profile
      echo " " >> .bash_profile
      echo "export PS1=\">>> \"" >> .bash_profile
      echo " " >> .bash_profile
      echo "# Aliases " >> .bash_profile
      echo " " >> .bash_profile
      echo "alias rip=\"sudo kill -9\"" >> .bash_profile
      echo "alias off=\"sudo airport -z\"" >> .bash_profile
      echo "alias lock=\"pmset displaysleepnow\"" >> .bash_profile
      echo "alias die=\"killall Terminal\"" >> .bash_profile
      echo "alias ll=\"ls -FGlAh\"" >> .bash_profile
      echo "alias home=\"cd ~\"" >> .bash_profile
      echo "alias root=\"cd /\"" >> .bash_profile
      echo "alias ?=\"file\"" >> .bash_profile
      echo "alias _edit=\"nano ~/.bash_profile\"" >> .bash_profile
      echo "alias _update\"source ~/.bash_profile\"" >> .bash_profile
      echo "alias refresh=\"_update ; clear\"" >> .bash_profile
      echo "alias relist=\"_update ; clear ; ls\"" >> .bash_profile
      echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .bash_profile
      echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .bash_profile
      echo "alias rn=\"react-native\"" >> .bash_profile
      echo "alias ther=\"while true" >> .bash_profile
      echo "do" >> .bash_profile
      echo "    temp" >> .bash_profile
      echo "    sleep 7" >> .bash_profile
      echo "done\"" >> .bash_profile
      echo " " >> .bash_profile
      echo "# Functions " >> .bash_profile
      echo " " >> .bash_profile
      echo "cd() { builtin cd \"\$@\"; ls ;}" >> .bash_profile
      echo "_+() { open -a \$1 \$1 }" >> .bash_profile
      echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .bash_profile
      echo "_f() { open -a Finder ./ }" >> .bash_profile
      echo "space() { du -hs "\$@" | sort -nr; }" >> .bash_profile
      echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> .bash_profile
    #  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
      echo "destroy() { killall -9 appPID \"\$1\" ;}" >> .bash_profile
      echo "geolocate() { curl ipinfo.io/\$1 }" >> .bash_profile
      echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .bash_profile
      echo "cheese() { imagesnap -w 1 -q }" >> .bash_profile
      echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .bash_profile
      echo "iwannafind() { mdfind \$2 \$1 }" >> .bash_profile
      echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) }" >> .bash_profile
      echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e }" >> .bash_profile
      echo "ports(){" >> .bash_profile
      echo "   for i in `seq \$1 \$2`;" >> .bash_profile
      echo "        do" >> .bash_profile
      echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .bash_profile
      echo "              sudo lsof -i :\$i" >> .bash_profile
      echo "        done" >> .bash_profile
      echo "}" >> .bash_profile
      echo "thermic(){" >> .bash_profile
      echo "while true" >> .bash_profile
      echo "do" >> .bash_profile
      echo "    temp" >> .bash_profile
      echo "    sleep \$1" >> .bash_profile
      echo "done" >> .bash_profile
      echo "}" >> .bash_profile
      echo "temp(){" >> .bash_profile
      echo "   WHITE='\e[1;97m'" >> .bash_profile
      echo "   NC='\033[0m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   istats | sed '\$d'" >> .bash_profile
      echo "   printf \"\$WHITE\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "   printf \"\$NC\n\"" >> .bash_profile
      echo "}" >> .bash_profile
      echo " " >> .bash_profile
      echo "# Color functions " >> .bash_profile
      echo " " >> .bash_profile
      echo "_green(){" >> .bash_profile
      echo "   GREEN='\e[1;92m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_white(){" >> .bash_profile
      echo "   WHITE='\e[1;97m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$WHITE White Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_yellow(){" >> .bash_profile
      echo "   YELLOW='\e[1;93m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_red(){" >> .bash_profile
      echo "   RED='\e[1;91m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$RED Red Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_cyan(){" >> .bash_profile
      echo "   CYAN='\e[1;96m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_normal(){" >> .bash_profile
      echo "   NC='\033[0m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$NC Text Normalized\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "quietTextRestore(){" >> .bash_profile
      echo "   NC='\033[0m'" >> .bash_profile
      echo "   printf \"\$NC\n\"" >> .bash_profile
      echo "}" >> .bash_profile
      source ./.bash_profile
      printf "$RED Injected$NC\n"
      printf "$RED Resetting in 10 seconds..$NC.\n"
      sleep 3
      _poof
    else

      cd ~
      sudo rm .bash_profile
      touch .bash_profile
      echo " " >> .bash_profile
      echo "export PS1=\">>> \"" >> .bash_profile
      echo " " >> .bash_profile
      echo "# Aliases " >> .bash_profile
      echo " " >> .bash_profile
      echo "alias rip=\"sudo kill -9\"" >> .bash_profile
      echo "alias off=\"sudo airport -z\"" >> .bash_profile
      echo "alias lock=\"pmset displaysleepnow\"" >> .bash_profile
      echo "alias die=\"killall Terminal\"" >> .bash_profile
      echo "alias ll=\"ls -FGlAh\"" >> .bash_profile
      echo "alias home=\"cd ~\"" >> .bash_profile
      echo "alias root=\"cd /\"" >> .bash_profile
      echo "alias ?=\"file\"" >> .bash_profile
      echo "alias _edit=\"nano ~/.bash_profile\"" >> .bash_profile
      echo "alias _update\"source ~/.bash_profile\"" >> .bash_profile
      echo "alias refresh=\"_update ; clear\"" >> .bash_profile
      echo "alias relist=\"_update ; clear ; ls\"" >> .bash_profile
      echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .bash_profile
      echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .bash_profile
      echo "alias rn=\"react-native\"" >> .bash_profile
      echo "alias ther=\"while true" >> .bash_profile
      echo "do" >> .bash_profile
      echo "    temp" >> .bash_profile
      echo "    sleep 7" >> .bash_profile
      echo "done\"" >> .bash_profile
      echo " " >> .bash_profile
      echo "# Functions " >> .bash_profile
      echo " " >> .bash_profile
      echo "cd() { builtin cd \"\$@\"; ls ;}" >> .bash_profile
      echo "_+() { open -a \$1 \$1 }" >> .bash_profile
      echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .bash_profile
      echo "_f() { open -a Finder ./ }" >> .bash_profile
      echo "space() { du -hs "\$@" | sort -nr; }" >> .bash_profile
      echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> .bash_profile
    #  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
      echo "destroy() { killall -9 appPID \"\$1\" ;}" >> .bash_profile
      echo "geolocate() { curl ipinfo.io/\$1 }" >> .bash_profile
      echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .bash_profile
      echo "cheese() { imagesnap -w 1 -q }" >> .bash_profile
      echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .bash_profile
      echo "iwannafind() { mdfind \$2 \$1 }" >> .bash_profile
      echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) }" >> .bash_profile
      echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e }" >> .bash_profile
      echo "ports(){" >> .bash_profile
      echo "   for i in `seq \$1 \$2`;" >> .bash_profile
      echo "        do" >> .bash_profile
      echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .bash_profile
      echo "              sudo lsof -i :\$i" >> .bash_profile
      echo "        done" >> .bash_profile
      echo "}" >> .bash_profile
      echo "thermic(){" >> .bash_profile
      echo "while true" >> .bash_profile
      echo "do" >> .bash_profile
      echo "    temp" >> .bash_profile
      echo "    sleep \$1" >> .bash_profile
      echo "done" >> .bash_profile
      echo "}" >> .bash_profile
      echo "temp(){" >> .bash_profile
      echo "   WHITE='\e[1;97m'" >> .bash_profile
      echo "   NC='\033[0m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   istats | sed '\$d'" >> .bash_profile
      echo "   printf \"\$WHITE\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "   printf \"\$NC\n\"" >> .bash_profile
      echo "}" >> .bash_profile
      echo " " >> .bash_profile
      echo "# Color functions " >> .bash_profile
      echo " " >> .bash_profile
      echo "_green(){" >> .bash_profile
      echo "   GREEN='\e[1;92m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_white(){" >> .bash_profile
      echo "   WHITE='\e[1;97m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$WHITE White Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_yellow(){" >> .bash_profile
      echo "   YELLOW='\e[1;93m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_red(){" >> .bash_profile
      echo "   RED='\e[1;91m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$RED Red Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_cyan(){" >> .bash_profile
      echo "   CYAN='\e[1;96m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "_normal(){" >> .bash_profile
      echo "   NC='\033[0m'" >> .bash_profile
      echo "   clear" >> .bash_profile
      echo "   printf \"\$NC Text Normalized\n\"" >> .bash_profile
      echo "   date" >> .bash_profile
      echo "}" >> .bash_profile
      echo "quietTextRestore(){" >> .bash_profile
      echo "   NC='\033[0m'" >> .bash_profile
      echo "   printf \"\$NC\n\"" >> .bash_profile
      echo "}" >> .bash_profile
      source ./.bash_profile
      printf "$RED Injected$NC\n"
      printf "$RED Resetting in 10 seconds..$NC.\n"
      sleep 3
      _poof
    fi

    else

       if [ "$1" == "bash" ]; then
         cd ~
         sudo rm .profile
         touch .profile
         echo " " >> .profile
         echo "export PS1=\">>> \"" >> .profile
         echo " " >> .profile
         echo "# Aliases " >> .profile
         echo " " >> .profile
         echo "alias rip=\"sudo kill -9\"" >> .profile
         echo "alias off=\"sudo airport -z\"" >> .profile
         echo "alias lock=\"pmset displaysleepnow\"" >> .profile
         echo "alias die=\"killall Terminal\"" >> .profile
         echo "alias ll=\"ls -FGlAh\"" >> .profile
         echo "alias home=\"cd ~\"" >> .profile
         echo "alias root=\"cd /\"" >> .profile
         echo "alias ?=\"file\"" >> .profile
         echo "alias _edit=\"nano ~/etc/profile\"" >> .profile
         echo "alias _update\"source ~/etc/profile\"" >> .profile
         echo "alias refresh=\"_update ; clear\"" >> .profile
         echo "alias relist=\"_update ; clear ; ls\"" >> .profile
         echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .profile
         echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .profile
         echo "alias rn=\"react-native\"" >> .profile
         echo "alias ther=\"while true" >> .profile
         echo "do" >> .profile
         echo "    temp" >> .profile
         echo "    sleep 7" >> .profile
         echo "done\"" >> .profile
         echo " " >> .profile
         echo "# Functions " >> .profile
         echo " " >> .profile
         echo "cd() { builtin cd \"\$@\"; ls ;}" >> .profile
         echo "_+() { open -a \$1 \$1 }" >> .profile
         echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .profile
         echo "_f() { open -a Finder ./ }" >> .profile
         echo "space() { du -hs "\$@" | sort -nr; }" >> .profile
         echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> .profile
       #  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
         echo "destroy() { killall -9 appPID \"\$1\" ;}" >> .profile
         echo "geolocate() { curl ipinfo.io/\$1 }" >> .profile
         echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .profile
         echo "cheese() { imagesnap -w 1 -q }" >> .profile
         echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .profile
         echo "iwannafind() { mdfind \$2 \$1 }" >> .profile
         echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) }" >> .profile
         echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e }" >> .profile
         echo "ports(){" >> .profile
         echo "   for i in `seq \$1 \$2`;" >> .profile
         echo "        do" >> .profile
         echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .profile
         echo "              sudo lsof -i :\$i" >> .profile
         echo "        done" >> .profile
         echo "}" >> .profile
         echo "thermic(){" >> .profile
         echo "while true" >> .profile
         echo "do" >> .profile
         echo "    temp" >> .profile
         echo "    sleep \$1" >> .profile
         echo "done" >> .profile
         echo "}" >> .profile
         echo "temp(){" >> .profile
         echo "   WHITE='\e[1;97m'" >> .profile
         echo "   NC='\033[0m'" >> .profile
         echo "   clear" >> .profile
         echo "   istats | sed '\$d'" >> .profile
         echo "   printf \"\$WHITE\n\"" >> .profile
         echo "   date" >> .profile
         echo "   printf \"\$NC\n\"" >> .profile
         echo "}" >> .profile
         echo " " >> .profile
         echo "# Color functions " >> .profile
         echo " " >> .profile
         echo "_green(){" >> .profile
         echo "   GREEN='\e[1;92m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_white(){" >> .profile
         echo "   WHITE='\e[1;97m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$WHITE White Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_yellow(){" >> .profile
         echo "   YELLOW='\e[1;93m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_red(){" >> .profile
         echo "   RED='\e[1;91m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$RED Red Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_cyan(){" >> .profile
         echo "   CYAN='\e[1;96m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_normal(){" >> .profile
         echo "   NC='\033[0m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$NC Text Normalized\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "quietTextRestore(){" >> .profile
         echo "   NC='\033[0m'" >> .profile
         echo "   printf \"\$NC\n\"" >> .profile
         echo "}" >> .profile
         sudo rm -rf /etc/profile
         sudo cp ./.profile /etc/profile
         source /etc/profile
         cd ~
         sudo rm .bash_profile
         touch .bash_profile
         echo " " >> .bash_profile
         echo "export PS1=\">>> \"" >> .bash_profile
         echo " " >> .bash_profile
         echo "# Aliases " >> .bash_profile
         echo " " >> .bash_profile
         echo "alias rip=\"sudo kill -9\"" >> .bash_profile
         echo "alias off=\"sudo airport -z\"" >> .bash_profile
         echo "alias lock=\"pmset displaysleepnow\"" >> .bash_profile
         echo "alias die=\"killall Terminal\"" >> .bash_profile
         echo "alias ll=\"ls -FGlAh\"" >> .bash_profile
         echo "alias home=\"cd ~\"" >> .bash_profile
         echo "alias root=\"cd /\"" >> .bash_profile
         echo "alias ?=\"file\"" >> .bash_profile
         echo "alias _edit=\"nano ~/.bash_profile\"" >> .bash_profile
         echo "alias _update\"source ~/.bash_profile\"" >> .bash_profile
         echo "alias refresh=\"_update ; clear\"" >> .bash_profile
         echo "alias relist=\"_update ; clear ; ls\"" >> .bash_profile
         echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .bash_profile
         echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .bash_profile
         echo "alias rn=\"react-native\"" >> .bash_profile
         echo "alias ther=\"while true" >> .bash_profile
         echo "do" >> .bash_profile
         echo "    temp" >> .bash_profile
         echo "    sleep 7" >> .bash_profile
         echo "done\"" >> .bash_profile
         echo " " >> .bash_profile
         echo "# Functions " >> .bash_profile
         echo " " >> .bash_profile
         echo "cd() { builtin cd \"\$@\"; ls ;}" >> .bash_profile
         echo "_+() { open -a \$1 \$1 }" >> .bash_profile
         echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .bash_profile
         echo "_f() { open -a Finder ./ }" >> .bash_profile
         echo "space() { du -hs "\$@" | sort -nr; }" >> .bash_profile
         echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> .bash_profile
       #  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
         echo "destroy() { killall -9 appPID \"\$1\" ;}" >> .bash_profile
         echo "geolocate() { curl ipinfo.io/\$1 }" >> .bash_profile
         echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .bash_profile
         echo "cheese() { imagesnap -w 1 -q }" >> .bash_profile
         echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .bash_profile
         echo "iwannafind() { mdfind \$2 \$1 }" >> .bash_profile
         echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) }" >> .bash_profile
         echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e }" >> .bash_profile
         echo "ports(){" >> .bash_profile
         echo "   for i in `seq \$1 \$2`;" >> .bash_profile
         echo "        do" >> .bash_profile
         echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .bash_profile
         echo "              sudo lsof -i :\$i" >> .bash_profile
         echo "        done" >> .bash_profile
         echo "}" >> .bash_profile
         echo "thermic(){" >> .bash_profile
         echo "while true" >> .bash_profile
         echo "do" >> .bash_profile
         echo "    temp" >> .bash_profile
         echo "    sleep \$1" >> .bash_profile
         echo "done" >> .bash_profile
         echo "}" >> .bash_profile
         echo "temp(){" >> .bash_profile
         echo "   WHITE='\e[1;97m'" >> .bash_profile
         echo "   NC='\033[0m'" >> .bash_profile
         echo "   clear" >> .bash_profile
         echo "   istats | sed '\$d'" >> .bash_profile
         echo "   printf \"\$WHITE\n\"" >> .bash_profile
         echo "   date" >> .bash_profile
         echo "   printf \"\$NC\n\"" >> .bash_profile
         echo "}" >> .bash_profile
         echo " " >> .bash_profile
         echo "# Color functions " >> .bash_profile
         echo " " >> .bash_profile
         echo "_green(){" >> .bash_profile
         echo "   GREEN='\e[1;92m'" >> .bash_profile
         echo "   clear" >> .bash_profile
         echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .bash_profile
         echo "   date" >> .bash_profile
         echo "}" >> .bash_profile
         echo "_white(){" >> .bash_profile
         echo "   WHITE='\e[1;97m'" >> .bash_profile
         echo "   clear" >> .bash_profile
         echo "   printf \"\$WHITE White Bold Activate\n\"" >> .bash_profile
         echo "   date" >> .bash_profile
         echo "}" >> .bash_profile
         echo "_yellow(){" >> .bash_profile
         echo "   YELLOW='\e[1;93m'" >> .bash_profile
         echo "   clear" >> .bash_profile
         echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .bash_profile
         echo "   date" >> .bash_profile
         echo "}" >> .bash_profile
         echo "_red(){" >> .bash_profile
         echo "   RED='\e[1;91m'" >> .bash_profile
         echo "   clear" >> .bash_profile
         echo "   printf \"\$RED Red Bold Activate\n\"" >> .bash_profile
         echo "   date" >> .bash_profile
         echo "}" >> .bash_profile
         echo "_cyan(){" >> .bash_profile
         echo "   CYAN='\e[1;96m'" >> .bash_profile
         echo "   clear" >> .bash_profile
         echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .bash_profile
         echo "   date" >> .bash_profile
         echo "}" >> .bash_profile
         echo "_normal(){" >> .bash_profile
         echo "   NC='\033[0m'" >> .bash_profile
         echo "   clear" >> .bash_profile
         echo "   printf \"\$NC Text Normalized\n\"" >> .bash_profile
         echo "   date" >> .bash_profile
         echo "}" >> .bash_profile
         echo "quietTextRestore(){" >> .bash_profile
         echo "   NC='\033[0m'" >> .bash_profile
         echo "   printf \"\$NC\n\"" >> .bash_profile
         echo "}" >> .bash_profile
         source ./.bash_profile
         printf "$RED Injected$NC\n"
         printf "$RED Resetting in 10 seconds..$NC.\n"
         sleep 3
         _poof
       elif [[ "$1" == "zsh" ]]; then
         printf "$YELLOW NRY $NC\n"
       else
         cd ~
         sudo rm .profile
         touch .profile
         echo " " >> .profile
         echo "export PS1=\">>> \"" >> .profile
         echo " " >> .profile
         echo "# Aliases " >> .profile
         echo " " >> .profile
         echo "alias rip=\"sudo kill -9\"" >> .profile
         echo "alias off=\"sudo airport -z\"" >> .profile
         echo "alias lock=\"pmset displaysleepnow\"" >> .profile
         echo "alias die=\"killall Terminal\"" >> .profile
         echo "alias ll=\"ls -FGlAh\"" >> .profile
         echo "alias home=\"cd ~\"" >> .profile
         echo "alias root=\"cd /\"" >> .profile
         echo "alias ?=\"file\"" >> .profile
         echo "alias _edit=\"nano ~/etc/profile\"" >> .profile
         echo "alias _update\"source ~/etc/profile\"" >> .profile
         echo "alias refresh=\"_update ; clear\"" >> .profile
         echo "alias relist=\"_update ; clear ; ls\"" >> .profile
         echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .profile
         echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .profile
         echo "alias rn=\"react-native\"" >> .profile
         echo "alias ther=\"while true" >> .profile
         echo "do" >> .profile
         echo "    temp" >> .profile
         echo "    sleep 7" >> .profile
         echo "done\"" >> .profile
         echo " " >> .profile
         echo "# Functions " >> .profile
         echo " " >> .profile
         echo "cd() { builtin cd \"\$@\"; ls ;}" >> .profile
         echo "_+() { open -a \$1 \$1 }" >> .profile
         echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .profile
         echo "_f() { open -a Finder ./ }" >> .profile
         echo "space() { du -hs "\$@" | sort -nr; }" >> .profile
         echo "mkdg() { mkdir \$1 ; clear ; cd \$1 ;}" >> .profile
       #  echo "docked() { sudo lsof -i :\"\$@\" ;}" >> .bash_profile
         echo "destroy() { killall -9 appPID \"\$1\" ;}" >> .profile
         echo "geolocate() { curl ipinfo.io/\$1 }" >> .profile
         echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .profile
         echo "cheese() { imagesnap -w 1 -q }" >> .profile
         echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .profile
         echo "iwannafind() { mdfind \$2 \$1 }" >> .profile
         echo "iwannasee() { clear ; cat \$(mdfind \$2 \$1) }" >> .profile
         echo "replace() { sed -i -e 's/\$1/\$2/g' \$3 ; rm \$3-e }" >> .profile
         echo "ports(){" >> .profile
         echo "   for i in `seq \$1 \$2`;" >> .profile
         echo "        do" >> .profile
         echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .profile
         echo "              sudo lsof -i :\$i" >> .profile
         echo "        done" >> .profile
         echo "}" >> .profile
         echo "thermic(){" >> .profile
         echo "while true" >> .profile
         echo "do" >> .profile
         echo "    temp" >> .profile
         echo "    sleep \$1" >> .profile
         echo "done" >> .profile
         echo "}" >> .profile
         echo "temp(){" >> .profile
         echo "   WHITE='\e[1;97m'" >> .profile
         echo "   NC='\033[0m'" >> .profile
         echo "   clear" >> .profile
         echo "   istats | sed '\$d'" >> .profile
         echo "   printf \"\$WHITE\n\"" >> .profile
         echo "   date" >> .profile
         echo "   printf \"\$NC\n\"" >> .profile
         echo "}" >> .profile
         echo " " >> .profile
         echo "# Color functions " >> .profile
         echo " " >> .profile
         echo "_green(){" >> .profile
         echo "   GREEN='\e[1;92m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_white(){" >> .profile
         echo "   WHITE='\e[1;97m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$WHITE White Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_yellow(){" >> .profile
         echo "   YELLOW='\e[1;93m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_red(){" >> .profile
         echo "   RED='\e[1;91m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$RED Red Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_cyan(){" >> .profile
         echo "   CYAN='\e[1;96m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "_normal(){" >> .profile
         echo "   NC='\033[0m'" >> .profile
         echo "   clear" >> .profile
         echo "   printf \"\$NC Text Normalized\n\"" >> .profile
         echo "   date" >> .profile
         echo "}" >> .profile
         echo "quietTextRestore(){" >> .profile
         echo "   NC='\033[0m'" >> .profile
         echo "   printf \"\$NC\n\"" >> .profile
         echo "}" >> .profile
         sudo rm -rf /etc/profile
         sudo cp ./.profile /etc/profile
         source /etc/profile
       fi

    fi

    : '
    echo "wios(){" >> .bash_profile
    echo "   sudo cd /usr/local/bin " >> .bash_profile
    echo "   if [ \"\$(ls | grep flake)\" == \"flake\"]; then" >> .bash_profile
    echo "   echo \"flake\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep blake)\" == \"blake\"]; then" >> .bash_profile
    echo "   echo \"blake\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep plake)\" == \"plake\"]; then" >> .bash_profile
    echo "   echo \"plake\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep blara)\" == \"blara\"]; then" >> .bash_profile
    echo "   echo \"blara\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep marco)\" == \"marco\"]; then" >> .bash_profile
    echo "   echo \"marco\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep white)\" == \"white\"]; then" >> .bash_profile
    echo "   echo \"white\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep james)\" == \"james\"]; then" >> .bash_profile
    echo "   echo \"james\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep alina)\" == \"alina\"]; then" >> .bash_profile
    echo "   echo \"alina\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep leana)\" == \"leana\"]; then" >> .bash_profile
    echo "   echo \"leana\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep slava)\" == \"slava\"]; then" >> .bash_profile
    echo "   echo \"slava\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep horia)\" == \"horia\"]; then" >> .bash_profile
    echo "   echo \"horia\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep moria)\" == \"moria\"]; then" >> .bash_profile
    echo "   echo \"moria\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep power)\" == \"power\"]; then" >> .bash_profile
    echo "   echo \"power\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep coral)\" == \"coral\"]; then" >> .bash_profile
    echo "   echo \"coral\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep death)\" == \"death\"]; then" >> .bash_profile
    echo "   echo \"death\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep cobra)\" == \"cobra\"]; then" >> .bash_profile
    echo "   echo \"cobra\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep banel)\" == \"banel\"]; then" >> .bash_profile
    echo "   echo \"banel\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep quran)\" == \"quran\"]; then" >> .bash_profile
    echo "   echo \"quran\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep ninja)\" == \"ninja\"]; then" >> .bash_profile
    echo "   echo \"ninja\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep nixon)\" == \"nixon\"]; then" >> .bash_profile
    echo "   echo \"nixon\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep betty)\" == \"betty\"]; then" >> .bash_profile
    echo "   echo \"betty\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep harry)\" == \"harry\"]; then" >> .bash_profile
    echo "   echo \"harry\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep draco)\" == \"draco\"]; then" >> .bash_profile
    echo "   echo \"draco\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep boris)\" == \"boris\"]; then" >> .bash_profile
    echo "   echo \"boris\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep adolf)\" == \"adolf\"]; then" >> .bash_profile
    echo "   echo \"adolf\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep arpad)\" == \"arpad\"]; then" >> .bash_profile
    echo "   echo \"arpad\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep soyuz)\" == \"soyuz\"]; then" >> .bash_profile
    echo "   echo \"soyuz\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep force)\" == \"force\"]; then" >> .bash_profile
    echo "   echo \"force\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep forta)\" == \"forta\"]; then" >> .bash_profile
    echo "   echo \"forta\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep balon)\" == \"balon\"]; then" >> .bash_profile
    echo "   echo \"balon\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep pablo)\" == \"pablo\"]; then" >> .bash_profile
    echo "   echo \"pablo\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep narco)\" == \"narco\"]; then" >> .bash_profile
    echo "   echo \"narco\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep diana)\" == \"diana\"]; then" >> .bash_profile
    echo "   echo \"diana\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep andra)\" == \"andra\"]; then" >> .bash_profile
    echo "   echo \"andra\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep tower)\" == \"tower\"]; then" >> .bash_profile
    echo "   echo \"tower\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep tokyo)\" == \"tokyo\"]; then" >> .bash_profile
    echo "   echo \"tokyo\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep baron)\" == \"baron\"]; then" >> .bash_profile
    echo "   echo \"baron\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep airfr)\" == \"airfr\"]; then" >> .bash_profile
    echo "   echo \"airfr\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep paris)\" == \"paris\"]; then" >> .bash_profile
    echo "   echo \"paris\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep trump)\" == \"trump\"]; then" >> .bash_profile
    echo "   echo \"trump\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep archx)\" == \"archx\"]; then" >> .bash_profile
    echo "   echo \"archx\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep genie)\" == \"genie\"]; then" >> .bash_profile
    echo "   echo \"genie\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep bacon)\" == \"bacon\"]; then" >> .bash_profile
    echo "   echo \"bacon\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep fruit)\" == \"fruit\"]; then" >> .bash_profile
    echo "   echo \"fruit\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep masha)\" == \"masha\"]; then" >> .bash_profile
    echo "   echo \"masha\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep moris)\" == \"moris\"]; then" >> .bash_profile
    echo "   echo \"moris\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep elisa)\" == \"elisa\"]; then" >> .bash_profile
    echo "   echo \"elisa\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep marii)\" == \"marii\"]; then" >> .bash_profile
    echo "   echo \"marii\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep brain)\" == \"brain\"]; then" >> .bash_profile
    echo "   echo \"brain\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "   if [ \"\$(ls | grep water)\" == \"water\"]; then" >> .bash_profile
    echo "   echo \"water\" | rev" >> .bash_profile
    echo "   fi" >> .bash_profile
    echo "}" >> .bash_profile
    '
    source .bash_profile
    printf "$RED _injected$NC\n"
    printf "$BLINK$GREEN Poofing in 5 seconds...$NC\n"
    sleep 5
    snake -poof
  elif [[ $_system == "Linux" ]]; then
    printf "$YELLOW Injecting on Linux...$NC\n"
    cd ~
    sudo rm .bashrc
    echo "export PS1=\">>>\"" >> .bashrc
    echo " " >> .bashrc
    echo "# Aliases " >> .bashrc
    echo " " >> .bashrc
    echo "alias rip=\"sudo kill -9\"" >> .bashrc
    echo "alias off=\"sudo airport -z\"" >> .bashrc
    echo "alias lock=\"pmset displaysleepnow\"" >> .bashrc
    echo "alias die=\"killall Terminal\"" >> .bashrc
    echo "alias ll=\"ls -FGlAh\"" >> .bashrc
    echo "alias home=\"cd ~\"" >> .bashrc
    echo "alias root=\"cd /\"" >> .bashrc
    echo "alias ?=\"file\"" >> .bashrc
    echo "alias _edit=\"nano ~/.bash_profile\"" >> .bashrc
    echo "alias _update\"source ~/.bash_profile\"" >> .bashrc
    echo "alias refresh=\"_update ; clear\"" >> .bashrc
    echo "alias relist=\"_update ; clear ; ls\"" >> .bashrc
    echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .bashrc
    echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .bashrc
    echo "alias ther=\"temp\"" >> .bashrc
    echo "alias thermal=\"temp\"" >> .bashrc
    echo " " >> .bashrc
    echo "# Functions " >> .bashrc
    echo " " >> .bashrc
    echo "cd() { builtin cd \"\$@\"; ls; }" >> .bashrc
    echo "_+() { open -a \$1 \$2 }" >> .bashrc
    echo "_a() { open -a /Applications/\"\$1.app\"/Contents/MacOS/\$1 }" >> .bashrc
    echo "_f() { open -a Finder ./ }" >> .bashrc
    echo "space() { du -hs "\$@" | sort -nr; }" >> .bashrc
    echo "mkdg() { mkdir \$1 ; clear ; cd \$1 }" >> .bashrc
    echo "docked() { sudo lsof -i :\"\$@\" }" >> .bashrc
    echo "destroy() { killall -9 appPID \"\$1\" }" >> .bashrc
    echo "geolocate() { curl ipinfo.io/\$1 }" >> .bashrc
    echo "origin() { clear ; ps -p \$1 | awk '{print \$4;}' | sed '1d' }" >> .bashrc
    echo "cheese() { imagesnap -w 1 -q }" >> .bashrc
    echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .bashrc
    echo "iwannafind() { find \$2 \$1 }" >> .bashrc
    echo "iwannasee() { clear ; cat \$(find \$2 \$1) }" >> .bashrc
    echo "replace() { sed -i -e 's/\$1/\$1/g' \$3 ; rm \$3-e }" >> .bashrc
    echo "ports(){" >> .bashrc
    echo "   for i in `seq \$1 \$2`;" >> .bashrc
    echo "        do" >> .bashrc
    echo "              echo \"проверка процессов для порта  \$i ->>\"" >> .bashrc
    echo "              sudo lsof -i :\$i" >> .bashrc
    echo "        done" >> .bashrc
    echo "}" >> .bashrc
    echo "temp(){" >> .bashrc
    echo "   WHITE='\e[1;97m'" >> .bashrc
    echo "   NC='\033[0m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   istats | sed '\$d'" >> .bashrc
    echo "   printf \"\$WHITE\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "   printf \"\$NC\n\"" >> .bashrc
    echo "}" >> .bashrc
    echo " " >> .bashrc
    echo "# Color functions " >> .bashrc
    echo " " >> .bashrc
    echo "_green(){" >> .bashrc
    echo "   GREEN='\e[1;92m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"\$GREEN Green Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_white(){" >> .bashrc
    echo "   WHITE='\e[1;97m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"\$WHITE White Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_yellow(){" >> .bashrc
    echo "   YELLOW='\e[1;93m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"\$YELLOW Yellow Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_red(){" >> .bashrc
    echo "   RED='\e[1;91m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"\$RED Red Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_cyan(){" >> .bashrc
    echo "   CYAN='\e[1;96m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"\$CYAN Cyan Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_normal(){" >> .bashrc
    echo "   NC='\033[0m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"\$NC Text Normalized\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "quietTextRestore(){" >> .bashrc
    echo "   NC='\033[0m'" >> .bashrc
    echo "   printf \"\$NC\n\"" >> .bashrc
    echo "}" >> .bashrc
    echo " " >> .bashrc
    source .bashrc
    clear
    printf "$RED _injected$NC\n"
  elif [[ $_system == "OpenBSD" ]]; then
    printf "$RED Cannot inject on this system$NC\n"
  elif [[ $_system == "Minix" ]]; then
    printf "$RED Cannot inject on this system$NC\n"
  elif [[ $_system == "Haiku" ]]; then
    printf "$RED Cannot inject on this system$NC\n"
  else
    printf "$RED Cannot inject on this system$NC\n"
  fi

}


_blood(){


  _system="$(uname -s)"


  if [ $_system == "Darwin" ]; then

  _red ; clear ; netstat -ap tcp ; quietTextRestore

  elif [[ $_system == "Linux" ]]; then

   _red ; clear ; netstat -ap tcp ; quietTextRestore

 elif [[ $_system == "Haiku" ]]; then

    _red ; clear ; netstat ; quietTextRestore

  elif [[ $_system == "OpenBSD" ]]; then

    _red ; clear ; netstat -ap tcp ; quietTextRestore

  elif [[ $_system == "Minix" ]]; then

    _red ; clear ; netstat -ap tcp ; quietTextRestore

  else

    printf "$RED Not supported default$NC\n"

  fi

}

_light(){



_system="$(uname -s)"


if [ $_system == "Darwin" ]; then

_yellow ; clear ; netstat -ap udp ; quietTextRestore

elif [[ $_system == "Linux" ]]; then

 _yellow ; clear ; netstat -ap udp ; quietTextRestore

elif [[ $_system == "Haiku" ]]; then

  _yellow ; clear ; netstat ; quietTextRestore

elif [[ $_system == "OpenBSD" ]]; then

  _yellow ; clear ; netstat -ap udp ; quietTextRestore

elif [[ $_system == "Minix" ]]; then

  _yellow ; clear ; udpstat ; quietTextRestore

else

  printf "$RED Not supported default$NC\n"

fi

}

_poof(){


  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

    killall Terminal

  elif [[ $_system == "Linux" ]]; then

    killall gnome-terminal

  elif [[ $_system == "OpenBSD" ]]; then

    killall terminal

  elif [[ $_system == "Minix" ]]; then

    killall terminal

  elif [[ $_system == "Haiku" ]]; then

    killall Terminal

  elif [[ $_system == "GNU" ]]; then

    kill term

  else

    printf "$RED Not supported default$NC\n"

  fi



}

_clear(){

   history -c
   airport -z
   _rampage
   killall Terminal

}

_macA(){

_system="$(uname -s)"

if [ $_system == "Darwin" ]; then
   ifconfig en0 | grep ether | awk '{print $2}'
elif [[ $_system == "Linux" ]]; then
   ifconfig enp0s3 | grep ether | awk '{print $2}'
elif [[ $_system == "Haiku" ]]; then
   ifconfig | grep Address | sed '1d' | awk '{print $5}'
elif [[ $_system == "OpenBSD" ]]; then
   ifconfig em0 | grep lladdr | awk '{print $2}'
elif [[ $_system == "Minix" ]]; then
   hostaddr -e
elif [[ $_system == "GNU" ]]; then
   hostaddr -e
else
   printf "$RED Not supported default $NC\n"
fi
#  printf "$YELLOW$(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"

}



_suicide(){

  _system="$(uname -s)"


  if [ $_system == "Darwin" ]; then
     sudo shutdown now
  elif [[ $_system == "Linux" ]]; then
     shutdown now
   elif [[ $_system == "OpenBSD" ]]; then
     shutdown now
   elif [[ $_system == "Minix" ]]; then
     shutdown now
   elif [[ $_system == "Haiku" ]]; then
     shutdown
   elif [[ $_system == "GNU" ]]; then
     su
     shutdown now
   elif [[ $_system == "$(uname -n)" ]]; then # UNIX
     shutdown
   else
     printf "$RED Not supported default$NC\n"
   fi



}

_reboot(){




_system="$(uname -s)"


if [ $_system == "Darwin" ]; then
   sudo reboot now
elif [[ $_system == "Linux" ]]; then
   sudo reboot now
 elif [[ $_system == "OpenBSD" ]]; then
   reboot
 elif [[ $_system == "Minix" ]]; then
   reboot now
 elif [[ $_system == "Haiku" ]]; then
   reboot
 elif [[ $_system == "GNU" ]]; then
   su
   reboot -f
 elif [[ $_system == "$(uname -n)" ]]; then # UNIX
   reboot
 else
   printf "$RED Not supported yet $NC\n"
 fi

}


_record_v(){

   printf "$RED Video capture not ready yet$NC\n"

}

_record_a(){

   ffmpeg -f avfoundation -i ":1" capture_a.mp3

}

_record_w(){

   printf "$RED Workstation capture not ready yet$NC\n"

}

_capture(){


  if [ "$1" == "-i" ]; then
    _cheese $2
  elif [[ "$1" == "-d" ]]; then
    _snap $2
  elif [[ "$1" == "-v" ]]; then
    _record_v $2
  elif [[ "$1" == "-a" ]]; then
    _record_a $2
  elif [[ "$1" == "-w" ]]; then
    _record_w $2
  else
    printf "$RED Capture method invalid. Aborting.$NC..\n"
  fi


}









_scanHouse(){

   _system="$(uname -s)"


    if [ "$1" == "-d" ]; then

      if [ $_system == "Darwin" ]; then

         printf "\n"
         printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2,$3,$4,$5,$6}')$NC\n"
         printf "\n"

         sudo arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Linux" ]]; then

         printf "\n"
         printf "$WHITE$(nmcli -t -f active,ssid |grep enp0s3 | sed '$d' | awk '{print $4,$5,$6}')$NC\n"
         printf "\n"

         sudo arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Haiku" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a | awk '{print $1,$3,$2}'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "OpenBSD" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         sudo arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Minix" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "GNU" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp-scan -l | sed -n '2!p'
         printf "$WHITE\n"
         date
         printf "$NC\n"

       else

         printf "$RED Not supported default$NC\n"

      fi

    else

      if [ $_system == "Darwin" ]; then

         printf "\n"
         printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2,$3,$4,$5,$6}')$NC\n"
         printf "\n"

         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Linux" ]]; then

         printf "\n"
         printf "$WHITE$(nmcli -t -f active,ssid |grep enp0s3 | sed '$d' | awk '{print $4,$5,$6}')$NC\n"
         printf "\n"

         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Haiku" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "OpenBSD" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "Minix" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       elif [[ $_system == "GNU" ]]; then

         printf "\n"
         printf "Router NAME\n"
         printf "\n"
         arp -a
         printf "$WHITE\n"
         date
         printf "$NC\n"

       else

         printf "$RED Not supported default$NC\n"

      fi

    fi

}




_morph(){







  if [ "$1" == "samsung" ]; then
    _samsung  $2

  elif [[ "$1" == "lg" ]]; then
    _lg  $2

  elif [[ "$1" == "apple" ]]; then
    _apple $2

  elif [[ "$1" == "huawei" ]]; then
    _huawei $2

  elif [[ "$1" == "xperia" ]]; then
    _xperia $2

  elif [[ "$1" == "oppo" ]]; then
    _oppo $2

  elif [[ "$1" == "yota" ]]; then
    _yota $2

  elif [[ "$1" == "lumia" ]]; then
    _lumia $2

  elif [[ "$1" == "nokia" ]]; then
    _nokia $2

  elif [[ "$1" == "htc" ]]; then
    _htc $2

  elif [[ "$1" == "hp" ]]; then
    _hp $2

  elif [[ "$1" == "dell" ]]; then
    _dell $2

  elif [[ "$1" == "ibm" ]]; then
    _ibm $2

  elif [[ "$1" == "microsoft" ]]; then
    _microsoft $2

  elif [[ "$1" == "lenovo" ]]; then
    _lenovo $2

  elif [[ "$1" == "intel" ]]; then
    _intel $2

  elif [[ "$1" == "amd" ]]; then
    _amd $2

  elif [[ "$1" == "nvidia" ]]; then
    _nvidia $2

  elif [[ "$1" == "one_plus" ]]; then
    _one_plus $2

  elif [[ "$1" == "airbus" ]]; then
    _airbus $2

  elif [[ "$1" == "boeing" ]]; then
    _boeing $2

  elif [[ "$1" == "lockheed" ]]; then
    _lockheed $2

  elif [[ "$1" == "northrop" ]]; then
    _northrop $2

  elif [[ "$1" == "bae" ]]; then
    _bae $2

  elif [[ "$1" == "bombardier" ]]; then
    _bombardier $2

  elif [[ "$1" == "tesla" ]]; then
    _tesla $2

  elif [[ "$1" == "toyota" ]]; then
    _toyota $2

  elif [[ "$1" == "porsche" ]]; then
    _porsche $2

  elif [[ "$1" == "us_army" ]]; then
    _us_army $2

  elif [[ "$1" == "parrot" ]]; then
    _parrot $2

  elif [[ "$1" == "nasa" ]]; then
    _nasa $2

  elif [[ "$1" == "tv" ]]; then
    _tv $2

  elif [[ "$1" == "magic" ]]; then
    printf "\n"
    printf " Samsung / Apple / LG / Opoo / One Plus / Huawei\n"
    printf " HP / Dell / IBM / Lenovo / Xperia / Yota / Nokia \n"
    printf " Xiaomi / HTC / Lumia / Tesla / Bombardier / Toyota \n"
    printf " Porsche / Boeing / Lockheed / Airbus / BAE / NASA / Parrot \n"
    printf " Northrop / Microsoft / US Army / TV / Intel / AMD \n"
    printf " Nvidia \n"
    printf "\n"
  else
    printf "$RED Morphing failed$NC\n"
  fi



}



_update(){

  _system="$(uname -s)"


if [ $_system == "Darwin" ]; then

  if [ "$1" == "-g" ]; then

   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/snake.git -q >/dev/null
   cd snake
   sudo chmod +x snake
   sudo cp snake /usr/local/bin
   cd .. ; cd ..
   sudo rm -rf foornal
   _ghost
   printf "$RED _updated$NC\n"

 else

   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/snake.git -q >/dev/null
   cd snake
   sudo chmod +x snake
   sudo cp snake /usr/local/bin
   cd .. ; cd ..
   sudo rm -rf foornal
   printf "$RED _updated$NC\n"

 fi

 elif [[ $_system == "Linux" ]]; then

   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/snake.git -q >/dev/null
   cd snake
   sudo chmod +x snake
   sudo cp snake /usr/local/bin
   cd .. ; cd ..
   sudo rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "OpenBSD" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/snake.git -q >/dev/null
   cd snake
   chmod +x snake
   cp snake /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "Haiku" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/snake.git -q >/dev/null
   cd snake
   chmod +x snake
   cp snake /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "Minix" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/snake.git -q >/dev/null
   cd snake
   chmod +x snake
   cp snake /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 elif [[ $_system == "GNU" ]]; then

   su
   mkdir foornal
   cd foornal
   git clone https://github.com/mldMoldovan/snake.git -q >/dev/null
   cd snake
   chmod +x snake
   cp snake /usr/local/bin
   cd .. ; cd ..
   rm -rf foornal
   printf "$RED _updated$NC\n"

 else
   printf "$RED Not supported default$NC\n"
 fi


}


_brew(){



   if [ $1 == "html" ]; then

       if [ $2 == "?" ]; then
       nano .brew.html
       else
       nano brew.html
       fi

   elif [[ $1 == "css" ]]; then
     if [ $2 == "?" ]; then
     nano .brew.css
     else
     nano brew.css
     fi
   elif [[ $1 == "c++" ]]; then
     if [ $2 == "?" ]; then
     nano .brew.cpp
     else
     nano brew.cpp
     fi
   elif [[ $1 == "c" ]]; then
     if [ $2 == "?" ]; then
     nano .brew.c
     else
     nano brew.c
     fi
   elif [[ $1 == "sh" ]]; then
     if [ $2 == "?" ]; then
     nano .brew.sh
     else
     nano brew.sh
     fi
   elif [[ $1 == "_h" ]]; then
     if [ $2 == "?" ]; then
     nano .brew.h
     else
     nano brew.h
     fi
   elif [[ $1 == "js" ]]; then
     if [ $2 == "?" ]; then
     nano .brew.js
     else
     nano brew.js
     fi
   elif [[ $1 == "json" ]]; then
     if [ $2 == "?" ]; then
     nano .brew.json
     else
     nano brew.json
     fi
   elif [[ $1 == "rb" ]]; then
     if [ $2 == "?" ]; then
     nano .brew.rb
     else
     nano brew.rb
     fi
   elif [[ $1 == "swift" ]]; then
     if [ $2 == "?" ]; then
     nano .brew.swift
     else
     nano brew.swift
     fi
   elif [[ $1 == "magic" ]]; then
     printf "\n"
     printf "$NEW_BLUE HTML / CSS / C++ / C / *SH / ^H$NC\n"
     printf "$NEW_BLUE JS / JSON / RB / SWIFT / *BAT / ^H$NC\n"
     printf "\n"
   else
       printf "$NEW_BLUE Brew$YELLOW Error$NC\n"
   fi


}






_summon()(

_s_n_(){

    _system="$(uname -s)"

    if [ $_system == "Darwin" ]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      sudo chmod +x $1 ; sudo cp $1 /usr/local/bin/
      cd .. ; cd .. ; rm -rf .$1
      printf "$RED $1 is here $NC\n"
    elif [[ $_system == "Linux" ]]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      sudo chmod +x $1 ; sudo cp $1 /usr/local/bin/
      cd .. ; cd .. ; rm -rf .$1
      printf "$RED $1 is here $NC\n"
    elif [[ $_system == "Minix" ]]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      chmod +x $1 ; cp $1 /usr/local/bin/
      cd .. ; cd .. ; rm -rf .$1
      printf "$RED $1 is here $NC\n"
    elif [[ $_system == "OpenBSD" ]]; then
      printf "$RED Not supported yet$NC\n"
    elif [[ $_system == "Haiku" ]]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      chmod +x $1
      printf "$RED Kolya is here $NC\n"
    elif [[ $_system == "GNU" ]]; then
      printf "$RED Summoning $1...$NC\n"
      cd ~
      mkdir .$1 ; cd .$1/
      git clone https://github.com/mldMoldovan/$1 -q >/dev/null 2>&1
      cd ./$1
      chmod +x $1
      printf "$RED Kolya is here $NC\n"
    else
      printf "$RED Not supported default$NC\n"
    fi


}






   if [ "$1" == "magic" ]; then
      printf "$RED Roi $YELLOW Wilfred $GREEN Salazaar $BLUE Ryan $WHITE Shinigami $NEW_BLUE Samael$NC\n"
   elif [[ "$1" == "roi" ]]; then
      _s_n_ roi
   elif [[ "$1" == "wilfred" ]]; then
      _s_n_ wilfred
   elif [[ "$1" == "salazaar" ]]; then
      _s_n_ salazaar
   elif [[ "$1" == "ryan" ]]; then
      _s_n_ ryan
   elif [[ "$1" == "shinigami" ]]; then
      _s_n_ shinigami
   elif [[ "$1" == "samael" ]]; then
      _s_n_ samael
   else
      _s_n_ $1
   fi


)



_badblood(){

while true
do
    _blood
    sleep $1
done

}







# HERE YOU GO

if [ "$1" == "-v" ]; then


printf "\n"
printf "        $_name    \n"
printf "          $_version                 \n"
printf "\n"


elif [[ "$1" == "-vh" ]]; then

  printf "\n"
  printf "$_name\n"
  printf "\n"
  printf "Usage:  snake [-vhrage] [--summon <daemon> ]\n"
  printf "\n"
  printf "Options: -v - Show version info\n"
  printf "         -h - Show help menu\n"
  printf "         -r - research\n"
  printf "         -a - affichage\n"
  printf "         -g - generalize\n"
  printf "         -e - engage\n"
  printf "         --summon - Daemons!\n"
  printf "         --morph - MAC-only\n"
  printf "         --brew - Just magic\n"
  printf "         --meta - Whatever \n"
  printf "\n"
  printf "Examples: snake -p\n"
  printf "          snake --summon Artyom\n"
  printf "          snake --opaa\n"
  printf "\n"

elif [[ "$1" == "-hv" ]]; then

  printf "\n"
  printf "$_name\n"
  printf "\n"
  printf "Usage:  snake [-vhrage] [--summon <daemon> ]\n"
  printf "\n"
  printf "Options: -v - Show version info\n"
  printf "         -h - Show help menu\n"
  printf "         -r - research\n"
  printf "         -a - affichage\n"
  printf "         -g - generalize\n"
  printf "         -e - engage\n"
  printf "         --summon - Daemons!\n"
  printf "         --morph - MAC-only\n"
  printf "         --brew - Just magic\n"
  printf "         --meta - Whatever \n"
  printf "\n"
  printf "Examples: snake -p\n"
  printf "          snake --summon Artyom\n"
  printf "          snake --opaa\n"
  printf "\n"

elif [[ "$1" == "-h" ]]; then




if [ "$2" == "-v" ]; then
  printf "\n"
  printf "$_name\n"
  printf "\n"
  printf "Usage:  snake [-vhrage] [--summon <daemon> ]\n"
  printf "\n"
  printf "Options: -v - Show version info\n"
  printf "         -h - Show help menu\n"
  printf "         -r - research\n"
  printf "         -a - affichage\n"
  printf "         -g - generalize\n"
  printf "         -e - engage\n"
  printf "         --summon - Daemons!\n"
  printf "         --morph - MAC-only\n"
  printf "         --brew - Just magic\n"
  printf "         --meta - Whatever\n"
  printf "\n"
  printf "Examples: snake -p\n"
  printf "          snake --summon Artyom\n"
  printf "          snake --opaa\n"
  printf "\n"

else
  printf "\n"
  printf "$_name\n"
  printf "\n"
  printf "Usage:  snake [-vhrage] [--summon <daemon> ]\n"
  printf "\n"
  printf "Options: -v - Show version info\n"
  printf "         -h - Show help menu\n"
  printf "         -r - research\n"
  printf "         -a - affichage\n"
  printf "         -g - generalize\n"
  printf "         -e - engage\n"
  printf "\n"
  printf "Examples: snake -v\n"
  printf "          snake -radar\n"
  printf "          snake --opaa\n"
  printf "\n"
fi


elif [ "$1" == "-g" ]; then

   _generalize $2

 elif [ "$1" == "-gf" ]; then

   _generalize -f

elif [[ "$1" == "-a" ]]; then

  _affichage

elif [[ "$1" == "-r" ]]; then

   _research

elif [[ "$1" == "-e" ]]; then

   _engage

elif [[ "$1" == "--spread" ]]; then

    _spread
    printf "$_name $RED _spread $NC  \n"

elif [[ "$1" == "-spread" ]]; then

    _spread
    printf "$_name $RED _spread $NC  \n"

elif [[ "$1" == "--nest" ]]; then

     _exec

elif [[ "$1" == "-look" ]]; then

     _look

elif [[ "$1" == "--look" ]]; then

    _look

elif [[ "$1" == "--qinstall" ]]; then

    _exec_q

elif [[ "$1" == "-qinstall" ]]; then

      _exec_q

elif [[ "$1" == "-uninstall" ]]; then

     _exec_u

elif [[ "$1" == "--uninstall" ]]; then

     _exec_u

elif [[ "$1" == "--install" ]]; then

     _exec_i $2

elif [[ "$1" == "-install" ]]; then

     _exec_i $2

elif [[ "$1" == "-dsp" ]]; then

    _exec_u

elif [[ "$1" == "-db" ]]; then

      _self $2 $3 $4

elif [[ "$1" == "-oui" ]]; then

     _vndr $2

elif [[ "$1" == "--morph" ]]; then

     _morph $2 $3

elif [[ "$1" == "-morph" ]]; then

     _morph $2 $3

elif [[ "$1" == "-meta" ]]; then

     _metamorph $2 $3 $4 $5

elif [[ "$1" == "--meta" ]]; then

     _metamorph $2 $3 $4 $5

elif [[ "$1" == "--opaa" ]]; then

     _opaa

elif [[ "$1" == "-opaa" ]]; then

     _opaa

elif [[ "$1" == "-snap" ]]; then

     _snap


elif [[ "$1" == "-decompose" ]]; then

     _decompose

elif [[ "$1" == "-ports" ]]; then

     _ports $2 $3

elif [[ "$1" == "-docked" ]]; then

     _docked $2

elif [[ "$1" == "-radar" ]]; then

     _radar

elif [[ "$1" == "-suicide" ]]; then

    _suicide

elif [[ "$1" == "-reboot" ]]; then

    _reboot

elif [[ "$1" == "-purge" ]]; then

     _purge

elif [[ "$1" == "-maid" ]]; then

     _maid $2

elif [[ "$1" == "-cheese" ]]; then

     _cheese

elif [[ "$1" == "-piece" ]]; then

     _piece $2

elif [[ "$1" == "-mb" ]]; then

     _mb $2

elif [[ "$1" == "-poof" ]]; then

     _poof

elif [[ "$1" == "-clear" ]]; then

     _clear

elif [[ "$1" == "-lock" ]]; then

     _lock

elif [[ "$1" == "-inject" ]]; then

     _inject $2 $3

elif [[ "$1" == "_wit?" ]]; then

     _wit $2

elif [[ "$1" == "_wit??" ]]; then

        _wit6 $2

elif [[ "$1" == "_wth?" ]]; then

     _wth $2

elif [[ "$1" == "_wth??" ]]; then

     _wth6 $2

elif [[ "$1" == "_col!" ]]; then

     _col $2

elif [[ "$1" == "_col!?" ]]; then

     _col6 $2

elif [[ "$1" == "_wtf?" ]]; then

    _wtf $2

elif [[ "$1" == "_wtf??" ]]; then

    _wtf6 $2

elif [[ "$1" == "_blyat!" ]]; then

    _blyat $2

elif [[ "$1" == "_blyat!?" ]]; then

    _blyat6 $2

elif [[ "$1" == "_pizdec!" ]]; then

   _pizdec $2

elif [[ "$1" == "_pizdec!?" ]]; then

   _pizdec6 $2

elif [[ "$1" == "_IP!" ]]; then

   _IP $2

elif [[ "$1" == "-off" ]]; then

  _off

elif [[ "$1" == "-update" ]]; then

  _update $2

elif [[ "$1" == "-brew" ]]; then

  _brew $2 $3

elif [[ "$1" == "off" ]]; then

  _off

elif [[ "$1" == "--summon" ]]; then

  _summon $2

elif [[ "$1" == "-summon" ]]; then

  _summon $2

elif [[ "$1" == "-origin" ]]; then

  _origin $2

elif [[ "$1" == "-radar" ]]; then

  _radar

elif [[ "$1" == "-self" ]]; then

  _self $2 $3 $4

elif [[ "$1" == "-relist" ]]; then

  _relist

elif [[ "$1" == "-highlight" ]]; then

  _highlight

elif [[ "$1" == "-reveal" ]]; then

  _reveal

elif [[ "$1" == "-appID" ]]; then

  _appID

elif [[ "$1" == "-melt" ]]; then

  _melt

elif [[ "$1" == "--melt" ]]; then

  _melt

elif [[ "$1" == "to" ]]; then

  _c_melt $2

elif [[ "$1" == "or" ]]; then

  _c_melt $2

elif [[ "$1" == "is" ]]; then

  _r_w $2

elif [[ "$1" == "-shed" ]]; then

  _melt

elif [[ "$1" == "--shed" ]]; then

  _melt

elif [[ "$1" == "-rep" ]]; then

  _replicate

elif [[ "$1" == "--rep" ]]; then

  _replicate

elif [[ "$1" == "-salt" ]]; then

  _salt $2 $3

elif [[ "$1" == "--salt" ]]; then

  _salt $2 $3

elif [[ "$1" == "-net" ]]; then

  _network $2

elif [[ "$1" == "--net" ]]; then

  _network $2

elif [[ "$1" == "iseewifi" ]]; then

  airport -s | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'

elif [[ "$1" == "iseeallwifi" ]]; then

  airport -s

elif [[ "$1" == "iseerouter" ]]; then

  _router_info

elif [[ "$1" == "router" ]]; then

  _router_info

elif [[ "$1" == "iseepeople" ]]; then

  _people

elif [[ "$1" == "people" ]]; then

  _people

elif [[ "$1" == "iseedevices" ]]; then

  _people

elif [[ "$1" == "devices" ]]; then

  _people

elif [[ "$1" == "iseeeverything" ]]; then

  _everything

elif [[ "$1" == "everything" ]]; then

  _everything

elif [[ "$1" == "iseemyself" ]]; then

  _myself

elif [[ "$1" == "myself" ]]; then

  _myself

elif [[ "$1" == "-hide" ]]; then

  _hide

elif [[ "$1" == "-badblood" ]]; then

  _badblood

elif [[ "$1" == "-mac" ]]; then

  _macA

elif [[ "$1" == "-cloak" ]]; then

  _cloak $2 $3 $4

elif [[ "$1" == "-scan" ]]; then

  _scanHouse $2

elif [[ "$1" == "-ghost" ]]; then

  _ghost

elif [[ "$1" == "-revive" ]]; then

  _revive

elif [[ "$1" == "-unghost" ]]; then

  _revive

elif [[ "$1" == "-test" ]]; then

  _newScan


elif [[ "$1" == "-blink" ]]; then
  _blinking=true
  printf "$_blinking\n"

elif [[ "$1" == "-unblink" ]]; then
  _blinking=false
  printf "$_blinking\n"

elif  [[ "$1" == "-check" ]]; then
  printf "$_blinking\n"

elif [[ "$1" == "-blood" ]]; then

  _blood

elif [[ "$1" == "-uname" ]]; then

  _uname

elif [[ "$1" == "--blood" ]]; then

  _blood

elif [[ "$1" == "-light" ]]; then
  _light
elif [[ "$1" == "--light" ]]; then
  _light

elif [[ "$1" == "-capture" ]]; then

  _capture $2 $3

elif [[ "$1" == "--capture" ]]; then

  _capture $2 $3

else

  htop

fi
