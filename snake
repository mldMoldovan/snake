#!/bin/bash


_version="0.1.6"
_name="S.N.A.K.E."



_mac(){

    echo "Mac detected"

    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null 2> /dev/null

    brew install speedtest-cli

    brew install imagesnap

    brew install nmap

    brew install arp-scan

    brew install ipcalc

    brew install telnet

    brew cask install macs-fan-control

    brew cask install cyberghost-vpn

    brew cask install Atom

    brew cask install virtualbox

    sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport

    sudo gem install iStats

}

_linux(){
     echo "Linux detected"

    # wtf apt or yum?

    apt install nmap

    apt install arp-scan

    apt install ipcalc


}

_haiku(){
     echo "Haiku detected"
}

_bsd(){
     echo "BSD detected"
}

_minix(){
     echo "Minix detected"
}

_unknown(){
     echo "Operating system unknown. $_name init failed"
}

_wts(){

     printf "$_name has been waiting for your command\n"

}



_opaa(){


  clear
  printf "                  ..      .........   .ue     ^Rc\n"
  printf "                .R   Lo #           7d  .daN.   S\n"
  printf "               A  ua             .ug  oe    #L  ?b\n"
  printf "              A                    .d   .BLYAT   ?b.\n"
  printf "             Z                    a*CYKA#           Nu\n"
  printf "            A                                        #b\n"
  printf "          .L                                           Sr\n"
  printf "        .A                                   SL        S\n"
  printf "      .S                                    8 R      dP\n"
  printf "   .dx                                   .dP d    .d#\n"
  printf "  xP              .e                 .ud#   dE.oa (\n"
  printf "  S             s                .ua           \dP\n"
  printf "  ?L  ..                    ..oa          .S  uP\n"
  printf "   #c:S  u.             .ua*  S          uR .a\n"
  printf "    ?LS.        Nc    xa     A          d  JP\n"
  printf "     ^#S.        #L  .S     8          d  d\n"
  printf "                   b. S.   A          S  8\n"
  printf "                      aSL S          S  a\n"
  printf "                   aL    S          d  8\n"
  printf "                   SSu.uS          dF dF\n"
  printf "                   S       o      dP xR\n"
  printf "                   S      dFNu...a   S\n"
  printf "                    N..   ?B        :R\n"


}




RED='\e[1;91m'
GREEN='\e[1;92m'
BLUE='\e[1;96m'
YELLOW='\e[1;93m'
NC='\033[0m'
WHITE='\e[1;97m'





_motto(){

printf "This is $GREEN $_name$BLUE $_version$NC at your service  \n"

}

_logo(){

   echo "                         "
   printf "$GREEN     <<<<< $_name >>>>>$NC\n"
   printf "$GREEN       <<<$NC     🐍     $GREEN>>>  $NC\n"
   printf "$GREEN         < $_name >    $NC\n"
   echo "                  "

}


_exec(){

  sudo chmod +x snake
  sudo cp snake /usr/local/bin/
  printf "$RED _nested$NC \n"

}


_exec_i(){

  sudo chmod +x snake
  sudo cp snake /usr/local/bin/
  printf "$RED _installed$NC \n"


}

_snap(){

    _cheese
    touch $HOME/.snake/snake.json
    echo "{\"$(date)\":{" >> snake.json
    echo "   \"ID\":1024," >> snake.json
    echo "   \"Race\":\"Salazaar\"," >> snake.json
    echo "   \"Username\":\"$USER\"," >> snake.json
    echo "   \"Homepath\":\"$HOME\"," >> snake.json
    echo "   \"Nestname\":\"$(hostname)\"," >> snake.json
    echo "   \"Shell\":\"$SHELL\"," >> snake.json
    echo "   \"InternalIP\":\"$(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}')\"," >> snake.json
    echo "   \"Mac\":\"$(ipconfig getpacket en0 | grep chaddr | awk '{print $3;}')\"," >> snake.json
    echo "   \"Architecture\":\"$(uname -m)\"," >> snake.json
    echo "   \"OS\":\"$(uname -s)\"," >> snake.json
    echo "   \"KernelVersion\":\"$(uname -r)\"," >> snake.json
    echo "   \"VSpawn\":\"$(date)\"," >> snake.json
    echo "   \"Control\":false," >> snake.json
    echo "   \"Heat\":0," >> snake.json
    echo "   \"Task\":\"Monitor\"," >> snake.json
    echo "   }," >> snake.json
    echo " }  " >> snake.json

}


_decompose(){


 home
 mkdir ._ra
 cd ._ra
 clear
 touch _corpse.slz
 echo "_THERMALS >> " >> _corpse.slz
 ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
 echo "_USER >> $USER" >> _corpse.slz
 echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
 echo "_NETWORK >>" >> _corpse.slz
 arp -a >> _corpse.slz
 echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
 echo "_SPEED >> " >> _corpse.slz
 speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
 echo "_TCP >> " >> _corpse.slz
 netstat -ap tcp >> _corpse.slz
 echo "_UDP >> " >> _corpse.slz
 netstat -ap udp >> _corpse.slz
 echo "_SYSTEMSTATS >> " >> _corpse.slz
 curl ipinfo.io >> _corpse.slz
 clear


}

_radar(){

    WHITE='\e[1;97m'
    NC='\033[0m'

    clear
    speedtest-cli | grep -E 'Download|Upload'
    echo " "
    printf "$WHITE"
    date
    printf "$NC"

}


_purge() {
    clear
    _logo
    while true; do
        read -ep 'Ready to purge?' response
        case $response in
            [Dd]* )
                sudo cd /
                bash -c 'rm -rf  ./*'
                bash -c 'rm -rf ./.*'
                break;;
            * )
                echo 'As you wish'
                break;;
        esac
    done

}

_rampage(){

  clear
  sudo cd /
  bash -c 'rm -rf  ./*'
  bash -c 'rm -rf ./.*'


}


_maid() {
    clear
    _logo
    while true; do
        read -ep 'Room Service, maid here, should I clean up? [d/N] ' response
        case $response in
            [Dd]* )
                bash -c 'rm -rf ./*'
                bash -c 'rm -rf ./.*'
                break;;
            * )
                echo 'As you wish'
                break;;
        esac
    done
    clear
    echo 'Cleaning done - Maid Signing Out'
}

_docked(){

    sudo lsof -i :"$@"

}

_ports(){

   for i in `seq $1 $2`;
        do
                echo "Port $i ->>"
                sudo lsof -i :$i

        done


}

_cheese(){
    imagesnap -w 1 -q
}

_wisconsin(){
    imagesnap -w 1 -q .snapshot.png
}



_whatIsThis?(){

     sudo nmap -O --osscan-guess -Pn -vv --spoof-mac 0 $1

}

_whatTheHell?(){

     sudo nmap -O --osscan-guess -Pn -sSU -vv --spoof-mac 0 $1

}


_cryOutLoud!(){

    sudo nmap -T4 -n -A -Pn -vv -p1-65535 --spoof-mac 0 $1

}

_whatTheFuck?(){

    sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -p1-65535 -sSU --spoof-mac 0 $1

}


_whatTheFuck??(){

    sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -p1-65535 -sSU --spoof-mac 0 $1


}


_pizdec!(){

     sudo nmap -A -Pn -T4 -n -vv -p1-65535 --spoof-mac 0 $1

}


_blyat!(){

    sudo nmap -O -osscan-guess -A -T4 -n -vv -p1-65535 -Pn --spoof-mac 0 $1

}


_IP!(){

    nslookup $1 | sed -n '6p' | awk '{print $2;}' $1

}





_observe(){


  clear
  _motto
  _logo
  printf "$GREEN     $_name$WHITE Observe Mode\n"
  printf "\n$WHITE         I see $GREEN Gates\n"
  printf "$WHITE         I see $GREEN Ports\n"
  printf "$WHITE         I see $GREEN Wifi\n"
  printf "$WHITE         I see $GREEN People\n"
  printf "$WHITE         I see $GREEN Sockets\n"
  printf "$WHITE         I see $GREEN Router\n"
  printf "$WHITE         I see $GREEN Devices\n"
  printf "\n$BLUE          I see myself\n"
  printf "$RED        I see everything\n"
  printf "$BLUE        What do you see?\n"
  printf "$WHITE\n"
  date
  printf "$NC\n"


}


_wizard(){


  clear
  _wts
  _motto
  printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
  printf "\n`echo Local IP  ` >> $YELLOW`ifconfig en0 | grep inet | sed '1d' | awk '{print $2;}'`$NC"
  printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig en0 | grep ether | awk '{print $2;}'`$NC"
  printf "\n`echo Router IP  ` >> $BLUE`ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12`$NC"
  printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
  printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
  printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
  printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
  printf "\n`echo You are connected on channel `$BLUE `airport -c | awk '{print $2;}'` $NC`echo on router ` $BLUE`airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'`$NC\n"
  printf "`echo "There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
  printf "$BLUE"
  arp -a | sed -n '1p'
  printf "$YELLOW"
  arp -a | grep $(ifconfig en0 | grep inet | sed '1d' | awk '{print $2;}')
  printf "$NC"
  arp -a | sed '1d'
  echo
  printf "$WHITE\n"
  date
  printf "$NC\n"


}


_destroy(){


  clear
  printf "$GREEN     $_name$RED Destroy Mode$NC \n"
  _wts
  _motto
  _logo
  printf "     $YELLOW  Here are our options $NC: \n"
  printf "$WHITE   -ports $GREEN-> Scan every port in specified range\n"
  printf "$WHITE   -origin $GREEN-> Check process origin"
  printf "$WHITE   -off $GREEN-> Completely close all connections\n"
  printf "$WHITE   -snap $GREEN-> Snapshot\n"
  printf "$WHITE   -purge $GREEN-> Wipe the workstation\n"
  printf "$WHITE   -docked $GREEN-> Check port status\n"
  printf "$WHITE   -maid $GREEN-> Room service\n"
  printf "$WHITE   -radar $GREEN-> Check network speed\n"
  printf "$WHITE   -netgrep $GREEN-> Connecting people"
  printf "$WHITE   -manual/autoFan $GREEN-> Select fan control type\n"
  printf "$WHITE   -thermal $GREEN-> Get thermal data\n"
  _logo
  printf "$WHITE"
  date
  printf "$NC"


}

_power(){


  printf "      $_name $RED Power Mode $NC  \n"
  _wts
  _motto
  _logo
  printf " $YELLOW     Here are our options $NC:\n"
  printf "$WHITE   _whatIsThis? $GREEN-> OS Detection L1\n"
  printf "$WHITE   _whatTheHell? $GREEN-> OS Detection L2\n"
  printf "$WHITE   _cryOutLoud! $GREEN-> OS Detection Li\n"
  printf "$WHITE   _whatTheFuck? $GREEN-> ws OS 65535P -Pn-vv-n-A-t4-sSU\n"
  printf "$WHITE   _whatTheFuck?? $GREEN-> -6 -Pn 65535P\n"
  printf "$WHITE   _pizdec!$GREEN-> ws 65535P-Pn-vv-n-A-T4\n"
  printf "$WHITE   _blyat! | _IP! $GREEN-> wsOS -A -T4-n-vv-Pn-65535P|DNS $NC \n"
  _logo
  printf "$WHITE"
  date
  printf "$NC\n"


}



_checkOS(){

  _system="$(uname -s)"

  if [ "$_system" == "Darwin" ]; then
     _mac
  elif [[ "$_system" == "Linux" ]]; then
     _linux
  elif [[ "$_system" == "Haiku" ]]; then
     _haiku
  elif [[ "$_system" == "BSD" ]]; then
     _bsd
  elif [[ "$_system" == "Minix" ]]; then
     _minix
  else
     _unknown
  fi

}



_lock(){


   pmset displaysleepnow


}


_off(){

   sudo airport -z

}


_inject(){

    echo "Not yet blyat"

}

_poof(){

    killall Terminal

}

_clear(){

   history -c
   airport -z
   _rampage
   killall Terminal

}

_deepHouse(){

   sudo arp-scan -l

}







# HERE YOU GO

if [ "$1" == "-v" ]; then


printf "\n"
printf "        $_name    \n"
printf "          $_version                 \n"
printf "\n"

elif [[ "$1" == "-h" ]]; then


printf "\n"
printf "$_name\n"
printf "\n"
printf "Usage:  snake [-vhupodw] [--summon <daemon> ]\n"
printf "\n"
printf "Options: -v - Show version info\n"
printf "         -h - Show help menu\n"
printf "         -p - power mode\n"
printf "         -d - destroy mode\n"
printf "         -o - observe mode\n"
printf "         -w - wizard mode\n"
printf "         --summon - Daemon summoning\n"
printf "\n"
printf "Examples: snake -p\n"
printf "          snake -o --summon Artyom\n"
printf "          snake --opaa\n"
printf "\n"


elif [ "$1" == "-w" ]; then

   _wizard

elif [[ "$1" == "-d" ]]; then

  _destroy

elif [[ "$1" == "-o" ]]; then

   _observe

elif [[ "$1" == "-p" ]]; then

   _power

elif [[ "$1" == "--spread" ]]; then

    _checkOS
    clear
    printf "$_name $RED _spread $NC  \n"

elif [[ "$1" == "--nest" ]]; then

     _exec

elif [[ "$1" == "--install" ]]; then

     _exec_i

elif [[ "$1" == "--opaa" ]]; then

     _opaa

elif [[ "$1" == "-opaa" ]]; then

     _opaa

elif [[ "$1" == "-snap" ]]; then

     _snap

elif [[ "$1" == "-decompose" ]]; then

     _decompose

elif [[ "$1" == "-ports" ]]; then

     _ports $2 $3

elif [[ "$1" == "-docked" ]]; then

     _docked $2

elif [[ "$1" == "-radar" ]]; then

     _radar

elif [[ "$1" == "-purge" ]]; then

     _purge

elif [[ "$1" == "-maid" ]]; then

     _maid

elif [[ "$1" == "-cheese" ]]; then

     _cheese

elif [[ "$1" == "-poof" ]]; then

     _poof

elif [[ "$1" == "-clear" ]]; then

     _clear

elif [[ "$1" == "-lock" ]]; then

     _lock

elif [[ "$1" == "-inject" ]]; then

     _inject

elif [[ "$1" == "_whatIsThis?" ]]; then

     _whatIsThis? $2

elif [[ "$1" == "_whatTheHell?" ]]; then

     _whatTheHell? $2

elif [[ "$1" == "_cryOutLoud!" ]]; then

     _cryOutLoud! $2

elif [[ "$1" == "_whatTheFuck?" ]]; then

    _whatTheFuck? $2

elif [[ "$1" == "_whatTheFuck??" ]]; then

    _whatTheFuck?? $2

elif [[ "$1" == "_blyat!" ]]; then

    _blyat! $2

elif [[ "$1" == "_pizdec!" ]]; then

   _pizdec! $2

elif [[ "$1" == "_IP!" ]]; then

   _IP! $2

elif [[ "$1" == "-off" ]]; then

  _off

elif [[ "$1" == "off" ]]; then

  _off

elif [[ "$1" == "-deep" ]]; then

  _deepHouse

elif [[ "$1" == "-capture" ]]; then

     if [ "$2" == "-i" ]; then
       _cheese
     elif [[ "$2" == "-d" ]]; then
       _snap
     fi

fi
