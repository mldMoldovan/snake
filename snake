#!/bin/bash


_version="0.2.9"
_name="S.N.A.K.E."
_morph_state="Unknown"
_blinking=true



RED='\e[1;91m'
GREEN='\e[1;92m'
BLUE='\e[1;96m'
NEW_BLUE='\e[34m'
YELLOW='\e[1;93m'
NC='\033[0m'
WHITE='\e[1;97m'
BLINK='\e[5m'


_green(){
   GREEN='\e[1;92m'
   clear
   printf "$GREEN Green Bold Activate\n"
   date
}

_white(){
   WHITE='\e[1;97m'
   clear
   printf "$WHITE White Bold Activate\n"
   date
}

_yellow(){
   YELLOW='\e[1;93m'
   clear
   printf "$YELLOW Yellow Bold Activate\n"
   date
}

_red(){
   RED='\e[1;91m'
   clear
   printf "$RED Red Bold Activate\n"
   date
}

_cyan(){

   CYAN='\e[1;96m'
   clear
   printf "$CYAN Cyan Bold Activate\n"
   date
}

_normal(){
   NC='\033[0m'
   clear
   printf "$NC Text Normalized\n"
   date
}

quietTextRestore(){
    NC='\033[0m'
    printf "$NC\n"

}


# MORPHING

_samsung(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 38:2D:E8$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Samsung :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_lg(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 2C:54:CF$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE LG :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_apple(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo DC:A9:04$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Apple :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_oppo(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 50:29:F5$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Oppo :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_one_plus(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo C0:EE:FB$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE One Plus :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_huawei(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 78:F5:FD$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Huawei :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_xperia(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 1C:7B:21$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Xperia :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_yota(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 28:C6:71$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Yota Phone :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}


_lumia(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 38:F2:3E$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Lumia :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_xiaomi(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo F8:A4:5F$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Xiaomi :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}


_hp(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 3C:D9:2B$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE HP :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_dell(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo F8:DB:88$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Dell :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_ibm(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 6C:AE:8B$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE IBM :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_microsoft(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 48:50:73$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Microsoft :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_lenovo(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 70:72:0D$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Lenovo :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}


_intel(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo E4:F8:9C$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Intel :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_tesla(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 98:ED:5C$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Tesla :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_bombardier(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:11:BD$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Bombardier :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}


_boeing(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:50:93$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Boeing :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}


_lockheed(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:07:EF$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Lockheed :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_airbus(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:23:B9$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Airbus :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_northrop(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:19:8A$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Northrop :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_bae(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo CC:3F:EA$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE BAE :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}


_us_army(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:C0:ED$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE US Army :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}


_toyota(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:0A:AB$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Toyota :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}


_porsche(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo D0:0E:A4$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Porsche :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_parrot(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo A0:14:3D$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE Parrot :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_nasa(){

_off
sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
echo 00:08:55$end)
_on
if [ "$1" == "-q" ]; then
>/dev/null  2>&1
else
printf "$WHITE NASA :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
fi

}

_tv(){

  _off
  sudo ifconfig en0 ether 80:56:F2:78:98:DD
  _on
  if [ "$1" == "-q" ]; then
  >/dev/null  2>&1
  else
  printf "$WHITE Sony Bravia :: $(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"
  fi


}



_mac(){

    echo "Mac detected"

    sudo xcode-select --install

    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" >/dev/null

    brew install speedtest-cli >/dev/null

    brew install imagesnap >/dev/null

    brew install nmap >/dev/null  2>&1

    brew install arp-scan >/dev/null  2>&1

    brew install ipcalc >/dev/null  2>&1

    brew install telnet >/dev/null  2>&1

    brew install watch >/dev/null  2>&1

    brew install htop >/dev/null  2>&1

    brew cask install macs-fan-control >/dev/null  2>&1

    brew cask install cyberghost-vpn >/dev/null  2>&1

    brew cask install Atom >/dev/null  2>&1

    sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport >/dev/null

    sudo gem install iStats >/dev/null  2>&1

}

_linux(){
    echo "Linux detected"

    # wtf apt or yum?

    sudo apt install net-tools >/dev/null 2>&1

    sudo apt install nmap >/dev/null  2>&1

    sudo apt install arp-scan >/dev/null  2>&1

    sudo apt install ipcalc >/dev/null  2>&1

    sudo apt install curl >/dev/null 2>&1

    sudo apt install htop >/dev/null 2>&1


}

_haiku(){
     echo "Haiku detected"
}

_bsd(){
     echo "BSD detected"
}

_minix(){
     echo "Minix detected"
}

_unknown(){
     echo "Operating system unknown. $_name init failed"
}

_wts(){

     printf "$_name has been waiting for your command\n"

}

_magic_morph(){

    printf "\n"
    printf " Samsung / Apple / LG / Opoo / One Plus / Huawei\n"
    printf " HP / Dell / IBM / Lenovo / Xperia / Yota / Xiaomi\n"
    printf " Tesla / Bombardier / Toyota / Porsche / Boeing\n"
    printf " Lockheed / Airbus / BAE / NASA / Parrot / Lumia\n"
    printf " Northrop / Microsoft / US Army / TV / Intel\n"
    printf "\n"

}


_opaa(){


  clear
  printf "$BLINK                  ..      .........   .ue     ^Rc\n"
  printf "                .R   Lo #           7d  .daN.   S\n"
  printf "               A  ua             .ug  oe    #L  ?b\n"
  printf "              A                    .d   .BLYAT   ?b.\n"
  printf "             Z                    a*CYKA#           Nu\n"
  printf "            A                                        #b\n"
  printf "          .L                                           Sr\n"
  printf "        .A                                   SL        S\n"
  printf "      .S                                    8 R      dP\n"
  printf "   .dx                                   .dP d    .d#\n"
  printf "  xP              .e                 .ud#   dE.oa (\n"
  printf "  S             s                .ua           \dP\n"
  printf "  ?L  ..                    ..oa          .S  uP\n"
  printf "   #c:S  u.             .ua*  S          uR .a\n"
  printf "    ?LS.        Nc    xa     A          d  JP\n"
  printf "     ^#S.        #L  .S     8          d  d\n"
  printf "                   b. S.   A          S  8\n"
  printf "                      aSL S          S  a\n"
  printf "                   aL    S          d  8\n"
  printf "                   SSu.uS          dF dF\n"
  printf "                   S       o      dP xR\n"
  printf "                   S      dFNu...a   S\n"
  printf "                    N..   ?B        :R$NC\n"


}

_motto(){

printf "This is $GREEN $_name$BLUE $_version$NC at your service  \n"

}

_logo(){

  #printf "Logo call: $_blinking\n"
  if $_blinking ; then
  printf "$BLINK\n"
  printf "$GREEN     <<<<< $_name >>>>>$NC\n"
  printf "$BLINK$GREEN       <<<$NC$BLINK     🐍     $GREEN$BLINK>>>  $NC\n"
  printf "$BLINK$GREEN         < $_name >    $NC\n"
  printf "$NC\n"
  else
  printf "\n"
  printf "$GREEN     <<<<< $_name >>>>>$NC\n"
  printf "$GREEN       <<<$NC     🐍     $GREEN>>>  $NC\n"
  printf "$GREEN         < $_name >    $NC\n"
  printf "$NC\n"
  fi



}



_cloak(){

  while true
do
  if [ "$1" == "samsung" ]; then
    _samsung $3

  elif [[ "$1" == "lg" ]]; then
    _lg $3

  elif [[ "$1" == "apple" ]]; then
    _apple $3

  elif [[ "$1" == "huawei" ]]; then
    _huawei $3

  elif [[ "$1" == "xperia" ]]; then
    _xperia $3

  elif [[ "$1" == "oppo" ]]; then
    _oppo $3

  elif [[ "$1" == "yota" ]]; then
    _yota $3

  elif [[ "$1" == "lumia" ]]; then
    _lumia $3

  elif [[ "$1" == "hp" ]]; then
    _hp $3

  elif [[ "$1" == "dell" ]]; then
    _dell $3

  elif [[ "$1" == "ibm" ]]; then
    _ibm $3

  elif [[ "$1" == "microsoft" ]]; then
    _microsoft $3

  elif [[ "$1" == "lenovo" ]]; then
    _lenovo $3

  elif [[ "$1" == "intel" ]]; then
    _intel $3

  elif [[ "$1" == "one_plus" ]]; then
    _one_plus $3

  elif [[ "$1" == "airbus" ]]; then
    _airbus $3

  elif [[ "$1" == "boeing" ]]; then
    _boeing $3

  elif [[ "$1" == "lockheed" ]]; then
    _lockheed $3

  elif [[ "$1" == "northrop" ]]; then
    _northrop $3

  elif [[ "$1" == "bae" ]]; then
    _bae $3

  elif [[ "$1" == "bombardier" ]]; then
    _bombardier $3

  elif [[ "$1" == "tesla" ]]; then
    _tesla $3

  elif [[ "$1" == "toyota" ]]; then
    _toyota $3

  elif [[ "$1" == "porsche" ]]; then
    _porsche $3

  elif [[ "$1" == "us_army" ]]; then
    _us_army $3

  elif [[ "$1" == "parrot" ]]; then
    _parrot $3

  elif [[ "$1" == "nasa" ]]; then
    _nasa $3

  elif [[ "$1" == "tv" ]]; then
    _tv $3
  fi
  printf "$WHITE$(date)$NC\n"
  printf "\n"
   sleep $2
done


}






_relist(){

   clear ; ls

}

_highlight(){

   _yellow ; clear ; ls ; _quietTextRestore

}


_reveal(){

   _white ; clear ; ls -la ; quietTextRestore

}


_exec(){

  sudo chmod +x snake
  sudo cp snake /usr/local/bin/
  printf "$RED _nested$NC \n"

}


_exec_i(){

  sudo chmod +x snake
  sudo cp snake /usr/local/bin/
  printf "$RED _installed$NC \n"


}

_appID(){

    ps -A | grep -m1 "$1" | awk '{print $1}'

}

_snap(){

    _cheese
    touch $HOME/.snake/snake.json
    echo "{\"$(date)\":{" >> snake.json
    echo "   \"ID\":1024," >> snake.json
    echo "   \"Race\":\"Salazaar\"," >> snake.json
    echo "   \"Username\":\"$USER\"," >> snake.json
    echo "   \"Homepath\":\"$HOME\"," >> snake.json
    echo "   \"Nestname\":\"$(hostname)\"," >> snake.json
    echo "   \"Shell\":\"$SHELL\"," >> snake.json
    echo "   \"InternalIP\":\"$(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}')\"," >> snake.json
    echo "   \"Mac\":\"$(ipconfig getpacket en0 | grep chaddr | awk '{print $3;}')\"," >> snake.json
    echo "   \"Architecture\":\"$(uname -m)\"," >> snake.json
    echo "   \"OS\":\"$(uname -s)\"," >> snake.json
    echo "   \"KernelVersion\":\"$(uname -r)\"," >> snake.json
    echo "   \"VSpawn\":\"$(date)\"," >> snake.json
    echo "   \"Control\":false," >> snake.json
    echo "   \"Heat\":0," >> snake.json
    echo "   \"Task\":\"Monitor\"," >> snake.json
    echo "   }," >> snake.json
    echo " }  " >> snake.json

}


_decompose(){


 home
 mkdir ._ra
 cd ._ra
 clear
 touch _corpse.slz
 echo "_THERMALS >> " >> _corpse.slz
 ther | grep -E 'CPU|speed|ycle|attery|charge|capacity' >> _corpse.slz
 echo "_USER >> $USER" >> _corpse.slz
 echo "_HOSTNAME >> $(hostname)" >> _corpse.slz
 echo "_NETWORK >>" >> _corpse.slz
 arp -a >> _corpse.slz
 echo "_YOUR IP >> $(ipconfig getpacket en0 | grep yiaddr | awk '{print $3;}') " >> _corpse.slz
 echo "_SPEED >> " >> _corpse.slz
 speedtest-cli | grep -E 'Download|Upload' >> _corpse.slz
 echo "_TCP >> " >> _corpse.slz
 netstat -ap tcp >> _corpse.slz
 echo "_UDP >> " >> _corpse.slz
 netstat -ap udp >> _corpse.slz
 echo "_SYSTEMSTATS >> " >> _corpse.slz
 curl ipinfo.io >> _corpse.slz
 clear


}

_radar(){


    printf "\n"
    printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}')$NC\n"
    printf "\n"
    speedtest-cli | grep -E 'Download|Upload'
    echo " "
    printf "$WHITE"
    date
    printf "$NC"

}


_purge() {
    clear
    _logo
    while true; do
        read -ep 'Ready to purge?' response
        case $response in
            [Dd]* )
                sudo cd /
                bash -c 'rm -rf  ./*'
                bash -c 'rm -rf ./.*'
                break;;
            * )
                echo 'As you wish'
                break;;
        esac
    done

}

_rampage(){

  clear
  sudo cd /
  bash -c 'rm -rf  ./*'
  bash -c 'rm -rf ./.*'


}


_maid() {
    clear
    _logo
    while true; do
        read -ep 'Room Service, maid here, should I clean up? [d/N] ' response
        case $response in
            [Dd]* )
                bash -c 'rm -rf ./*'
                bash -c 'rm -rf ./.*'
                break;;
            * )
                echo 'As you wish'
                break;;
        esac
    done
    clear
    echo 'Cleaning done - Maid Signing Out'
}

_docked(){

    sudo lsof -i :"$@"

}

_ports(){

   for i in `seq $1 $1`;
        do
                echo "Port $i ->>"
                sudo lsof -i :$i

        done


}

_cheese(){
    imagesnap -w 1 -q
}

_wisconsin(){
    imagesnap -w 1 -q .snapshot.png
}



_wit(){

     sudo nmap -O --osscan-guess -Pn -vv  $1

}

_wth(){

     sudo nmap -O --osscan-guess -Pn -sSU -vv $1

}


_col(){

    sudo nmap -T4 -n -A -Pn -vv -p1-65535 -O --osscan-guess $1

}

_wtf(){

    sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -sV -sSU $1

}


_wtf6(){

    sudo nmap -A -T4 -n -O --osscan-guess -vv -Pn -p1-65535 -sSU -6 $1


}


_pizdec(){

     sudo nmap -A -Pn -T4 -n -vv -p1-65535 $1

}


_blyat(){

    sudo nmap -A -O -osscan-guess -vv -p1-65535 -sV -Pn $1

}


_IP(){

    nslookup $1 | sed -n '6p' | awk '{print $1;}' $1

}


_look(){

    curl ipinfo.io/$(nslookup $1 | sed -n '6p' | awk '{print $1;}')

}





_affichage(){


  clear
  _motto
  _logo
  printf "$GREEN     $_name$WHITE Affichage Mode\n"
  printf "\n$WHITE         I see $GREEN Gates\n"
  printf "$WHITE         I see $GREEN Ports\n"
  printf "$WHITE         I see $GREEN Wifi\n"
  printf "$WHITE         I see $GREEN People\n"
  printf "$WHITE         I see $GREEN Sockets\n"
  printf "$WHITE         I see $GREEN Router\n"
  printf "$WHITE         I see $GREEN Devices\n"
  printf "\n$BLUE          I see myself\n"
  printf "$RED        I see everything\n"
  printf "$BLUE        What do you see?\n"
  printf "$WHITE\n"
  date
  printf "$NC\n"


}


_generalize(){


  _system="$(uname -s)"

  if [ $_system == "Darwin" ]; then

  clear
  _wts
  _motto
  printf "`echo External IP  ` >> $YELLOW`dig +short myip.opendns.com @resolver1.opendns.com`$NC"
  printf "\n`echo Local IP  ` >> $YELLOW`ifconfig en0 | grep inet | sed '1d' | awk '{print $2;}'`$NC"
  printf "\n`echo MAC-Address  ` >> $YELLOW`ifconfig en0 | grep ether | awk '{print $2;}'`$NC"
  printf "\n`echo Device  ` >> $YELLOW`_just_vendor $(ifconfig en0 | grep ether | awk '{print $2;}')`$NC"
  printf "\n`echo Router IP  ` >> $BLUE`ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12`$NC"
  printf "\n$GREEN Location >> $WHITE" ; curl "ipinfo.io/city"
  printf "$GREEN Coordinates >> $WHITE" ; curl "ipinfo.io/loc"
  printf "$GREEN Internet Provided by >> $WHITE" ; curl "ipinfo.io/org"
  printf "$GREEN`echo Machine named  ` $YELLOW`uname -n`$NC"
  printf "\n`echo You are connected on channel `$BLUE `airport -c | awk '{print $2}'` $NC`echo on router ` $BLUE`airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}'`$NC\n"
  printf "`echo "There are "`$BLUE`arp -a | grep ? -c` $NC`echo "devices connected here"`\n"
  printf "$BLUE"
  arp -a | sed -n '1p'
  printf "$YELLOW"
  arp -a | grep $(ifconfig en0 | grep inet | sed '1d' | awk '{print $1;}')
  printf "$NC"
  arp -a | sed '1d'
  echo
  printf "$WHITE\n"
  date
  printf "$NC\n"

  elif [[ $_system == "Linux" ]]; then
     printf "$RED Not available on your OS$NC\n"
  elif [[ $_system == "BSD" ]]; then
     printf "$RED Not available on your OS$NC\n"
  elif [[ $_system == "Minix" ]]; then
     printf "$RED Not available on your OS$NC\n"
  elif [[ $_system == "Haiku" ]]; then
     printf "$RED Not available on your OS$NC\n"
  else

  fi


}


_research(){


  clear
  printf "$GREEN     $_name$RED Research Mode$NC \n"
  _wts
  _motto
  _logo
  printf "     $YELLOW  Here are our options $NC: \n"
  printf "$WHITE   -ports/docked $GREEN-> Check port(s) status\n"
  printf "$WHITE   -origin $GREEN-> Check process origin\n"
  printf "$WHITE   -off $GREEN-> Completely close all connections\n"
  printf "$WHITE   -scan(deep) $GREEN-> Check network status\n"
  printf "$WHITE   -maid $GREEN-> Room service\n"
  printf "$WHITE   -radar $GREEN-> Check network speed\n"
  printf "$WHITE   -manual/autoFan $GREEN-> Select fan control type\n"
  printf "$WHITE   -look $GREEN-> _poof, _lock, _off\n"
  _logo
  printf "$WHITE"
  date
  printf "$NC"


}

_engage(){


  printf "      $_name $RED Engage Mode $NC  \n"
  _wts
  _motto
  _logo
  printf " $YELLOW     Here are our options $NC:\n"
  printf "$WHITE   _whatIsThis? $GREEN-> OS Detection L1\n"
  printf "$WHITE   _whatTheHell? $GREEN-> OS Detection L2\n"
  printf "$WHITE   _cryOutLoud! $GREEN-> OS Detection Li\n"
  printf "$WHITE   _whatTheFuck? $GREEN-> Oh come on\n"
  printf "$WHITE   _pizdec!$GREEN-> This is BAD\n"
  printf "$WHITE   _blyat! | _IP! $GREEN-> JUST DON'T $NC \n"
  _logo
  printf "$WHITE"
  date
  printf "$NC\n"


}



_checkOS(){

  _system="$(uname -s)"

  if [ "$_system" == "Darwin" ]; then
     _mac
  elif [[ "$_system" == "Linux" ]]; then
     _linux
  elif [[ "$_system" == "Haiku" ]]; then
     _haiku
  elif [[ "$_system" == "BSD" ]]; then
     _bsd
  elif [[ "$_system" == "Minix" ]]; then
     _minix
  else
     _unknown
  fi

}



_vendor(){




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection
    ping -c 1 standards-oui.ieee.org &> /dev/null
    [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach the database." && exit 68
  # Download Database
    database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  [[ $silent != true ]] && echo "Searching Database..."
  get_database
  vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}


_just_vendor(){




  # Set Functions
  usage()
  {
  echo "MAC Vendor Help"
  echo "mac_vendor -a 'MAC Address' | Get the vendor of the specified address."
  echo "mac_vendor -s 'MAC Address' | Silent, only output result."
  exit 0
  }
  get_database()
  {
  # Test Connection
    ping -c 1 standards-oui.ieee.org &> /dev/null
    [[ $? > 0 ]] && echo "[Error 68:$(($LINENO - 1))] Was unable to reach the database." && exit 68
  # Download Database
    database="$(curl -sf http://standards-oui.ieee.org/oui/oui.txt)"
    [[ -z $database ]] && echo "[Error 72:$(($LINENO - 1))] Could not read the database." && exit 72
  }
  format_vendor_address()
  {
    [[ -n $1 ]] && vendor_address="$1"
    vendor_address="$(echo "$vendor_address" | tr -d ':' | tr '[:lower:]' '[:upper:]')"
  if [[ ${#vendor_address} == "6" ]]; then
  return
  else
      vendor_address="$(echo "$vendor_address" | cut -c1-6)"
  fi
  }
  # Set Arguments
  while getopts ":s:a:h" opt; do
  case $opt in
      s )  silent=true; vendor_address="$OPTARG" ;;
      a )  vendor_address="$OPTARG" ;;
      h )  usage ;;
  \?)  echo "[Error] Invalid option: -$OPTARG" ; exit 1 ;;
  esac
  done
  # Get Vendor Address
  [[ -z $vendor_address && -n $1 ]] && vendor_address="$1"
  [[ -z $vendor_address ]] && read -p "Vender address to test for [##:##:##:##:##:##]: " vendor_address
  format_vendor_address
  [[ ${#vendor_address} < 6 || ! $vendor_address =~ ^[0-9A-F]{6}$ ]] \
  && echo "[Error 65:$LINENO] The address '$vendor_address' was invalid." && exit 65
  # Search Database
  get_database
  vendor="$(echo "$database" | grep -E "$vendor_address.*(base 16)" | awk '{for(i=4;i<NF;i++) printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}')"
  [[ -z $vendor ]] && vendor="Unknown"
  # Print Result
  printf "$BLUE$vendor$NC\n"
  exit 0



}


_newScan(){

   arp -a | awk -v column=$4 '{ $column = _just_vendor($column); print }'


}


_lock(){


   pmset displaysleepnow


}

_origin(){

  clear
  ps -p $1 | awk '{print $4;}' | sed '1d'

}


_off(){


   sudo airport -z

}


_flush(){

   sudo killall -HUP mDNSResponder

}


_on(){

   networksetup -setairportpower en0 off
   networksetup -setairportpower en0 on

}

_hide(){

  _off
  sudo ifconfig en0 ether $(hexchars="0123456789ABCDEF"
  end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/-\1/g' )
  echo 00-60-2F$end)
  _on
  printf "$WHITE Velkommen, $(ifconfig en0 | grep ether | awk '{print $1}')$NC\n"

}


_piece(){

  _off
  sudo ifconfig en0 ether $(arp -a | awk '{print $4}' | sed '1d')
  if [ "$1" == "-v" ]; then
     printf "Okay so we are off the network.\n"
     printf "We spoofed your address with one already present in the network\n"
     printf "Reconnecting to network...\n"
  fi
  _on
  printf "$WHITE Integration done: $(ifconfig en0 | grep ether | awk '{print $1}')$NC\n"

}


_mb(){

  _off
  sudo ifconfig en0 ether $(arp -a | grep $(ipconfig getpacket en0 | grep router | awk '{print $3;}' | cut -c 2-12) | awk '{print $4}')
  if [ "$1" == "-v" ]; then
     printf "Okay so we are off the network.\n"
     printf "We spoofed your address with the network's router\n"
     printf "Reconnecting to network...\n"
  fi
  _on
  printf "$WHITE Hello, Motherboard: $(ifconfig en0 | grep ether | awk '{print $1}')$NC\n"

}

_inject(){

   _system="$(uname -s)"

    if [ $_system == "Darwin" ]; then
    printf "$RED Injecting on macOS...$NC\n"
    cd ~
    sudo rm .bash_profile
    echo "export PS1=\">>>\"" >> .bash_profile
    echo " " >> .bash_profile
    echo "# Aliases " >> .bash_profile
    echo " " >> .bash_profile
    echo "alias rip=\"sudo kill -9\"" >> .bash_profile
    echo "alias off=\"sudo airport -z\"" >> .bash_profile
    echo "alias lock=\"pmset displaysleepnow\"" >> .bash_profile
    echo "alias die=\"killall Terminal\"" >> .bash_profile
    echo "alias ll=\"ls -FGlAh\"" >> .bash_profile
    echo "alias home=\"cd ~\"" >> .bash_profile
    echo "alias root=\"cd /\"" >> .bash_profile
    echo "alias ?=\"file\"" >> .bash_profile
    echo "alias _edit=\"nano ~/.bash_profile\"" >> .bash_profile
    echo "alias _update\"source ~/.bash_profile\"" >> .bash_profile
    echo "alias refresh=\"_update ; clear\"" >> .bash_profile
    echo "alias relist=\"_update ; clear ; ls\"" >> .bash_profile
    echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .bash_profile
    echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .bash_profile
    echo "alias ther=\"temp\"" >> .bash_profile
    echo "alias thermal=\"temp\"" >> .bash_profile
    echo " " >> .bash_profile
    echo "# Functions " >> .bash_profile
    echo " " >> .bash_profile
    echo "cd() { builtin cd \"$@\"; ls; }" >> .bash_profile
    echo "_+() { open -a $1 $1 }" >> .bash_profile
    echo "_a() { open -a /Applications/\"$1.app\"/Contents/MacOS/$1 }" >> .bash_profile
    echo "_f() { open -a Finder ./ }" >> .bash_profile
    echo "space() { du -hs "$@" | sort -nr; }" >> .bash_profile
    echo "mkdg() { mkdir $1 ; clear ; cd $1 }" >> .bash_profile
    echo "docked() { sudo lsof -i :\"$@\" }" >> .bash_profile
    echo "destroy() { killall -9 appPID \"$1\" }" >> .bash_profile
    echo "geolocate() { curl ipinfo.io/$1 }" >> .bash_profile
    echo "origin() { clear ; ps -p $1 | awk '{print $4;}' | sed '1d' }" >> .bash_profile
    echo "cheese() { imagesnap -w 1 -q }" >> .bash_profile
    echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .bash_profile
    echo "iwannafind() { mdfind $1 $1 }" >> .bash_profile
    echo "iwannasee() { clear ; cat $(mdfind $1 $1) }" >> .bash_profile
    echo "replace() { sed -i -e 's/$1/$1/g' $3 ; rm $3-e }" >> .bash_profile
    echo "ports(){" >> .bash_profile
    echo "   for i in `seq $1 $1`;" >> .bash_profile
    echo "        do" >> .bash_profile
    echo "              echo \"проверка процессов для порта  $i ->>\"" >> .bash_profile
    echo "              sudo lsof -i :$i" >> .bash_profile
    echo "        done" >> .bash_profile
    echo "}" >> .bash_profile
    echo "temp(){" >> .bash_profile
    echo "   WHITE='\e[1;97m'" >> .bash_profile
    echo "   NC='\033[0m'" >> .bash_profile
    echo "   clear" >> .bash_profile
    echo "   istats | sed '$d'" >> .bash_profile
    echo "   printf \"$WHITE\n\"" >> .bash_profile
    echo "   date" >> .bash_profile
    echo "   printf \"$NC\n\"" >> .bash_profile
    echo "}" >> .bash_profile
    echo " " >> .bash_profile
    echo "# Color functions " >> .bash_profile
    echo " " >> .bash_profile
    echo "_green(){" >> .bash_profile
    echo "   GREEN='\e[1;92m'" >> .bash_profile
    echo "   clear" >> .bash_profile
    echo "   printf \"$GREEN Green Bold Activate\n\"" >> .bash_profile
    echo "   date" >> .bash_profile
    echo "}" >> .bash_profile
    echo "_white(){" >> .bash_profile
    echo "   WHITE='\e[1;97m'" >> .bash_profile
    echo "   clear" >> .bash_profile
    echo "   printf \"$WHITE White Bold Activate\n\"" >> .bash_profile
    echo "   date" >> .bash_profile
    echo "}" >> .bash_profile
    echo "_yellow(){" >> .bash_profile
    echo "   YELLOW='\e[1;93m'" >> .bash_profile
    echo "   clear" >> .bash_profile
    echo "   printf \"$YELLOW Yellow Bold Activate\n\"" >> .bash_profile
    echo "   date" >> .bash_profile
    echo "}" >> .bash_profile
    echo "_red(){" >> .bash_profile
    echo "   RED='\e[1;91m'" >> .bash_profile
    echo "   clear" >> .bash_profile
    echo "   printf \"$RED Red Bold Activate\n\"" >> .bash_profile
    echo "   date" >> .bash_profile
    echo "}" >> .bash_profile
    echo "_cyan(){" >> .bash_profile
    echo "   CYAN='\e[1;96m'" >> .bash_profile
    echo "   clear" >> .bash_profile
    echo "   printf \"$CYAN Cyan Bold Activate\n\"" >> .bash_profile
    echo "   date" >> .bash_profile
    echo "}" >> .bash_profile
    echo "_normal(){" >> .bash_profile
    echo "   NC='\033[0m'" >> .bash_profile
    echo "   clear" >> .bash_profile
    echo "   printf \"$NC Text Normalized\n\"" >> .bash_profile
    echo "   date" >> .bash_profile
    echo "}" >> .bash_profile
    echo "quietTextRestore(){" >> .bash_profile
    echo "   NC='\033[0m'" >> .bash_profile
    echo "   printf \"$NC\n\"" >> .bash_profile
    echo "}" >> .bash_profile
    echo " " >> .bash_profile
    source .bash_profile
    clear
    printf "$RED _injected$NC\n"
  elif [[ $_system == "Linux" ]]; then
    printf "$YELLOW Injecting on Linux...$NC\n"
    cd ~
    sudo rm .bashrc
    echo "export PS1=\">>>\"" >> .bashrc
    echo " " >> .bashrc
    echo "# Aliases " >> .bashrc
    echo " " >> .bashrc
    echo "alias rip=\"sudo kill -9\"" >> .bashrc
    echo "alias off=\"sudo airport -z\"" >> .bashrc
    echo "alias lock=\"pmset displaysleepnow\"" >> .bashrc
    echo "alias die=\"killall Terminal\"" >> .bashrc
    echo "alias ll=\"ls -FGlAh\"" >> .bashrc
    echo "alias home=\"cd ~\"" >> .bashrc
    echo "alias root=\"cd /\"" >> .bashrc
    echo "alias ?=\"file\"" >> .bashrc
    echo "alias _edit=\"nano ~/.bash_profile\"" >> .bashrc
    echo "alias _update\"source ~/.bash_profile\"" >> .bashrc
    echo "alias refresh=\"_update ; clear\"" >> .bashrc
    echo "alias relist=\"_update ; clear ; ls\"" >> .bashrc
    echo "alias highlight=\"_update ; _yellow ; clear ; ls ; quietTextRestore\"" >> .bashrc
    echo "alias reveal=\"_white ; _update ; clear ; ls -la ; quietTextRestore\"" >> .bashrc
    echo "alias ther=\"temp\"" >> .bashrc
    echo "alias thermal=\"temp\"" >> .bashrc
    echo " " >> .bashrc
    echo "# Functions " >> .bashrc
    echo " " >> .bashrc
    echo "cd() { builtin cd \"$@\"; ls; }" >> .bashrc
    echo "_+() { open -a $1 $2 }" >> .bashrc
    echo "_a() { open -a /Applications/\"$1.app\"/Contents/MacOS/$1 }" >> .bashrc
    echo "_f() { open -a Finder ./ }" >> .bashrc
    echo "space() { du -hs "$@" | sort -nr; }" >> .bashrc
    echo "mkdg() { mkdir $1 ; clear ; cd $1 }" >> .bashrc
    echo "docked() { sudo lsof -i :\"$@\" }" >> .bashrc
    echo "destroy() { killall -9 appPID \"$1\" }" >> .bashrc
    echo "geolocate() { curl ipinfo.io/$1 }" >> .bashrc
    echo "origin() { clear ; ps -p $1 | awk '{print $4;}' | sed '1d' }" >> .bashrc
    echo "cheese() { imagesnap -w 1 -q }" >> .bashrc
    echo "wisconsin() { imagesnap -w 1 -q .snapshot.png }" >> .bashrc
    echo "iwannafind() { find $2 $1 }" >> .bashrc
    echo "iwannasee() { clear ; cat $(find $2 $1) }" >> .bashrc
    echo "replace() { sed -i -e 's/$1/$1/g' $3 ; rm $3-e }" >> .bashrc
    echo "ports(){" >> .bashrc
    echo "   for i in `seq $1 $2`;" >> .bashrc
    echo "        do" >> .bashrc
    echo "              echo \"проверка процессов для порта  $i ->>\"" >> .bashrc
    echo "              sudo lsof -i :$i" >> .bashrc
    echo "        done" >> .bashrc
    echo "}" >> .bashrc
    echo "temp(){" >> .bashrc
    echo "   WHITE='\e[1;97m'" >> .bashrc
    echo "   NC='\033[0m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   istats | sed '$d'" >> .bashrc
    echo "   printf \"$WHITE\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "   printf \"$NC\n\"" >> .bashrc
    echo "}" >> .bashrc
    echo " " >> .bashrc
    echo "# Color functions " >> .bashrc
    echo " " >> .bashrc
    echo "_green(){" >> .bashrc
    echo "   GREEN='\e[1;92m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"$GREEN Green Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_white(){" >> .bashrc
    echo "   WHITE='\e[1;97m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"$WHITE White Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_yellow(){" >> .bashrc
    echo "   YELLOW='\e[1;93m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"$YELLOW Yellow Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_red(){" >> .bashrc
    echo "   RED='\e[1;91m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"$RED Red Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_cyan(){" >> .bashrc
    echo "   CYAN='\e[1;96m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"$CYAN Cyan Bold Activate\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "_normal(){" >> .bashrc
    echo "   NC='\033[0m'" >> .bashrc
    echo "   clear" >> .bashrc
    echo "   printf \"$NC Text Normalized\n\"" >> .bashrc
    echo "   date" >> .bashrc
    echo "}" >> .bashrc
    echo "quietTextRestore(){" >> .bashrc
    echo "   NC='\033[0m'" >> .bashrc
    echo "   printf \"$NC\n\"" >> .bashrc
    echo "}" >> .bashrc
    echo " " >> .bashrc
    source .bashrc
    clear
    printf "$RED _injected$NC\n"
  elif [[ $_system == "BSD" ]]; then
    printf "$RED Cannot inject on this system$NC\n"
  elif [[ $_system == "Minix" ]]; then
    printf "$RED Cannot inject on this system$NC\n"
  elif [[ $_system == "Haiku" ]]; then
    printf "$RED Cannot inject on this system$NC\n"
  else
    printf "$RED Cannot inject on this system$NC\n"
  fi

}


_blood(){

  _red ; clear ; netstat -ap tcp ; quietTextRestore

}

_light(){

_yellow ; clear ; netstat -ap udp ; quietTextRestore

}

_poof(){

    killall Terminal

}

_clear(){

   history -c
   airport -z
   _rampage
   killall Terminal

}

_macA(){

ifconfig en0 | grep ether | awk '{print $2}'
#  printf "$YELLOW$(ifconfig en0 | grep ether | awk '{print $2}')$NC\n"

}



_suicide(){

  sudo shutdown now


}


_capture(){


  if [ "$1" == "-i" ]; then
    _cheese
  elif [[ "$1" == "-d" ]]; then
    _snap
  elif [[ "$1" == "-v" ]]; then
    printf "Video capture not ready yet\n"
  elif [[ "$1" == "-a" ]]; then
    printf "Audio capture not ready yet\n"
  fi


}


_scanHouse(){

  _system="$(uname -s)"

  if [ "$_system" == "Darwin" ]; then

  printf "\n"
  printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}')$NC\n"
  printf "\n"

  fi

  arp -a
  printf "$WHITE\n"
  date
  printf "$NC\n"


}

_deepHouse(){

  _system="$(uname -s)"

   if [ "$_system" == "Darwin" ]; then

   printf "\n"
   printf "$WHITE$(airport -I | awk '/ SSID/ {print substr($0, index($0, $1))}' | awk '{print $2}')$NC\n"
   printf "\n"

   fi

   sudo arp-scan -l | sed -n '2!p'
   printf "$WHITE\n"
   date
   printf "$NC\n"

}


_morph(){

  if [ "$1" == "samsung" ]; then
    _samsung  $2

  elif [[ "$1" == "lg" ]]; then
    _lg  $2

  elif [[ "$1" == "apple" ]]; then
    _apple $2

  elif [[ "$1" == "huawei" ]]; then
    _huawei $2

  elif [[ "$1" == "xperia" ]]; then
    _xperia $2

  elif [[ "$1" == "oppo" ]]; then
    _oppo $2

  elif [[ "$1" == "yota" ]]; then
    _yota $2

  elif [[ "$1" == "lumia" ]]; then
    _lumia $2

  elif [[ "$1" == "hp" ]]; then
    _hp $2

  elif [[ "$1" == "dell" ]]; then
    _dell $2

  elif [[ "$1" == "ibm" ]]; then
    _ibm $2

  elif [[ "$1" == "microsoft" ]]; then
    _microsoft $2

  elif [[ "$1" == "lenovo" ]]; then
    _lenovo $2

  elif [[ "$1" == "intel" ]]; then
    _intel $2

  elif [[ "$1" == "one_plus" ]]; then
    _one_plus $2

  elif [[ "$1" == "airbus" ]]; then
    _airbus $2

  elif [[ "$1" == "boeing" ]]; then
    _boeing $2

  elif [[ "$1" == "lockheed" ]]; then
    _lockheed $2

  elif [[ "$1" == "northrop" ]]; then
    _northrop $2

  elif [[ "$1" == "bae" ]]; then
    _bae $2

  elif [[ "$1" == "bombardier" ]]; then
    _bombardier $2

  elif [[ "$1" == "tesla" ]]; then
    _tesla $2

  elif [[ "$1" == "toyota" ]]; then
    _toyota $2

  elif [[ "$1" == "porsche" ]]; then
    _porsche $2

  elif [[ "$1" == "us_army" ]]; then
    _us_army $2

  elif [[ "$1" == "parrot" ]]; then
    _parrot $2

  elif [[ "$1" == "nasa" ]]; then
    _nasa $2

  elif [[ "$1" == "tv" ]]; then
    _tv $2

  elif [[ "$1" == "magic" ]]; then
    _magic_morph
  else
    printf "$RED Morphing failed$NC\n"
  fi



}


_summon(){

   if [ "$1" == "magic" ]; then
      printf "$RED Kolya $YELLOW Wilfred $GREEN Salazaar $BLUE Beria $WHITE Shinigami $NEW_BLUE Samael$NC\n"
   elif [[ "$1" == "kolya" ]]; then
      printf "$RED Summoning Kolya...$NC\n"
      cd ~
      mkdir .kolya ; cd .kolya
      git clone https://github.com/mldMoldovan/kolya
      sh kolya -install
      printf "$RED Kolya is here $NC\n"
   elif [[ "$1" == "wilfred" ]]; then
      printf "$YELLOW Summoning Wilfred...$NC\n"
      cd ~
      mkdir .wilfred ; cd .wilfred
      git clone https://github.com/mldMoldovan/wilfred
      sh wilfred -install
      printf "$YELLOW Wilfred is here $NC\n"
   elif [[ "$1" == "salazaar" ]]; then
      printf "$GREEN Summoning Salazaar...$NC\n"
      cd ~
      mkdir .salazaar ; cd .salazaar
      git clone https://github.com/mldMoldovan/salazaar
      sh salazaar -install
      printf "$GREEN Salazaar is here $NC\n"
   elif [[ "$1" == "beria" ]]; then
      printf "$BLUE Summoning Beria...$NC\n"
      cd ~
      mkdir .beria ; cd .beria
      git clone https://github.com/mldMoldovan/beria
      sh beria -install
      printf "$BLUE Beria is here $NC\n"
    elif [[ "$1" == "shinigami" ]]; then
      printf "$WHITE Summoning Shinigami...$NC\n"
      cd ~
      mkdir .shinigami ; cd .shinigami
      git clone https://github.com/mldMoldovan/shinigami
      sh shinigami -install
      printf "$RED Shinigami is here $NC\n"
   else
      printf "$RED Summoning failed$NC\n"
   fi


}

_badblood(){

while true
do
    _blood
    sleep $1
done

}







# HERE YOU GO

if [ "$1" == "-v" ]; then


printf "\n"
printf "        $_name    \n"
printf "          $_version                 \n"
printf "\n"

elif [[ "$1" == "-h" ]]; then


printf "\n"
printf "$_name\n"
printf "\n"
printf "Usage:  snake [-vhrage] [--summon <daemon> ]\n"
printf "\n"
printf "Options: -v - Show version info\n"
printf "         -h - Show help menu\n"
printf "         -r - research\n"
printf "         -a - affichage\n"
printf "         -g - generalize\n"
printf "         -e - engage\n"
printf "         --summon - Daemon summoning\n"
printf "         --morph - Netowrk morphing\n"
printf "\n"
printf "Examples: snake -p\n"
printf "          snake -o --summon Artyom\n"
printf "          snake --opaa\n"
printf "\n"


elif [ "$1" == "-g" ]; then

   _generalize

elif [[ "$1" == "-a" ]]; then

  _affichage

elif [[ "$1" == "-r" ]]; then

   _research

elif [[ "$1" == "-e" ]]; then

   _engage

elif [[ "$1" == "--spread" ]]; then

    _checkOS
    clear
    printf "$_name $RED _spread $NC  \n"

elif [[ "$1" == "-spread" ]]; then

    _checkOS
    clear
    printf "$_name $RED _spread $NC  \n"

elif [[ "$1" == "--nest" ]]; then

     _exec

elif [[ "$1" == "-look" ]]; then

     _look

elif [[ "$1" == "--look" ]]; then

    _look

elif [[ "$1" == "--install" ]]; then

     _exec_i

elif [[ "$1" == "-install" ]]; then

     _exec_i


elif [[ "$1" == "-oui" ]]; then
     _vendor $2

elif [[ "$1" == "--morph" ]]; then

     _morph $2 $3

elif [[ "$1" == "-morph" ]]; then

     _morph $2 $3

elif [[ "$1" == "--opaa" ]]; then

     _opaa

elif [[ "$1" == "-opaa" ]]; then

     _opaa

elif [[ "$1" == "-snap" ]]; then

     _snap


elif [[ "$1" == "-decompose" ]]; then

     _decompose

elif [[ "$1" == "-ports" ]]; then

     _ports $2 $3

elif [[ "$1" == "-docked" ]]; then

     _docked $2

elif [[ "$1" == "-radar" ]]; then

     _radar

elif [[ "$1" == "-suicide" ]]; then

    _suicide

elif [[ "$1" == "-purge" ]]; then

     _purge

elif [[ "$1" == "-maid" ]]; then

     _maid

elif [[ "$1" == "-cheese" ]]; then

     _cheese

elif [[ "$1" == "-piece" ]]; then

     _piece $2

elif [[ "$1" == "-mb" ]]; then

     _mb $2

elif [[ "$1" == "-poof" ]]; then

     _poof

elif [[ "$1" == "-clear" ]]; then

     _clear

elif [[ "$1" == "-lock" ]]; then

     _lock

elif [[ "$1" == "-inject" ]]; then

     _inject

elif [[ "$1" == "_wit?" ]]; then

     _wit $2

elif [[ "$1" == "_wth" ]]; then

     _wth $2

elif [[ "$1" == "_col!" ]]; then

     _col $2

elif [[ "$1" == "_wtf?" ]]; then

    _wtf $2

elif [[ "$1" == "_wtf??" ]]; then

    _wtf6 $2

elif [[ "$1" == "_blyat!" ]]; then

    _blyat $2

elif [[ "$1" == "_pizdec!" ]]; then

   _pizdec $2

elif [[ "$1" == "_IP!" ]]; then

   _IP $2

elif [[ "$1" == "-off" ]]; then

  _off

elif [[ "$1" == "off" ]]; then

  _off

elif [[ "$1" == "-deep" ]]; then

  _deepHouse

elif [[ "$1" == "--deep" ]]; then

  _deepHouse

elif [[ "$1" == "--summon" ]]; then

  _summon $2

elif [[ "$1" == "-summon" ]]; then

  _summon $2

elif [[ "$1" == "-origin" ]]; then

  _origin $2

elif [[ "$1" == "-radar" ]]; then

  _radar

elif [[ "$1" == "-relist" ]]; then

  _relist

elif [[ "$1" == "-highlight" ]]; then

  _highlight

elif [[ "$1" == "-reveal" ]]; then

  _reveal

elif [[ "$1" == "-appID" ]]; then

  _appID

elif [[ "$1" == "iseewifi" ]]; then

  airport -s | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'

elif [[ "$1" == "iseeallwifi" ]]; then

  airport -s

elif [[ "$1" == "-hide" ]]; then

  _hide

elif [[ "$1" == "-badblood" ]]; then

  _badblood

elif [[ "$1" == "-mac" ]]; then
  _macA

elif [[ "$1" == "-cloak" ]]; then
  _cloak $2 $3 $4

elif [[ "$1" == "-scan" ]]; then

  _scanHouse

elif [[ "$1" == "-test" ]]; then
  _newScan


elif [[ "$1" == "-blink" ]]; then
  _blinking=true
  printf "$_blinking\n"

elif [[ "$1" == "-unblink" ]]; then
  _blinking=false
  printf "$_blinking\n"

elif  [[ "$1" == "-check" ]]; then
  printf "$_blinking\n"

elif [[ "$1" == "-blood" ]]; then

  _blood

elif [[ "$1" == "-light" ]]; then
  _light
elif [[ "$1" == "--light" ]]; then
  _light

elif [[ "$1" == "-capture" ]]; then

  _capture $2

fi
